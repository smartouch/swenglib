<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-G7JvWuQbs0QNVewOVQN1PQ" name="new_supporting_material,_qahbAOOnEd60Vqt-mczKVA" guid="-G7JvWuQbs0QNVewOVQN1PQ" changeDate="2009-12-07T19:16:27.015-0800" version="7.5.0">
  <mainDescription>&lt;h5>&#xD;
    The benefits of modeling&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Why do we model? We model to manage complexity, to simplify and abstract essential aspects of a system. We model so&#xD;
    that we can test inexpensively before we build, so that we can erase with a pencil before we have to demolish with a&#xD;
    sledgehammer (this is an adaptation of a quote from Frank Lloyd Wright: An architect's most useful tools are an eraser&#xD;
    at the drafting board, and a wrecking bar at the site).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The models are the architecture-they provide us with multiple views of the system and promote our high level&#xD;
    understanding.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The SE Practices leverage the power of modeling to address a set of problems that have plagued systems development. We&#xD;
    discuss some of these problems in the sections that follow. A set of transformations are used to iteratively refine our&#xD;
    models and requirements, and our understanding of the system to be built.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Multiple views to address multiple concerns&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Our life is complicated, our systems are complex. They are built from many parts; often there are many systems working&#xD;
    together to accomplish a goal. Our minds do not handle certain kinds of complexity well. In mathematics, when we deal&#xD;
    with multi-variable equations, we isolate variables, solve for them, and substitute them back into the equation.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    We must provide a mechanism for doing the same thing for designing systems. We do the same thing when we design and&#xD;
    construct buildings. A building can be considered a system. When we construct a building, we draw up many different&#xD;
    plans: One for the electricity, another for the plumbing, different views of the exterior. To address the complexity of&#xD;
    our systems, we have to create viewpoints that address multiple concerns. These can vary from system to system. Common&#xD;
    viewpoints might include the logical viewpoint (what is the functionality), the distribution viewpoint (where does the&#xD;
    functionality take place), the data viewpoint (what domain entities are manipulated), and the worker viewpoint (what&#xD;
    human roles are involved). The SE Practices are explicitly designed to promote the creation of different viewpoints to&#xD;
    address different concerns.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more discussions on this topics see:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Cantor and Roose, Hardware/software co-development using a model-driven systems development (MDSD) approach, The&#xD;
        Rational Edge, IBM developerWorks&amp;reg;, December 2005&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Booch et al., Object-Oriented Analysis and Design with Applications, 3rd Edition, Addison-Wesley, 2007, chapters 1&#xD;
        and 2&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h5>&#xD;
    Integration of form and function&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Function does not occur in a vacuum. It is hosted by physical form. Form exists to carry out function. We build systems&#xD;
    to accomplish goals. The systems that we build do not exist in a vacuum-they are physical things. The goals that we&#xD;
    have for a system, the functionality that we would like it to exhibit, are realized by forms or structures. The form&#xD;
    that a system takes must support the goals that we have for it. Both the functionality of the systems and the systems&#xD;
    themselves are constrained: we want something to occur within a specified amount of time; we do not want the system to&#xD;
    harm its users or innocent bystanders.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Our systems generally must fit into certain spaces and weigh less than a certain amount. The goal of system design is&#xD;
    to create a set of forms that will provide desired functionality within a set of constraints. The SE Practices ensure&#xD;
    that system goals are met by distributing functionality across cooperating entities while reasoning about system&#xD;
    performance, and other constraints.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Scalability: Isomorphic composite structures and recursion&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Systems are composite structures; that is, they are made up of distinct pieces. Not only are they composite structures,&#xD;
    they are isomorphic; that is, each piece of the composite structure has a similar or identical structure itself.&#xD;
    Composite isomorphic structures lend themselves to being processed recursively. The SE Practices are scalable because&#xD;
    it is a recursive methodology. We can use it to reason about a system of any size. At each level of abstraction we&#xD;
    perform basically the same activities: understand the context of the system under consideration, understand the&#xD;
    collaboration required to achieve the system's desired goals, and understand how function is distributed across form to&#xD;
    achieve system goals within a set of constraints.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Benefits of the SE Practices&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    The SE Practices provide many benefits. These are some of the more significant ones:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Reduction of risk.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Enhanced team communication.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Explicit processes for reasoning about system issues and performing trade studies.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Early detection of errors.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Integration as you go, build better architecture.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Traceability.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h5>&#xD;
    Reduction of risk&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    In conjunction with appropriate governance, the SE Practices can significantly reduce the risks of system development.&#xD;
    The goal of many of the activities is to reduce risk. The creation of models is the creation of an architecture. We&#xD;
    build models to increase understanding, increased understanding reduces what is unknown both technically in the domain&#xD;
    space, and operationally in the project management space-our technical knowledge increases as we complete iterations.&#xD;
    At the same time, as we produce concrete deliverables we gain better estimates of time to completion. Increased levels&#xD;
    of specificity reduce the variance in a solution space. However, an artificial level of specificity is not created at&#xD;
    any point; the creation of false levels of specificity is often an unrecognized trap leading to false confidence and&#xD;
    nasty surprises. Increase in knowledge and reduction of variance are prime risk reducers.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Enhanced team communication&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Words can be slippery, elusive, and imprecise. Models can improve communication because they make specific a particular&#xD;
    aspect of a system (see Booch et al., Object-Oriented Analysis and Design with Applications, 3rd Edition,&#xD;
    Addison-Wesley, 2007, chapter 1). They also can make system issues visible through the use of diagrams. Often it is&#xD;
    easier to point to a picture or diagram than it is to describe something in words. The very act of modeling or&#xD;
    diagramming can force you to be concrete and specific.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Improved communication across a development organization also occurs as a result of the SE Practices. Engineers in&#xD;
    different disciplines have a unifying language they can use to deal with systems issues. Systems engineers can create&#xD;
    models, along with the textual requirements, that can be handed to the engineers in multiple disciplines (hardware,&#xD;
    software, and others) as specification for their design; common use case models can drive system development, testing,&#xD;
    and documentation.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Common languages promote common understanding. Unified Modeling Language (UML) and Systems Modeling Language (SysML)&#xD;
    derive from the same meta object framework; products in one or the other are likely to be understandable across diverse&#xD;
    disciplines. By focusing on usage, collaboration, and distribution, better cross-organizational discussions can take&#xD;
    place. Use cases, or common system threads, can unify stakeholders, developers, and users. Beyond systems and software&#xD;
    engineering the SE Practices also provides the framework for reasoning about the integration of concerns across all of&#xD;
    the engineering disciplines (for example, thermal, structure, electrical, and navigation).&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Explicit processes for reasoning about system issues&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Often, many of our design decisions are implicit, the result of many years of experience. While this can be valuable&#xD;
    (we do value experience), it can also lead to premature design decisions, or decisions that have not been adequately&#xD;
    reasoned through, communicated, tested, or verified.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Complexity also demands explicit processes. A commercial pilot would not think of taking off with a plane full of&#xD;
    passengers without a checklist of tasks and safety checks. We follow a repeatable process to improve quality and&#xD;
    consistency. By designing the process to address specific issues and risks, we increase our chances for success.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The SE Practices have been designed to address a specific set of issues in the development of complex systems. Explicit&#xD;
    processes also improve communications. Design decisions are taken out of the heads of engineers, documented through&#xD;
    models, and progressively refined. Process is not just the checking off of steps, but performing repeatable tasks to&#xD;
    produce quality artifacts-the quality of the process is judged by the quality of the results-where possible by&#xD;
    executable results, that is, a running system or piece of a system. See Walker Royce, Software Project Management: A&#xD;
    Unified Framework, Addison-Wesley, 1998; also Kurt Bittner and Ian Spence, Managing Iterative Software Development&#xD;
    Projects, Addison-Wesley, 2006&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Early detection of errors&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    One of the benefits of a well designed process for designing systems is the early detection and resolution of errors.&#xD;
    The cost of errors rises exponentially as they are discovered later in the system development life cycle.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Iterating through the production of a set of artifacts improves both the artifacts themselves and the system that is&#xD;
    the end product. Each progressive step in the process of defining context, defining collaborations, and specifying the&#xD;
    distribution of responsibilities across a set of cooperating entities highlights ambiguities in previous steps,&#xD;
    uncovers problems or issues in design, and provides the opportunity to correct mistakes early in the development&#xD;
    process at a much lower cost than when they go undetected until later.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    These SE Practices are based on many years of experience across a wide range of customers and projects.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Integration as you go - better architecture&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    One of our greatest challenges in developing systems is to integrate functionality successfully, avoid duplication of&#xD;
    functionality, and avoid brittle architectures. The SE Practices seek to avoid this kind of duplication of&#xD;
    functionality by promoting a breadth-first analysis of functionality across a set of collaborating entities.&#xD;
    Collaboration, both in the development process, and in system functionality is at the heart.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Traceability&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Traceability is usually a requirement for the systems that we build. Often, it is an explicit contract item: You shall&#xD;
    provide traceability matrices to demonstrate how the requirements of the system have been implemented and tested. Apart&#xD;
    from contract requirements, traceability is needed to do effective fault or impact analysis: If something goes wrong,&#xD;
    we must determine what caused the fault; if some requirement must be changed, or added, we must determine what parts of&#xD;
    the system will be affected.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Providing traceability can be an onerous requirement. Many times it is done manually at significant cost both in the&#xD;
    original development and later through testing and maintenance. Manual methods of providing traceability are difficult&#xD;
    to maintain and error-prone.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The SE Practices can help lighten the burden of providing and then maintaining traceability information. Three of the&#xD;
    core processes of MDSD, operations analysis, logical decomposition and joint realization, allow for a great deal of the&#xD;
    traceability problem to be automated.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
