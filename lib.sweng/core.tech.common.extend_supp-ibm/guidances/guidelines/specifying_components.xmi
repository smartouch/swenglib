<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-kaTicmXzxE1Q4JA4vTm3xQ" name="new_guideline,_-k2PcIEbEd2z9IawWqZSFw" guid="-kaTicmXzxE1Q4JA4vTm3xQ" changeDate="2008-09-17T18:56:07.884-0700" version="7.5.0">
  <mainDescription>&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    This guideline explains how to specify components following these steps:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;BulletsL1&quot; style=&quot;MARGIN: 3pt 0in 3pt 0.25in; TEXT-INDENT: -0.25in&quot;>&#xD;
            Define component interfaces&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;BulletsL1&quot; style=&quot;MARGIN: 3pt 0in 3pt 0.25in; TEXT-INDENT: -0.25in&quot;>&#xD;
            For each interface, specify operations and signatures&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;BulletsL1&quot; style=&quot;MARGIN: 3pt 0in 3pt 0.25in; TEXT-INDENT: -0.25in&quot;>&#xD;
            For each operation, specify pre- and post-conditions&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h2 style=&quot;MARGIN: 12pt 0in 6pt&quot;>&#xD;
    &lt;b>&lt;span style=&quot;FONT-SIZE: 12pt&quot;>1. Specify&lt;/span>&lt;/b> &lt;b style=&quot;mso-bidi-font-weight: normal&quot;>&lt;span     style=&quot;FONT-SIZE: 12pt&quot;>Component Interfaces&lt;/span>&lt;/b>&#xD;
&lt;/h2>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/component_CB167D48.html&quot; guid=&quot;_0YP18MlgEdmt3adZL5Dmdw&quot;>Components&lt;/a> exchange data or use the services of other components through &lt;i     style=&quot;mso-bidi-font-style: normal&quot;>&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp-ibm/guidances/concepts/interface_46AFCEE5.html&quot; guid=&quot;_aHFYoDfWEdyIwaPzqVg2tg&quot;>interfaces&lt;/a>&lt;/i>. Components &lt;i style=&quot;mso-bidi-font-style: normal&quot;>offer&lt;/i>&#xD;
    interfaces other components can use, and &lt;i style=&quot;mso-bidi-font-style: normal&quot;>use&lt;/i> the services of other&#xD;
    components through the interfaces those components offer. A component can offer one or more interfaces, and one or more&#xD;
    components can offer the same interface.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    The set of all operation signatures that make up an interface, and all interfaces the component offers, characterizes&#xD;
    the complete set of requests that a component can fulfill. Show a component's offered and used interfaces&#xD;
    diagrammatically using a UML Component Specification Diagram, as shown in Figure 1. This diagram shows a single&#xD;
    component with the interfaces it uses, as well as the ones it offers. Initially, you may just name the interfaces, but&#xD;
    ultimately these interfaces will include all operations and their signatures.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    &lt;img height=&quot;320&quot; alt=&quot;&quot; src=&quot;./resources/component_specification_diagram.jpg&quot; width=&quot;576&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoCaption&quot; style=&quot;MARGIN: 6pt 0in; TEXT-ALIGN: center&quot; align=&quot;center&quot;>&#xD;
    &lt;a id=&quot;_Ref169748547&quot; name=&quot;_Ref169748547&quot;>&lt;strong>Figure&lt;/strong>&lt;/a> &lt;strong>&lt;span     style=&quot;mso-bookmark: _Ref169748547&quot;>&lt;span style=&quot;mso-no-proof: yes&quot;>1&lt;/span>&lt;/span>. Component Specification&#xD;
    Diagram&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Elaborate interfaces in stages. Initially, only describe them in terms of the responsibilities that they have. Later,&#xD;
    refine them to reflect their full signature, using formal notation such as UML, Interface Definition Language (IDL), or&#xD;
    a programming language like Java&amp;trade;.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    The specification of an interface, including its operation signatures, is a key step in fully specifying a component&#xD;
    model. Often, interfaces are not defined to this level of detail. This makes it difficult, if not impossible, to create&#xD;
    components that independent teams can work on. The additional time it takes to fully specify an interface is typically&#xD;
    outweighed by the time saved avoiding rework due to poorly defined components.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Why separate out interfaces from the components themselves?&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            Interfaces enforce the concept of encapsulation, or information hiding, because all access to the component's&#xD;
            information and behavior is through the published interface. An interface is the external view of a component&#xD;
            that emphasizes its abstraction, while hiding its structure and the secrets of its behavior. [BOOCH91].&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            Factoring out interfaces allows more than one component to offer that interface, even though you only define&#xD;
            the interface once. You can subsequently implement the interface in different ways.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Group operations that belong together in order to form a well-designed interface. If a client uses one operation of an&#xD;
    interface, it should use some (or even most) of the other operations, too. Sets of such operations naturally belong&#xD;
    together, and have related effects on the state of the component instance.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    The number of interfaces and operations assigned to interfaces can vary greatly. It may be appropriate to have a single&#xD;
    interface with several operations or multiple interfaces, each with only a single operation. However, avoid interfaces&#xD;
    with too many operations (more than 12 for example), because this may indicate that the component has poor cohesion.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    The notion of a component &lt;i style=&quot;mso-bidi-font-style: normal&quot;>offering&lt;/i> an interface is subtly different from&#xD;
    that of a component &lt;i style=&quot;mso-bidi-font-style: normal&quot;>implementing&lt;/i> an interface. An offered interface is a&#xD;
    logical-level concept that allows for interfaces to have both operations and associations (with data types). An&#xD;
    implemented interface is a physical-level concept that you handle in a later stage of development. Interface&#xD;
    implementation is something that a programming language may or may not support. Java, for example, supports interface&#xD;
    implementation, but interfaces are only allowed to have operations (and constants).&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Given a set of well-structured components and their responsibilities, make these responsibilities available to other&#xD;
    components by defining interfaces. The approach to use depends on the nature of the component, and the layer of the&#xD;
    architecture in which the component resides.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            For components in the 'Business Processing' layer, select interfaces based on the responsibilities assigned&#xD;
            when analyzing functional requirements (see below).&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;a id=&quot;_Ref169759600&quot; name=&quot;_Ref169759600&quot;>For components in the 'Business Service' layer, identify interfaces&#xD;
            from the entities that component instances need to manage.&lt;/a> See &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp-ibm/guidances/guidelines/managing_data_with_components_D0B70DAF.html&quot; guid=&quot;_IFoswDfTEdy5uPLchEwddA&quot;>Guideline: Managing Data With Components&lt;/a>.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            For components in the 'Middleware' and 'System Software' layers, allocate interfaces based on the type of&#xD;
            functionality. Components in these layers typically access data and business rules, or perform communication&#xD;
            functions (such as placing messages on queues). Such interfaces are generally well understood, so derive them&#xD;
            by examining vendor product descriptions.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    When you identified components, you most likely identified &lt;i style=&quot;mso-bidi-font-style: normal&quot;>controller&lt;/i>&#xD;
    components with responsibilities based on the step-by-step flow of functional requirements. Factor out and group these&#xD;
    responsibilities as interfaces by doing the following for each component:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;NumberList&quot; style=&quot;MARGIN: 3pt 0in 3pt 0.25in; mso-list: l2 level1 lfo2&quot;>&#xD;
    &lt;span style=&quot;mso-fareast-font-family: Arial; mso-bidi-font-family: Arial&quot;>&lt;span     style=&quot;mso-list: Ignore&quot;>1.&lt;/span>&lt;/span> &lt;b style=&quot;mso-bidi-font-weight: normal&quot;>Identify external&#xD;
    responsibilities.&lt;/b> Do this by analyzing the dependencies between components. Where one component depends on another&#xD;
    to get information or perform processing, it needs to call or send a message to that component.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;NumberList&quot; style=&quot;MARGIN: 3pt 0in 3pt 0.25in; mso-list: l2 level1 lfo2&quot;>&#xD;
    &lt;span style=&quot;mso-fareast-font-family: Arial; mso-bidi-font-family: Arial&quot;>&lt;span     style=&quot;mso-list: Ignore&quot;>2.&lt;/span>&lt;/span> &lt;b style=&quot;mso-bidi-font-weight: normal&quot;>Group like responsibilities&#xD;
    together.&lt;/b> For example, group all responsibilities for getting or updating data. Group responsibilities for&#xD;
    performing some processing function or executing business rules separately.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;NumberList&quot; style=&quot;MARGIN: 3pt 0in 3pt 0.25in; mso-list: l2 level1 lfo2&quot;>&#xD;
    &lt;span style=&quot;mso-fareast-font-family: Arial; mso-bidi-font-family: Arial&quot;>&lt;span     style=&quot;mso-list: Ignore&quot;>3.&lt;/span>&lt;/span> &lt;b style=&quot;mso-bidi-font-weight: normal&quot;>Name an interface.&lt;/b> The name&#xD;
    should reflect the function of it responsibilities.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Having grouped responsibilities, the next step is to identify the actual callable element that executes the function&#xD;
    implied by the responsibility. This step will also identify the data that needs to flow when the call is made.&#xD;
&lt;/p>&#xD;
&lt;h2 style=&quot;MARGIN: 12pt 0in 6pt&quot;>&#xD;
    &lt;b style=&quot;mso-bidi-font-weight: normal&quot;>&lt;span style=&quot;FONT-SIZE: 12pt&quot;>2. Specify Operations and Signatures&lt;/span>&lt;/b>&#xD;
&lt;/h2>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    For each interface, specify the operations and their signatures (that is, parameters passed and return values).&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;NumberList&quot; style=&quot;MARGIN: 3pt 0in 3pt 0.25in; mso-list: l2 level1 lfo3&quot;>&#xD;
    &lt;span style=&quot;mso-fareast-font-family: Arial; mso-bidi-font-family: Arial&quot;>&lt;span     style=&quot;mso-list: Ignore&quot;>1.&lt;/span>&lt;/span> Look at the collaborations between components in Component Interaction&#xD;
    Diagrams.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;NumberList&quot; style=&quot;MARGIN: 3pt 0in 3pt 0.25in; mso-list: l2 level1 lfo3&quot;>&#xD;
    &lt;span style=&quot;mso-fareast-font-family: Arial; mso-bidi-font-family: Arial&quot;>&lt;span     style=&quot;mso-list: Ignore&quot;>2.&lt;/span>&lt;/span> Make decisions identifying the data needed to provide the required&#xD;
    functionality.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;NumberList&quot; style=&quot;MARGIN: 3pt 0in 3pt 0.25in; mso-list: l2 level1 lfo3&quot;>&#xD;
    &lt;span style=&quot;mso-fareast-font-family: Arial; mso-bidi-font-family: Arial&quot;>&lt;span     style=&quot;mso-list: Ignore&quot;>3.&lt;/span>&lt;/span> Create structured data types as appropriate.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot; style=&quot;mso-ansi-language: EN-GB&quot;>Figure &lt;span style=&quot;mso-no-proof: yes&quot;>2&lt;/span>&lt;/span> shows a&#xD;
    partial Component Interaction Diagram to illustrate these steps.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;277&quot; alt=&quot;&quot; src=&quot;./resources/partial_component_interaction_diagram.jpg&quot; width=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Figure 2. Partial Component Interaction Diagram&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Consider the operation 'listProducts' in the preceding diagram:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        'InventoryProcessSystem' manages multiple categories of products. It needs to be passed a category number so that&#xD;
        it can identify the correct category.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Category numbers can be numbers or letters, and need to be a 'String' type.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A collection of 'Products' needs to be returned, so allocate it to multiple Products type.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The following signature results:&lt;br />&#xD;
    &lt;span     style=&quot;FONT-SIZE: 10pt; FONT-FAMILY: Arial; mso-fareast-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA&quot;>&lt;strong>listProducts&#xD;
    ( [in] category : ProductCategory ) : Product [*]&lt;/strong>&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Repeat this process for each external operation defined for each interface.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Architects often question whether they should specify operations to this level of detail, or let the component designer&#xD;
    specify operation signatures. The risk of leaving the detail to component designers is that they may make decisions&#xD;
    that invalidate the major architectural decisions.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;h2 style=&quot;MARGIN: 12pt 0in 6pt&quot;>&#xD;
    &lt;b style=&quot;mso-bidi-font-weight: normal&quot;>&lt;span style=&quot;FONT-SIZE: 12pt&quot;>3. Specify Pre- and Post-Conditions&lt;/span>&lt;/b>&#xD;
&lt;/h2>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Pre- and post-conditions specify the effect of an operation without prescribing an algorithm or implementation.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            The post-condition specifies the effect of the operation on the component's data or state, provided that the&#xD;
            pre-condition is true.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            The pre-condition is the condition under which the operation guarantees that the post-condition is true.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            If the pre-condition is false when the operation is invoked, the result is unspecified and dealt with by some&#xD;
            form of exception handling.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Pre- and post-conditions are kinds of &lt;i style=&quot;mso-bidi-font-style: normal&quot;>assertions&lt;/i>. An assertion is a Boolean&#xD;
    statement that should never be false, and therefore, will be false only if an error has occurred. Assertions are&#xD;
    usually only checked during build, either automatically during compilation or manually during test. They are not&#xD;
    typically checked during runtime execution. In fact, a program should not assume that an assertion has been checked.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Having a pre-condition makes it explicit what the caller is responsible for checking. Without this explicit statement&#xD;
    of responsibility, there could be too little or too much checking. Too much checking is as bad as too little because it&#xD;
    leads to &quot;program bloat&quot; and makes programs overly complex and difficult to maintain.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    A pre-condition does not stop the operation from executing. This is the meaning of &quot;Design by Contract&quot; [MEYER97]. Some&#xD;
    people use the term pre-condition to describe a situation that needs to be true in order for an operation or process to&#xD;
    be executed. This is better termed a guard condition or the triggering event for execution [DODD05].&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Pre- and post-conditions essentially form a contract between a client and a supplier. As with any good contract, it&#xD;
    entails obligations, as well as benefits, for both parties: with an obligation for one usually turning into a benefit&#xD;
    for the other.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            The pre-condition binds the client: it defines the conditions under which a call to the supplier is legitimate.&#xD;
            It is an obligation for the client and a benefit for the supplier.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            The post-condition binds the supplier: it defines the conditions that must be ensured by the operation on&#xD;
            return. It is a benefit for the client and an obligation for the supplier.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;span     style=&quot;FONT-SIZE: 10pt; FONT-FAMILY: Arial; mso-fareast-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA&quot;>The&#xD;
    benefits are, for the client, the guarantee that certain properties will hold after the call. For the supplier, the&#xD;
    guarantee is that certain assumptions will be satisfied whenever the operation is called. The obligations are, for the&#xD;
    client, to satisfy the requirements as stated by the pre-condition, and for the supplier, to do the job as stated by&#xD;
    the post-condition&lt;/span> (see Figure 3).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;287&quot; alt=&quot;&quot; src=&quot;./resources/pre-_and_post-conditions.jpg&quot; width=&quot;540&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoCaption&quot; style=&quot;MARGIN: 6pt 0in; TEXT-ALIGN: center&quot; align=&quot;center&quot;>&#xD;
    &lt;a id=&quot;_Ref170100135&quot; name=&quot;_Ref170100135&quot;>&lt;strong>Figure&lt;/strong>&lt;/a> &lt;strong>&lt;span     style=&quot;mso-bookmark: _Ref170100135&quot;>&lt;span style=&quot;mso-no-proof: yes&quot;>3&lt;/span>&lt;/span>. Client and supplier obligations&#xD;
    and benefits of pre- and post-conditions&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    A pre-condition violation means that the operation caller, although obligated by the contract to satisfy a certain&#xD;
    requirement, did not. This is a bug in the client itself: the operation is not involved. An outside observer might&#xD;
    criticize the contract as too demanding, but it is too late to argue over the contract. The client did not observe its&#xD;
    part of the deal. If there is a mechanism for monitoring assertions during execution, and it detects such a&#xD;
    pre-condition violation, the operation should not be executed at all. It has stated the conditions under which it can&#xD;
    operate, and these conditions do not hold. Trying to execute it would make no sense.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    A post-condition violation means that the routine, presumably called under correct conditions, was not able to fulfill&#xD;
    its contract. In this case, the bug is in the routine: the caller is innocent.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Assertions such as pre- and post-conditions may or may not affect the run-time system. You can treat them as written&#xD;
    specifications for how the system should behave. You can test them during the various phases of testing. However, you&#xD;
    can also check assertions at runtime, in which case you use some form of exception handling to deal with them.&#xD;
    Assertion checking has an impact on performance.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;span     style=&quot;FONT-SIZE: 10pt; FONT-FAMILY: Arial; mso-fareast-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA&quot;>Pre-&#xD;
    and post-conditions may be expressed either using the formal Object Constraint Language (OCL) [WARMER99], or using&#xD;
    natural language.&lt;/span> Figure 4 shows an example of a pre- and post-condition using natural language.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;331&quot; alt=&quot;&quot; src=&quot;resources/example_of_pre-_and_post-conditions.jpg&quot; width=&quot;600&quot; />&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoCaption&quot; style=&quot;MARGIN: 6pt 0in; TEXT-ALIGN: center&quot; align=&quot;center&quot;>&#xD;
    &lt;a id=&quot;_Ref170100389&quot; name=&quot;_Ref170100389&quot;>&lt;/a>&lt;a id=&quot;_Ref170100347&quot; name=&quot;_Ref170100347&quot;>&lt;span     style=&quot;mso-bookmark: _Ref170100389&quot;>&lt;strong>Figure&lt;/strong>&lt;/span>&lt;/a> &lt;strong>&lt;span     style=&quot;mso-bookmark: _Ref170100347&quot;>&lt;span style=&quot;mso-bookmark: _Ref170100389&quot;>&lt;span     style=&quot;mso-no-proof: yes&quot;>4&lt;/span>&lt;/span>&lt;/span>&lt;span style=&quot;mso-bookmark: _Ref170100389&quot;>. Example of pre- and&#xD;
    post-conditions&lt;/span>&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    In the example above, the operation 'cancelOrder' only guarantees to complete successfully if it receives an existing&#xD;
    order number and the order is active. If these two conditions are true, then 'cancelOrder' will guarantee to cancel the&#xD;
    order.&#xD;
&lt;/p>&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
