<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-9dzn_ZvQJHTU4qbMmf8wFA" name="quality_in_test_plan,_ZXg48HHWEdyzS55ez-koKA" guid="-9dzn_ZvQJHTU4qbMmf8wFA" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;GEQDynamicView&quot; name=&quot;GEQDynamicView&quot;>A Dynamic View of Good Enough&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Let's look more closely at the view of Good Enough Quality (GEQ) that sees quality as a dynamic tradeoff. The concept&#xD;
    goes like this: &lt;i>The quality of any product lies somewhere between terrible and ideal. Terrible quality is much less&#xD;
    expensive to produce than ideal quality (how expensive is a blank disk?), and much less valuable. A product is good&#xD;
    enough when it has enough value without costing too much. Exactly how good that is changes throughout the project,&#xD;
    depending on business conditions and other factors.&lt;/i> &quot;Cost&quot; in this case might mean actual money or something that&#xD;
    substitutes for money, such as time, materials, or staff. &quot;Value&quot; means value in the opinion of &lt;i>someone who&#xD;
    matters&lt;/i>. What one person considers sufficiently valuable, another person may not value at all, so the analysis of&#xD;
    quality always begins with identifying the people who get to decide how good is good.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In a general sense, Tradeoff GEQ is an ancient idea. It's part of basic economics and engineering and, therefore, it's&#xD;
    embedded in the very DNA of any business that involves engineering. What's new about the tradeoff idea is the public&#xD;
    admission that, practically speaking, we don't have a choice about releasing a product that has problems. The product&#xD;
    will have problems, whether or not we know about them. However, if we work at it, we might be able to choose the kind&#xD;
    of problems that we ship with. Let's ship with the right bugs, instead of the wrong ones. In 1996, James Bach created a&#xD;
    heuristic model of good enough tradeoffs, based on his experiences at Borland International and Apple Computer. Bach&#xD;
    developed the model to provide a set of talking points for successfully arguing that a product was not good enough.&#xD;
    Originally, the model was used to persuade management to allow incremental improvements of products prior to release.&#xD;
    However, the model also proved useful to motivate process improvement, and has been used in court cases to attack or&#xD;
    defend the quality of software.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Let's go back to how a manager or CEO might argue, under deadline pressure. &quot;Perfection would be nice, but we have to&#xD;
    be practical. We're running a business. Quality is good, but not quality &lt;i>at any cost&lt;/i>. As you know, all software&#xD;
    has bugs.&quot; A Tradeoff GEQ advocate will agree that practicality is vital to the business and agree that the product&#xD;
    will have problems no matter when it's shipped. But he will also go on to argue (if the situation merits it) that the&#xD;
    manager should not yet think that the product has reached a point where it &lt;i>would&lt;/i> be practical to release. A GEQ&#xD;
    argument is based on specific risks faced or specific benefits missing. It may also be based on a concern that there is&#xD;
    not enough information on which to base a responsible decision about quality. GEQ directs attention to satisfiable&#xD;
    (though not necessarily quantifiable) concerns that encompass economic factors as well as quality factors.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;i>Low&lt;/i> quality might be good enough. &lt;i>High&lt;/i> quality might &lt;i>not&lt;/i> be good enough. In the dynamic view, good&#xD;
    enough is whatever satisfies these four criteria:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        It has sufficient benefits.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It has no critical problems.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The benefits sufficiently outweigh the problems.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        In the present situation, and all things considered, further improvement would be more harmful than helpful.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    Each point is critical. If any one of them is not satisfied, then the product, although perhaps good, cannot be good&#xD;
    enough. The first two seem fairly obvious, but notice that they are not exact opposites of each other. The complete&#xD;
    absence of problems cannot guarantee infinite benefits, nor can infinite benefits guarantee the absence of problems.&#xD;
    Benefits and problems do offset each other, but it's important to consider the product from both perspectives.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The third criterion reminds us that benefits must not merely outweigh problems, they must do so to a sufficient degree.&#xD;
    In a medical device, for instance, we may want a large margin of safety. This criterion also reminds us that even in&#xD;
    the absence of any individual critical problem, there may be patterns of non-critical problems that more than negate&#xD;
    the benefits of the product.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The fourth criterion introduces the important matter of logistics and side effects. If high quality is too expensive to&#xD;
    achieve, or if achieving it would cause other unacceptable problems, then we either have to accept lower quality as&#xD;
    being good enough or we have to accept that a good enough product is impossible.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    These criteria form the basis of a case that a product is or is not good enough, but we can do better.&#xD;
&lt;/p>&lt;!-- &lt;H3>&lt;a name=&quot;GEQAndRUP&quot;>Good Enough Quality and the RUP Lifecycle&lt;/a> &lt;/h3>&#xD;
&lt;p>Good Enough Quality has different focus over the Rational Unified Process Lifecycle.&lt;br>&#xD;
  &lt;br>&#xD;
&lt;/p>&#xD;
--></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
