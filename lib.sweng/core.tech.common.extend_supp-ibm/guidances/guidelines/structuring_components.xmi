<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-HXa8biAGL1-z5E-h0WJeeg" name="new_guideline,_HI8-gIEcEd2z9IawWqZSFw" guid="-HXa8biAGL1-z5E-h0WJeeg" changeDate="2008-09-24T13:33:06.179-0700" version="7.5.0">
  <mainDescription>&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    This guideline explains how to structure your component model to ensure that the components are:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;BulletsL2&quot; style=&quot;MARGIN: 0in 0in 0pt 0.25in; mso-list: l0 level1 lfo3&quot;>&#xD;
    &lt;span style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;span     style=&quot;mso-list: Ignore&quot;>·&lt;/span>&lt;/span> Highly cohesive&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;BulletsL2&quot; style=&quot;MARGIN: 0in 0in 0pt 0.25in; mso-list: l0 level1 lfo3&quot;>&#xD;
    &lt;span style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;span     style=&quot;mso-list: Ignore&quot;>·&lt;/span>&lt;/span> Loosely coupled&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;BulletsL2&quot; style=&quot;MARGIN: 0in 0in 0pt 0.25in; mso-list: l0 level1 lfo3&quot;>&#xD;
    &lt;span style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;span     style=&quot;mso-list: Ignore&quot;>·&lt;/span>&lt;/span> Well isolated&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;BulletsL2&quot; style=&quot;MARGIN: 0in 0in 0pt 0.25in; mso-list: l0 level1 lfo3&quot;>&#xD;
    &lt;span style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;span     style=&quot;mso-list: Ignore&quot;>·&lt;/span>&lt;/span> Of the right granularity&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;BulletsL2&quot; style=&quot;MARGIN: 0in 0in 0pt 0.25in; mso-list: l0 level1 lfo3&quot;>&#xD;
    &lt;span style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;span     style=&quot;mso-list: Ignore&quot;>·&lt;/span>&lt;/span> Layered according to their generality&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Your selection of an &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp-ibm/guidances/concepts/architectural_pattern_7308BF1.html&quot; guid=&quot;_rmX1gIBmEd2z9IawWqZSFw&quot;>architectural pattern&lt;/a> to follow has a strong influence on how you structure your&#xD;
    component model. While this guideline covers how to structure components using the layering technique, layering is only&#xD;
    one of many possible architectural patterns upon which to base your structuring activities.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    By following this guideline, you define a number of well structured, &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp-ibm/guidances/concepts/logical_and_physical_components_93EAAF0D.html&quot; guid=&quot;_3mMfQIDvEd2z9IawWqZSFw&quot;>logical components&lt;/a> and their responsibilities.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    The concept of assigning responsibilities to components was made popular through the CRC&#xD;
    (Classes-Responsibilities-Collaborations) technique [WIRFS-BROCK90]. Responsibilities are defined as:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;BulletsL1&quot; style=&quot;MARGIN: 3pt 0in 3pt 0.25in; mso-list: l2 level1 lfo4&quot;>&#xD;
    &lt;span style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;span     style=&quot;mso-list: Ignore&quot;>·&lt;/span>&lt;/span> The knowledge a component maintains&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;BulletsL1&quot; style=&quot;MARGIN: 3pt 0in 3pt 0.25in; mso-list: l2 level1 lfo4&quot;>&#xD;
    &lt;span style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;span     style=&quot;mso-list: Ignore&quot;>·&lt;/span>&lt;/span> The actions a component performs&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    You may define the components using a modeling tool, or drawings in a word processing document. Figure 1 depicts an&#xD;
    example of a UML Component Relationship Diagram created using this technique. &lt;img height=&quot;399&quot; alt=&quot;&quot;     src=&quot;./resources/structuring_-_component_relationship_diagram.jpg&quot; width=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoCaption&quot; style=&quot;MARGIN: 6pt 0in; TEXT-ALIGN: center&quot; align=&quot;center&quot;>&#xD;
    &lt;a id=&quot;_Ref169751974&quot; name=&quot;_Ref169751974&quot;>&lt;strong>Figure&lt;/strong>&lt;/a>&lt;strong>1. Component Relationship&#xD;
    Diagram&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    To structure your component model, assess the components according to a number of attributes. These attributes help you&#xD;
    asses the overall quality of a component.&#xD;
&lt;/p>&#xD;
&lt;h3 style=&quot;MARGIN: 6pt 0in 0pt&quot;>&#xD;
    &lt;font size=&quot;5&quot;>Cohesion&lt;/font>&#xD;
&lt;/h3>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Cohesion is a measure of how well a component's responsibilities are related to each other. High cohesion (components&#xD;
    with closely related responsibilities) is good, while low cohesion is bad.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    An example of a highly cohesive component might be a 'Dictionary' component that has the responsibilities of checking&#xD;
    spelling and performing a thesaurus function to find alternatives for words. If the 'Dictionary' component also has the&#xD;
    responsibility for performing numeric arithmetic, then it exhibits low cohesion. It would be better for that&#xD;
    responsibility to be dealt with by a different component. The following are seven degrees of cohesion, listed from&#xD;
    highest to lowest:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Functional&lt;/strong>: Operations all contribute to the execution of one and only one problem related&#xD;
            task.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Sequential&lt;/strong>: Operations are involved in activities such that output data from one activity&#xD;
            serves as input data to the next.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Communicational&lt;/strong>: Operations contribute to activities that use the same input, or output data.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Procedural&lt;/strong>: Operations are involved in different, and possibly unrelated activities, which&#xD;
            flows from one activity to the next.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Temporal&lt;/strong>: Operations are involved in activities that are related in time.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Logical&lt;/strong>: Operations contribute to activities of the same general category; the activities to&#xD;
            be executed are selected externally.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Coincidental&lt;/strong>: Operations have no meaningful relationship to each other.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3 style=&quot;MARGIN: 6pt 0in 0pt&quot;>&#xD;
    &lt;font size=&quot;5&quot;>Coupling&lt;/font>&#xD;
&lt;/h3>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Coupling is an indication of the strength of the associations between components. Strongly coupled components have&#xD;
    tightly bound associations, and the components are highly dependent on each other. Weakly coupled components have very&#xD;
    loose (or even non-existent) associations with each other.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Weakly coupled components are better than tightly coupled ones, because it is easier to switch one component for&#xD;
    another, or update a component without affecting others. There are six degrees of coupling, &lt;a id=&quot;OLE_LINK1&quot; name=&quot;OLE_LINK1&quot;>listed following from best to worst&lt;/a>:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Data coupling&lt;/strong>: Communication is via parameters, where each parameter is an elementary piece of&#xD;
            data.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Stamp coupling&lt;/strong>: Communication is via composite data, or data with meaningful internal&#xD;
            structure.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Control coupling&lt;/strong>: Data passed is intended to control the internal logic of the component.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Common coupling&lt;/strong>: Components both refer to the same global data area.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Content coupling&lt;/strong>: One component refers to the inside of another in some way; one component&#xD;
            changes the data inside another.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Hybrid coupling&lt;/strong>: Different meanings are assigned to different parts of a range of data. For&#xD;
            example, a flag is both a data flag and a control flag simultaneously.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3 style=&quot;MARGIN: 6pt 0in 0pt&quot;>&#xD;
    &lt;font size=&quot;5&quot;>Isolation&lt;/font>&#xD;
&lt;/h3>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Isolation is a measure of the degree to which product or technology dependencies are isolated from each other. There&#xD;
    are two extremes of isolation:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Bad isolation&lt;/strong>: Every component has a dependency on the product or technology of other&#xD;
            components. There is little to no use of patterns that encourage isolation techniques.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Good isolation&lt;/strong>: Product and technology dependencies are fully decoupled. There is good use of&#xD;
            patterns that encourage isolation techniques. Examples of such patterns include the Gang of Four &quot;Proxy&quot;,&#xD;
            &quot;Bridge&quot;, and &quot;Mediator&quot; patterns and the GRASP &quot;Indirection&quot; pattern.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Isolation and coupling are closely related. Isolation of products and technologies ensures loose coupling. Layering is&#xD;
    another approach to ensuring good isolation.&#xD;
&lt;/p>&#xD;
&lt;h3 style=&quot;MARGIN: 6pt 0in 0pt&quot;>&#xD;
    &lt;font size=&quot;5&quot;>Granularity&lt;/font>&#xD;
&lt;/h3>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Granularity is a measure of the size, or amount of functionality, assigned to a component. There are five levels of&#xD;
    granularity:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Very fine grained&lt;/strong>: For example, an object-oriented language class useful for assembling&#xD;
            distributed components, but not considered a component in its own right.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Fine grained&lt;/strong>: A software element that can be called at runtime, with a clear interface and a&#xD;
            separation between interface and implementation. Also known as a &lt;i             style=&quot;mso-bidi-font-style: normal&quot;>distributed component&lt;/i>.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Medium grained&lt;/strong>: An autonomous business concept, or business process. Also known as a &lt;i             style=&quot;mso-bidi-font-style: normal&quot;>business component&lt;/i>.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Coarse grained&lt;/strong>: A set of cooperating business components assembled to deliver a solution to a&#xD;
            business problem. Also known as a &lt;i style=&quot;mso-bidi-font-style: normal&quot;>system-level component&lt;/i>.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;strong>Very course grained&lt;/strong>: For example, a federation of system-level components working together to&#xD;
            provide some business value. It helps heterogeneous information systems interoperate.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    You can think of a system-level component as the same as an application. However, one major difference is that a&#xD;
    component-based system is made up of components visible at runtime. The implementation of a component can be changed&#xD;
    without having to change the rest of the system. Making such changes is more difficult with large, monolithic&#xD;
    applications. Different component-based systems (applications) can be assembled without necessarily having to redesign&#xD;
    at the detail level, break code apart, recompile, or re-link the system.&#xD;
&lt;/p>&#xD;
&lt;h3 style=&quot;MARGIN: 6pt 0in 0pt&quot;>&#xD;
    &lt;font size=&quot;5&quot;>Layering&lt;/font>&#xD;
&lt;/h3>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Layering involves:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            Identifying suitable architectural layers within which components can be placed.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            Placing components (and subsystems) into these layers according to their generality and functionality.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            Defining rules for how the layers can interact with each other.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p class=&quot;BulletsL1&quot; style=&quot;MARGIN: 3pt 0in; TEXT-INDENT: 0in; mso-list: none; tab-stops: .5in&quot;>&#xD;
    Bachmann et al [BACHMANN00] offer the following definition of layering. &quot;&lt;i     style=&quot;mso-bidi-font-style: normal&quot;>Layering, like all architectural structures, reflects a division of the software&#xD;
    into units. In this case, the units are layers; each layer represents a virtual machine. A virtual machine is a&#xD;
    collection of software that together provides a cohesive set of services that other software can utilize without&#xD;
    knowing how those services are implemented.&lt;/i> &lt;i style=&quot;mso-bidi-font-style: normal&quot;>...The goal of layering is to&#xD;
    define virtual machines that are small enough to be well understood, but comprehensive enough so that likely changes&#xD;
    will affect only a single layer&quot;.&lt;/i>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Layering is a mechanism for grouping a set of components according to their generality. For example, a system might&#xD;
    have the following layers:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            All components that provide &lt;b style=&quot;mso-bidi-font-weight: normal&quot;>application-independent&lt;/b> business&#xD;
            function. Application-independent business functions are things like customer management and product&#xD;
            management, which apply to many applications.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            All components that provide &lt;b style=&quot;mso-bidi-font-weight: normal&quot;>service functions&lt;/b>, such as error&#xD;
            handling and audit. These components are both business- and application-independent.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            &lt;b style=&quot;mso-bidi-font-weight: normal&quot;>Middleware&lt;/b> components, such as message queuing and relational DBMS&#xD;
            software.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Layering offers the following benefits [BACHMANN00]:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            Layers help to bring quality attributes of modifiability and portability to a system. A change to a lower layer&#xD;
            that does not affect its interface will not require a change to a higher layer. For example, any J2EE compliant&#xD;
            application server that conforms to the J2EE standard may be freely substituted without change to&#xD;
            application-level software. A change to a higher layer that does not affect what it requires from lower layers&#xD;
            will not affect a lower layer. In general, changes to a layered software system that do not affect an interface&#xD;
            are confined to a single layer. Thus, layers define units of reuse and portability.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            Layers are part of the blueprint role that architecture plays for constructing the system. By knowing which&#xD;
            layers contains their software, developers know what services they can rely on in the coding environment.&#xD;
            Layers may define work assignments for development teams.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            Layers are part of the communication role played by architecture. In a large system, the number of dependencies&#xD;
            among modules expands rapidly. Organizing the software into layers with interfaces is an important tool to help&#xD;
            you manage complexity and communicate the structure to developers.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            Layers help with the analysis role played by architecture. They can be used for analyzing the impact of changes&#xD;
            to the design.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Layering can be strict or non-strict. A strict layering scheme means that components can only use components in the&#xD;
    same layer, or layers, immediately below them. A non-strict layering scheme means components can use components in the&#xD;
    same, or any lower layer. As a general rule, components should not use components in upper layers. If components have&#xD;
    dependencies on components in higher layers, then it is difficult to replace the upper layer components without&#xD;
    changing the lower layer components.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    There are many ways of layering software; Figure 2 shows one possible set of layers. You may need fewer or more layers,&#xD;
    depending on the size and complexity of your system. However, avoid schemes with ten or more layers, as they may be&#xD;
    overly complex.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;br class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot; />&#xD;
    &lt;img height=&quot;424&quot; alt=&quot;&quot; src=&quot;./resources/structuring_-_layers.jpg&quot; width=&quot;184&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoCaption&quot; style=&quot;MARGIN: 6pt 0in; TEXT-ALIGN: center&quot; align=&quot;center&quot;>&#xD;
    &lt;a id=&quot;_Ref169752662&quot; name=&quot;_Ref169752662&quot;>&lt;strong>Figure&lt;/strong>&lt;/a> &lt;strong>2. Software layers&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    When defining layers, describe the responsibilities of each layer.  For example, in Figure 2:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            The &lt;strong>DialogueControl&lt;/strong> layer handles user-system interactions and logic.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            The &lt;strong>BusinessProcessing&lt;/strong> layer contains application-specific services that handle functional&#xD;
            requirements logic and choreography.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            The &lt;strong>BusinessServices&lt;/strong> layer contains more general business components that may be used in&#xD;
            several applications.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            The &lt;strong>Middleware&lt;/strong> layer contains components such as interfaces to databases and&#xD;
            platform-independent operating system services.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
            The &lt;strong>SystemSoftware&lt;/strong> layer contains components such as operating systems and databases.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Layers are &lt;i style=&quot;mso-bidi-font-style: normal&quot;>not&lt;/i> the same as tiers.  Tier pictures express allocation to&#xD;
    machines in a distributed environment, data flow among elements, and the presence and utilization of communication&#xD;
    channels.  These diagrams are similar to layer diagrams, but tier diagrams tend to show two-way arrows indicating&#xD;
    bi-directional communication.  Bi-directional communication is discouraged in a layer diagram.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Furthermore, assignment of a component to a tier is defined by the required service level characteristics of the&#xD;
    system.  The main difference between layer diagrams and tier diagrams is that the former has no notion of placement,&#xD;
    while the latter does.  Figure 3 illustrates the differences between layers and tiers.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;br />&#xD;
    &lt;img height=&quot;390&quot; alt=&quot;&quot; src=&quot;./resources/structuring_-_layers_and_tiers.jpg&quot; width=&quot;577&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoCaption&quot; style=&quot;MARGIN: 6pt 0in; TEXT-ALIGN: center&quot; align=&quot;center&quot;>&#xD;
    &lt;a id=&quot;_Ref169618302&quot; name=&quot;_Ref169618302&quot;>&lt;strong>Figure&lt;/strong>&lt;/a> &lt;strong>3. Layers and tiers&lt;/strong>&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
