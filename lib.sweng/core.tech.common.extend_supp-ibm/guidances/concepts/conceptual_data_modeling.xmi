<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-4pwyaUr97Gh1Xok6hsDMtg" name="conceptual_data_modeling,_qsV2cAo-Edygr55FhBZqVw" guid="-4pwyaUr97Gh1Xok6hsDMtg" changeDate="2011-04-28T09:49:13.452-0700" version="1.0.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>&lt;/a>Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Conceptual data modeling represents the initial stage in the development of the design of the persistent data and&#xD;
    persistent data storage for the system.&amp;nbsp;In many cases, the persistent data for the system are managed by a&#xD;
    relational database management system (RDBMS). The business and system entities identified at a conceptual level from&#xD;
    the business models and system requirements will be evolved through the use-case analysis, use-case design, and&#xD;
    database design tasks into detailed physical table designs that will be implemented in the RDBMS.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The data model typically evolves through the following three general stages:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Conceptual&lt;/b>-This stage involves the identification of the high level key business and system entities and&#xD;
        their relationships that define the scope of the problem to be addressed by the system. These key business and&#xD;
        system entities are defined using the modeling elements of the UML profile for business modeling included in the&#xD;
        Business Analysis Model and analysis class model elements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Logical&lt;/b>-This stage involves the refinement of the conceptual high level business and system entities into&#xD;
        more detailed logical entities. These logical entities and their relationships can be optionally defined in a&#xD;
        Logical Data Model as described in Guideline:&amp;nbsp;&lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../core.tech.common.extend_supp-ibm/guidances/guidelines/data_modeling_A146D94C.html&quot;&#xD;
        guid=&quot;_LNZVkAo5Edygr55FhBZqVw&quot;>Data Modeling&lt;/a>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Physical&lt;/b>-This stage involves the transformation of the logical&amp;nbsp; design into detailed and optimized&#xD;
        physical database table designs.&amp;nbsp;The physical stage also includes the mapping of the database table designs to&#xD;
        tablespaces and to the database component in the database storage design.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The tasks related to database design span the entire software development lifecycle.&amp;nbsp; For projects that use&#xD;
    business modeling to describe the business context of the application, database design may start at a conceptual level&#xD;
    with the identification of Business Actors and Business Use Cases in the Business Use-Case Model, and the Business&#xD;
    Workers and Business Entities in the Business Analysis Model.&amp;nbsp; For projects that do not use business modeling, the&#xD;
    database design might start at the conceptual level with the identification of System Actors and System Use Cases in&#xD;
    the Use-Case Model.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The figure below shows the set of Conceptual Data Model elements that reside in the Business Models, Requirements&#xD;
    Models, and the Analysis Model.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img alt=&quot;Conceptual Data Modeling Elements&quot; src=&quot;resources/conceptual_data_modeling_elements.gif&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following sections describe the elements of the Business Models, Use-Case Model, and Analysis Model that can be&#xD;
    used to define the initial Conceptual Data Model for persistent data in the system.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Conceptual Data Model Elements&quot; name=&quot;Conceptual Data Model Elements&quot;>&lt;/a>Conceptual Data Modeling Elements&#xD;
&lt;/h3>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Business Models&quot; name=&quot;Business Models&quot;>&lt;/a>Business Models&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    &lt;b>&lt;u>Business Use-Case Model&lt;/u>&lt;/b>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Business Use-Case Model consists of Business Actors and Business Use Cases.&amp;nbsp;The Business Use Cases represent&#xD;
    key business processes that are used to define the context for the system to be developed.&amp;nbsp;Business Actors&#xD;
    represent key external entities that interact with the business through the Business Use Cases.&amp;nbsp;The figure below&#xD;
    shows a very simple example Business Use-Case Model for an online auction application.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br />&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;109&quot; alt=&quot;Business Use Case Model&quot; src=&quot;resources/business_use_case_model.gif&quot; width=&quot;529&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As entities of significance to the problem of space for the system, Business Actors are candidate entities for the&#xD;
    Conceptual Data Model.&amp;nbsp; In the example above, the Buyer and Seller Business Actors are candidate entities for&#xD;
    which the online auction application must store information.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>&lt;u>Business Analysis Model&lt;/u>&lt;/b>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Business Analysis Model contains classes that model the Business Workers and Business Entities identified from&#xD;
    analysis of the workflow in the Business Use Case. Business Workers represent the participating workers that perform&#xD;
    the actions needed to carry out that workflow.&amp;nbsp; Business Entities are &quot;things&quot; that the Business Workers use or&#xD;
    produce during that workflow.&amp;nbsp;In many cases, the Business Entities represent types of information that the system&#xD;
    must store persistently.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The figure below shows an example sequence diagram that depicts Business Workers and Business Entities from one&#xD;
    scenario of the Business Use Case titled &quot;Provide Online Auction&quot; for managing an auction.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img height=&quot;465&quot; alt=&quot;Sequence Diagram&quot; src=&quot;resources/sequence_diagram_conceptual_dm.gif&quot; width=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In this simplified example, the Auction Manager object represents a Business Worker role that will likely be performed&#xD;
    by the online auction management system itself.&amp;nbsp; The Auction and Auction Item objects are Business Entities that&#xD;
    are used or produced by the Auction Manager worker acting as an agent for the Seller and Buyer Business Actors.&amp;nbsp;&#xD;
    From a database design perspective, the Auction and Auction Item Business Entities are candidate entities for the&#xD;
    Conceptual Data Model.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Requirements and Analysis Models&quot; name=&quot;Requirements and Analysis Models&quot;>&lt;/a>Requirements and Analysis Models&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    For projects that do not perform business modeling, the Requirements (System Use Case) and Analysis Models contain&#xD;
    model elements that can be used to develop an initial Conceptual Data Model.&amp;nbsp; For projects that use business&#xD;
    modeling, the business entities and relationships identified in the Business Analysis Models are refined and detailed&#xD;
    in the Analysis Model as Entity Classes.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;u>&lt;b>System Use-Case Model&lt;/b>&lt;/u>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The System Use-Case Model contains System Actors and System Use Cases that define the primary interactions of the users&#xD;
    with the system. The System Use Cases define the functional requirements for the system.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    From a conceptual data modeling perspective, the System Actors represent entities external to the system for which the&#xD;
    system might need to store persistent information. This is important in cases where the System Actor is an external&#xD;
    system that provides data to and/or receives data from the system under development.&amp;nbsp; System Actors can be derived&#xD;
    from the Business Actors in the Business Use-Case Model and the Business Workers in the Business Analysis Model.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The figure below depicts the Business Use-Case Model for the online auction system.&amp;nbsp;In this model, the Buyer and&#xD;
    Seller Business Actors are now derived from a generic User Business Actor. A new System Actor named Credit Service&#xD;
    Bureau has been added to reflect the need to process payments through an external entity.&amp;nbsp;This new System Actor is&#xD;
    another candidate entity for the Conceptual Data Model.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br />&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img alt=&quot;Business Use Case Model&quot; src=&quot;resources/business_use_case_model2.gif&quot; />&#xD;
&lt;/p></mainDescription>
  <externalId xsi:nil="true"/>
  <keyConsiderations xsi:nil="true"/>
</org.eclipse.epf.uma:ContentDescription>
