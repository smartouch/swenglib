<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-ucHmp4XM7fMxrdqSC49vdw" name="structured_class,_R-ANoC9PEdy0es0uRSWCBA" guid="-ucHmp4XM7fMxrdqSC49vdw" changeDate="2007-08-13T15:41:42.328-0700" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Definition&quot; name=&quot;Definition&quot;>&lt;/a>Definition&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    According to UML,a Class is a subtype of both EncapsulatedClassifier and metaclass Class, which brings to a Class the&#xD;
    capability to have an internal structure and ports. Also, a component is defined by UML as a subtype of Class.&#xD;
    Therefore, within RUP context, we refer to both &lt;strong>components&lt;/strong> and &lt;strong>classes&lt;/strong> as being&#xD;
    structured classes.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Part&quot; name=&quot;Part&quot;>&lt;/a>Part&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    An instance of a structured class contains an object or set of objects corresponding to each part. All such instances&#xD;
    are destroyed when the containing structured class instance is destroyed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The example below shows two possible views of the Car class:&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        In figure (a), &lt;strong>Car&lt;/strong> is shown as having a composition association with role name&#xD;
        &lt;strong>rear&lt;/strong> to a class &lt;strong>Wheel&lt;/strong> and a composition association with role name&#xD;
        &lt;strong>e&lt;/strong> to a class &lt;strong>Engine&lt;/strong>. Any instance of class &lt;strong>Engine&lt;/strong> can be linked&#xD;
        to an arbitrary number of instances of class &lt;strong>Wheel&lt;/strong>.&lt;br />&#xD;
        &lt;br />&#xD;
         In figure (b), the same is specified. However, in addition, in figure (b) it is specified that:&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            &lt;p>&#xD;
                &lt;strong>rear&lt;/strong> and &lt;strong>e&lt;/strong> belong to the internal structure of the class&#xD;
                &lt;strong>Car&lt;/strong>. This allows specification of detail that holds only for instances of the&#xD;
                &lt;strong>Wheel&lt;/strong> and &lt;strong>Engine&lt;/strong> classes within the context of the class&#xD;
                &lt;strong>Car&lt;/strong>, but which does not hold for &lt;strong>wheels&lt;/strong> and &lt;strong>engines&lt;/strong> in&#xD;
                general.&#xD;
            &lt;/p>&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;p>&#xD;
                within the context of class &lt;strong>Car&lt;/strong>, the instance playing the role of &lt;strong>e&lt;/strong> may&#xD;
                only be connected to two instances playing the role of &lt;strong>rear&lt;/strong>. In addition, the instances&#xD;
                playing the &lt;strong>e&lt;/strong> and &lt;strong>rear&lt;/strong> roles may only be linked if they are roles of the&#xD;
                same instance of class &lt;strong>Car&lt;/strong>.&#xD;
            &lt;/p>&#xD;
        &lt;/li>&#xD;
        &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
            In other words, additional constraints apply on the instances of the classes &lt;strong>Wheel&lt;/strong> and&#xD;
            &lt;strong>Engine&lt;/strong>, when they are playing the respective roles within an instance of class&#xD;
            &lt;strong>Car&lt;/strong>. These constraints are not true for instances of &lt;strong>Wheel&lt;/strong> and&#xD;
            &lt;strong>Engine&lt;/strong> in general. Other &lt;strong>wheels&lt;/strong> and &lt;strong>engines&lt;/strong> may be&#xD;
            arbitrarily linked as specified in the figure (a).&lt;br />&#xD;
            &lt;br />&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/blockquote>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img height=&quot;246&quot; alt=&quot;Car Class&quot; src=&quot;./resources/car_class.jpg&quot; width=&quot;592&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Example: Parts playing their roles inside a structured class&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Connector&quot; name=&quot;Connector&quot;>&lt;/a>Connector&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    A connector is an instance of relationship between two parts in a structured class. It is a link to allow&#xD;
    communication. Connectors may be implemented by ordinary associations or by transient relationships, such as procedure&#xD;
    parameters, variables, global values, or other mechanisms.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The internal &quot;wiring&quot; of a structured class is specified with assembly connectors and delegation connectors:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Within the implementation of a structured class, &lt;strong>assembly connectors&lt;/strong> connect ports of different&#xD;
        parts. A message sent on a port of one structured class is received on a connected port of another structured&#xD;
        class. A set of parts may be wired together through their ports. A part need not know anything about other parts,&#xD;
        except that they exist and satisfy the constraints on connected ports. Communication among structured classes is&#xD;
        modeled by their ports.&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;br />&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A &lt;strong>delegation connector&lt;/strong> connects an external port of a structured class with a port on one of its&#xD;
        internal parts. A message received by the external port is passed to the port on the internal part; a message sent&#xD;
        by the internal port is passed to the external port and then to the structured class connected to it.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Port&quot; name=&quot;Port&quot;>&lt;/a>Port&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A port is a structural feature of a structured class. Encapsulation can be increased by forcing communications from&#xD;
    outside the structured class to pass through ports obeying declared interfaces, which brings additional precision in&#xD;
    specification and interconnection for that structured class.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The required and provided interfaces of a port specify everything that is necessary for interactions through that&#xD;
    interaction point. If all interactions of a structured class with its environment are achieved through ports, then the&#xD;
    internals of the structured class are fully isolated from the environment. This allows such a structured class to be&#xD;
    used in any context that satisfies the constraints specified by its ports.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There is no assumption about how a port is implemented. It might be implemented as an explicit object, or it might be&#xD;
    merely a virtual concept that does not explicitly appear in the implementation.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Examples of ports are provided below:&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Example 1&#xD;
&lt;/h5>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img height=&quot;226&quot; alt=&quot;Ports&quot; src=&quot;./resources/ports.jpg&quot; width=&quot;548&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Port of an Engine being used by a Car and a Boat&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The figure above shows a class &lt;strong>Engine&lt;/strong> with a port &lt;strong>p&lt;/strong> and two interfaces:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A provided interface &lt;strong>powertrain&lt;/strong>, which specifies the services that the engine offers at this port&#xD;
        (i.e., the operations and receptions that are accessible by communication arriving at this port).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A required interface &lt;strong>power&lt;/strong>, which specifies the services that the engine expects its environment&#xD;
        to provide.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    At port &lt;strong>p&lt;/strong>, the &lt;strong>Engine&lt;/strong> class is completely encapsulated; it can be specified without&#xD;
    any knowledge of the environment the engine will be embedded in. As long as the environment obeys the constraints&#xD;
    expressed by the provided and required interfaces of the engine, the engine will function properly.&lt;br />&#xD;
    &lt;br />&#xD;
     To illustrate that, two uses of the &lt;strong>Engine&lt;/strong> class are shown in this example:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The &lt;strong>Car&lt;/strong> class connects port &lt;strong>p&lt;/strong> of the engine to a set of wheels by means of the&#xD;
        &lt;strong>axle&lt;/strong>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;strong>Boat&lt;/strong> class connects port &lt;strong>p&lt;/strong> of the engine to a propeller by means of the&#xD;
        &lt;strong>shaft&lt;/strong>.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    As long as the interaction between the &lt;strong>Engine&lt;/strong> and the part linked to its port &lt;strong>p&lt;/strong> obeys&#xD;
    the constraints specified by the provided and required interfaces, the engine will function as specified, whether it is&#xD;
    an engine of a car or an engine of a boat.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Furthermore, even if &lt;strong>Engine&lt;/strong> had other declared ports, such as a port &lt;strong>f&lt;/strong> for&#xD;
    &lt;strong>Fuel Consumption&lt;/strong>, the wheels of a car and the propeller of a boat would still access the&#xD;
    &lt;strong>Engine&lt;/strong> through port &lt;strong>p&lt;/strong>. Port &lt;strong>f&lt;/strong> would be of interest of a fuel meter,&#xD;
    regardless of what kind of fuel is being used and what kind of fuel meter cars and boats might have.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Example 2&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    This example of ports is based on Java Logging API, which is a package that provides the following classes and&#xD;
    interfaces of the Java 2 platform's core logging facilities, among others:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;strong>Logger&lt;/strong> is the main entity on which applications make logging calls. It is used to log messages for&#xD;
        a specific system or application component&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;strong>Level&lt;/strong> gives a guide to the importance and urgency of a log message&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;strong>Filter&lt;/strong> provides fine grain control of what is logged, beyond the control provided by the log&#xD;
        levels&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;strong>Handler&lt;/strong> takes messages from a Logger and exports them to different destinations (memory, output&#xD;
        streams, consoles, files and sockets)&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;strong>Formatter&lt;/strong> provides support for formatting log records&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Those classes and interfaces are involved in two important kinds of collaborations. Some classes and interfaces are&#xD;
    used to write to the log while others are used to administrate the log. The figure below shows two different&#xD;
    collaborations that clients and administrators have with the log, modeled as UML collaborations:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;strong>Writing&lt;/strong> collaboration, where the &lt;strong>LogClient&lt;/strong> role connects to the&#xD;
        &lt;strong>LogWriter&lt;/strong> role in order to write to the log.&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;strong>Administration&lt;/strong> collaboration, where the &lt;strong>LogAdministrator&lt;/strong> role connects to the&#xD;
        &lt;strong>LogController&lt;/strong> role in order to access the log and change log settings.&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img height=&quot;92&quot; alt=&quot;Collaborations&quot; src=&quot;./resources/collaborations.gif&quot; width=&quot;592&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Different collaborations that clients and administrators have with the log&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    One possible UML 2.0 representation to model the logging services and its collaborations would be using a component&#xD;
    with ports and declared interfaces, as shown in the figure below:&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img height=&quot;165&quot; alt=&quot;Ports&quot; src=&quot;./resources/ports1.gif&quot; width=&quot;533&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Java Logging API package being implemented as a component with provided interfaces grouped into ports&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the Java Logging API specification, some of the logging services were implemented as classes and others as&#xD;
    interfaces. In this example, we model each of those services as provided interfaces, which could be realized by parts&#xD;
    inside the component. The two different kinds of behavior related to &lt;strong>Writing&lt;/strong> and&#xD;
    &lt;strong>Administration&lt;/strong> collaborations mentioned above could be represented by interfaces logically grouped&#xD;
    into ports. Therefore, we have:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;strong>Logger&lt;/strong> and &lt;strong>Level&lt;/strong> interfaces grouped into &lt;strong>LogWriter&lt;/strong> port. Those&#xD;
        interfaces are accessed by log clients to write to the log&lt;strong>.&lt;/strong>&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;strong>Handler&lt;/strong>, &lt;strong>Filter&lt;/strong> and &lt;strong>Formatter&lt;/strong> interfaces grouped into&#xD;
        &lt;strong>LogController&lt;/strong> port. Those interfaces are accessed by log administrators to access the log and&#xD;
        change log settings.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    This modeling alternative brings a separation of concerns, by logically grouping interfaces into different ports. We&#xD;
    have additional precision for the component specification and the interconnection it can have with the external world.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Modeling&quot; name=&quot;Modeling&quot;>&lt;/a>Modeling&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    During design, classes and components may be decomposed into collections of connected parts that may be further&#xD;
    decomposed in turn.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A &lt;strong>composite structure diagram&lt;/strong> can be used to show the decomposition of a structured class. As an&#xD;
    example, the figure below shows a composite structure diagram for the box office in the ticketing system. This class is&#xD;
    decomposed into three parts:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A ticket seller interface&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A performance guide that retrieves performances according to date and other criteria&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A set of databases that contain the data on the performances and the tickets.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Each part interacts through a well-defined interface specified by its ports. The entire box office interacts with the&#xD;
    outside through a port. Messages on this port are dispatched to the ticket seller class, but the internal structure of&#xD;
    the box office class is hidden from outside clients.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img height=&quot;305&quot; alt=&quot;Structured Class&quot; src=&quot;./resources/structured_class.gif&quot; width=&quot;352&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Example: Composite structure diagram for a ticketing system.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
