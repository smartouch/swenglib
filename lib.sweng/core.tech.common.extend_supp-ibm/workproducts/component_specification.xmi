<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ArtifactDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-sCE6aOu4GhvXwG7xZIYXtw" name="component_specification,_ObP9oDDFEdyz_pzDMsV8FQ" guid="-sCE6aOu4GhvXwG7xZIYXtw" changeDate="2008-09-16T10:49:59.338-0700" version="7.1.0">
  <mainDescription>&lt;p>&#xD;
    This artifact specifies the details of a component identified in the Component Model. The specification shows the&#xD;
    interfaces offered and used by the component, identifies where business rules are placed, and details the operations&#xD;
    and their signatures for each interface.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Component Interfaces&lt;/strong> - An interface specifies one or more operation signatures and is both offered and&#xD;
    used by a component. Offering an interface means the component makes the interface available for other components to&#xD;
    use.&amp;nbsp;&amp;nbsp;Each interface provides a unique and well-defined set of operations. Hiding the structure of a&#xD;
    component and its data behind an interface allows that data to be changed without affecting how the interface is&#xD;
    used.&amp;nbsp; The actual composition of that data may change, but the interface that provides access to that data is&#xD;
    fixed. Interfaces also describe the state of a component.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Business Rules&lt;/strong> - Business Rules dictate the behavior of a system, and the component specification&#xD;
    defines how the system implements the business rules.&amp;nbsp; For example, a business rule may state that Internet&#xD;
    transactions for an on-line order can not exceed $1000 for a given account. A component that manages account&#xD;
    transactions may define an on-line transactions interface that implements this business rule.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Operations&lt;/strong> - Fully specified Component Specifications assign operations and operation signatures to&#xD;
    the interfaces and may define pre- and post-conditions on the operations.&amp;nbsp; Pre- and post-conditions specify the&#xD;
    effect of an operation without prescribing an algorithm or implementation.&amp;nbsp;A post-condition specifies the effect&#xD;
    of the operation on the components data or state.&amp;nbsp;A pre-condition is the condition under which the operation&#xD;
    guarantees that the post-condition is true.&#xD;
&lt;/p></mainDescription>
  <keyConsiderations>&lt;p>&#xD;
    Points to consider when deciding whether to use a Component Specification:&lt;br />&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The Component Specification provides value when the architecture is complex, such that new team members need a&#xD;
        simplified, abstracted model to understand it.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The extra work required to ensure that the Component Specification and Executable Architecture remain consistent&#xD;
        must be balanced against the benefit of having a view of the system that represents only the most important details&#xD;
        of how the system works. It can be very costly to maintain a high degree of fidelity between the Component&#xD;
        Specification and Executable Architecture. As the complexity of the Component Specification increases, so does the&#xD;
        cost to maintain it.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Once you no longer maintain the Component Specification, its value decays rapidly. At some point, it will no longer&#xD;
        accurately reflect the Executable Architecture. Deciding to no longer maintain the Component Specification may be&#xD;
        appropriate (it may have served its purpose), but the decision should be a conscious one.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Component Specifications tend to be useful in companies where systems live for decades, or where there are many&#xD;
    variants of the system.&lt;br />&#xD;
&lt;/p></keyConsiderations>
  <purpose>&lt;p>&#xD;
    The Component Specification details the responsibilities and key characteristics for individual components. These&#xD;
    details allow developers to create an executable architecture to validate the architectural approach.&#xD;
&lt;/p></purpose>
  <impactOfNotHaving>&lt;p>&#xD;
    The absence of this work product may result in:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Brittle architecture with components that may not be reused, maintained, or replaced without impacting the overall&#xD;
        system&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ambiguous and incomplete component definitions requiring developers to clarify the scope and interoperability of&#xD;
        components&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Inability to select appropriate implementation technologies or 3rd party packages to implement component&#xD;
        responsibilities&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Difficulty creating an executable architecture to validate the architectural approach&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul></impactOfNotHaving>
  <reasonsForNotNeeding>&lt;p>&#xD;
    A Component Specification may not be necessary when:&lt;br />&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The overall system is quite small and the division of functional responsibility between components is clearly&#xD;
        understood&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &amp;nbsp;The structure of the overall system can be adequately described in some other form&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The environment for the system is trivial and does not require detailed considerations of how applications and data&#xD;
        are organized&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul></reasonsForNotNeeding>
  <briefOutline>&lt;p>&#xD;
    The Component Specification defines the following information for each component:&lt;br />&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Name&lt;/strong> - uniquely identifies the component and its primary function&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Description&lt;/strong> -outlines the primary function of the component and how it is positioned within the&#xD;
        overall architecture&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Responsibilities&lt;/strong> -lists responsibilities allocated to the component, stated in natural language&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Required service levels&lt;/strong> - for non-functional requirements, lists all the service levels that the&#xD;
        component must support (such as must be available during office hours)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Reasonableness &amp;amp; risk&lt;/strong> - identifies the risks associated with this component, together with a&#xD;
        mitigation strategy if the risk is high&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Design rationale&lt;/strong> - details any design decisions that influence how the component should be&#xD;
        implemented&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Implementation approach&lt;/strong> - details how the component should be implemented and the technology used&#xD;
        to implement it&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Component Interfaces&lt;/strong> - lists and visually models the interfaces offered and used by a component&#xD;
    &lt;/li>&#xD;
&lt;/ul></briefOutline>
  <representationOptions>&lt;h4 style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    Notation&#xD;
&lt;/h4>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    The Component Specification consists of both a textual definition and visual model of a component's responsibilities,&#xD;
    characteristics, and interfaces.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    The textual definition includes the following information:&lt;br />&#xD;
&lt;/p>&#xD;
&lt;table bordercolor=&quot;#000000&quot; cellspacing=&quot;1&quot; cellpadding=&quot;1&quot; border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr bgcolor=&quot;#CCCCCC&quot;>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;149&quot;>&#xD;
                &lt;p>&#xD;
                    &lt;strong>Property&lt;/strong>&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;277&quot;>&#xD;
                &lt;p>&#xD;
                    &lt;strong>Description&lt;/strong>&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;213&quot;>&#xD;
                &lt;p>&#xD;
                    &lt;strong>UML Representation&lt;/strong>&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;149&quot;>&#xD;
                &lt;p>&#xD;
                    Name&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;277&quot;>&#xD;
                &lt;p>&#xD;
                    The name of the Component&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;213&quot;>&#xD;
                &lt;p>&#xD;
                    The attribute &quot;Name&quot; on model element.&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;149&quot;>&#xD;
                &lt;p>&#xD;
                    Description&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;277&quot;>&#xD;
                &lt;p>&#xD;
                    Brief description of the component&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;213&quot;>&#xD;
                &lt;p>&#xD;
                    Tagged value, of type &quot;short text&quot;.&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;149&quot;>&#xD;
                &lt;p>&#xD;
                    Responsibilities&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;277&quot;>&#xD;
                &lt;p>&#xD;
                    List of component responsibilities&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;213&quot;>&#xD;
                &lt;p>&#xD;
                    A (predefined) tagged value on the superclass &quot;Type&quot;.&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;149&quot;>&#xD;
                &lt;p>&#xD;
                    Required Service Levels (Non-Functional Requirements)&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;277&quot;>&#xD;
                &lt;p>&#xD;
                    List of Service Levels supported by the Component&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;213&quot;>&#xD;
                &lt;p>&#xD;
                    Tagged value, of type &quot;short text&quot;.&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;149&quot;>&#xD;
                &lt;p>&#xD;
                    Reasonableness &amp;amp; Risk&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;277&quot;>&#xD;
                &lt;p>&#xD;
                    Statement(s) about the risks associated with the design of the component&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;213&quot;>&#xD;
                &lt;p>&#xD;
                    Tagged value, of type &quot;short text&quot;.&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;149&quot;>&#xD;
                &lt;p>&#xD;
                    Design Rationale&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;277&quot;>&#xD;
                &lt;p>&#xD;
                    Component design decisions&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;213&quot;>&#xD;
                &lt;p>&#xD;
                    Tagged value, of type &quot;short text&quot;.&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;149&quot;>&#xD;
                &lt;p>&#xD;
                    Implementation Approach&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;277&quot;>&#xD;
                &lt;p>&#xD;
                    Implementation guidance and instructions&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;213&quot;>&#xD;
                &lt;p>&#xD;
                    Tagged value, of type &quot;short text&quot;.&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;149&quot;>&#xD;
                &lt;p>&#xD;
                    Diagrams&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;277&quot;>&#xD;
                &lt;p>&#xD;
                    Diagrams (detailed below) local to the component that complete its specification.&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;213&quot;>&#xD;
                &lt;p>&#xD;
                    Owned by an enclosing package, via the aggregation &quot;owns&quot;.&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&#xD;
&lt;p>&#xD;
    The visual model consists of three UML diagrams:&lt;br />&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Component Specification Diagram&lt;/strong> - shows the interfaces offered and used by a component&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Interface Responsibility Diagram&lt;/strong> - depicts the data managed by each interface; shows dependencies&#xD;
        between data and interfaces&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Interface Specification Diagram&lt;/strong> - shows the information types managed by interfaces; shows how&#xD;
        interfaces manage a component's state&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;320&quot; alt=&quot;Component Specification Diagram&quot; src=&quot;./resources/component_specification_diagram.gif&quot;     width=&quot;576&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0pt; TEXT-ALIGN: center&quot; align=&quot;center&quot;>&#xD;
    &lt;b style=&quot;mso-bidi-font-weight: normal&quot;>Component Specification Diagram&lt;/b>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A component specification diagram shows a single component with the interfaces it uses as well as the ones it&#xD;
    offers.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>&lt;img height=&quot;353&quot; alt=&quot;Interface Responsibility Diagram&quot; src=&quot;./resources/interface_responsibility_diagram.gif&quot;     width=&quot;600&quot; />&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Interface Responsibility Diagram&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An Interface Responsibility Diagram the information managed each interface and brings dependencies to the surface. It&#xD;
    shows an association between interfaces and entities from the logical data model (LDM). It does not show information or&#xD;
    state that the components manage through the interfaces.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;200&quot; alt=&quot;Interface Specification Diagram&quot; src=&quot;./resources/interface_specification_diagram.gif&quot;     width=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Interface Specification Diagram&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An Interface Specification Diagram depicts the information model of an interface. It shows all of the information types&#xD;
    that are needed by the interface. These types correspond to dynamic or &quot;in-flight&quot; data. They are not the same as&#xD;
    persistent data, but they usually map to the underlying entities of the logical data model from which they are derived.&#xD;
&lt;/p></representationOptions>
</org.eclipse.epf.uma:ArtifactDescription>
