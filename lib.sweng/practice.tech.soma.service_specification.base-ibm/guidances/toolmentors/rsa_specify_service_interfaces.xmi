<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="--eKXycmL4bazEoHjYJPlGQ" name="rsa_specify_service_interfaces,_1BF1cJqHEd6QY_56pVRTLw" guid="--eKXycmL4bazEoHjYJPlGQ" changeDate="2009-10-28T22:36:11.718-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;strong>&lt;font size=&quot;4&quot;>Overview&lt;/font>&lt;/strong>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Service specifications, which are modeled using SoaML &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_interface_soaml_CA95983A.html&quot; guid=&quot;_N5e2oFbBEd6MCpkuB85p5g&quot;>ServiceInterfaces&lt;/a>, are the central structural concept of the &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_model_FC39652E.html&quot; guid=&quot;_T-AiUEozEd6D_7XK49c0nw&quot;>service model&lt;/a>. We do the following in this tool mentor:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Review%20Model%20Structure&quot;>Review Model Structure&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Identify%20and%20Create%20Provided%20and%20Required%20Interfaces&quot;>Identify and Create Provided and&#xD;
        Required Interfaces&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Describe%20the%20Services%20Data%20Model&quot;>Describe the Services Data Model&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Complete%20Service%20Operation%20Signatures&quot;>Complete Service Operation Signatures&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Specify%20Service%20Protocols&quot;>Specify Service Protocols&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Model element creation techniques are described in &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/toolmentors/rsa_create_soaml_model_elements_BD37AE8F.html&quot; guid=&quot;_E-Ow8JpvEd6o74-wQ-l20w&quot;>Tool Mentor: Create SoaML Model Elements&lt;/a>. Those instructions are not repeated here.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The instructions in this tool mentor apply to Rational Software Architect for WebSphere Software, Version 7.5.4 and&#xD;
    later.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Review Model Structure&quot; name=&quot;Review Model Structure&quot;>Review the model structure&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The following diagram illustrates the portions of the&amp;nbsp;service model structure that are used in this tool mentor.&#xD;
    Notable aspects include:&#xD;
&lt;/p>&#xD;
&lt;ul dir=&quot;ltr&quot;>&#xD;
    &lt;li>&#xD;
        Service Collaborations provide significant input into&amp;nbsp;ServiceInterface specification.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;ul dir=&quot;ltr&quot;>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_contract_soaml_E57B30D4.html&quot; guid=&quot;_IhtgsFbBEd6MCpkuB85p5g&quot;>Service Contracts&lt;/a> can be created to document the behavioral protocols to which&#xD;
        service consumers and providers must conform when a service is being used.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;ul dir=&quot;ltr&quot;>&#xD;
    &lt;li>&#xD;
        Specifications for collaborative services -- those which interact with consumers using more that a simple&#xD;
        request-response protocol -- can be involved. These specifications commonly include: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                &lt;div>&#xD;
                    Protocols, which either are owned&amp;nbsp;directly by the ServiceInterface or are defined using&#xD;
                    ServiceContracts&#xD;
                &lt;/div>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;div>&#xD;
                    Provided and required interfaces&#xD;
                &lt;/div>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;div>&#xD;
                    Overview and structure diagrams to help describe the ServiceInterface&#xD;
                &lt;/div>&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The data content of the service operations is expressed in terms of enums, &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/termdefinitions/parameter_type_8B026E69.html&quot; guid=&quot;_vZhEkJf4Ed6l6vBsNJSPDA&quot;>parameter types&lt;/a>, and &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/termdefinitions/message_F04CD4DA.html&quot; guid=&quot;_-1aDcJf7Ed6l6vBsNJSPDA&quot;>messages&lt;/a>. These can be derived from &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/termdefinitions/information_type_4B464FEE.html&quot; guid=&quot;_eKae0Jf5Ed6l6vBsNJSPDA&quot;>information types&lt;/a>, which represent information stores which are maintained&#xD;
        within service providers, or from domain types. The service data model elements can be&amp;nbsp;shared elements (as is&#xD;
        done here) or&amp;nbsp;elements which are private to each service provider. &amp;nbsp;See&amp;nbsp;&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/supportingmaterials/pattern_09_keep_service_operation_signatures_meaningful_86B5D7AA.html&quot; guid=&quot;_BWHC4H8UEd6EC8v3b_fCaQ&quot;>Pattern 9&lt;/a>, &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/supportingmaterials/pattern_10_keep_architectural_elements_decoupled_8CE90429.html&quot; guid=&quot;_X-WbEH8UEd6EC8v3b_fCaQ&quot;>Pattern 10&lt;/a>, and &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/supportingmaterials/pattern_11_use_shared_messages_and_parameter_types_CF59F600.html&quot; guid=&quot;_nfEW8H8UEd6EC8v3b_fCaQ&quot;>Pattern 11&lt;/a> for&amp;nbsp;considerations regarding&amp;nbsp;service operation signatures&#xD;
        and the service data model. &amp;nbsp;&amp;nbsp;&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&amp;nbsp;&lt;img height=&quot;598&quot; alt=&quot;&quot; src=&quot;resources/service_spec_model_structure.jpg&quot; width=&quot;480&quot; />&lt;br />&#xD;
&lt;br />&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Identify and Create Provided and Required Interfaces&quot; name=&quot;Identify and Create Provided and Required Interfaces&quot;>Identify and create provided and required interfaces&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Review each &quot;simple&quot; ServiceInterface to ensure that it should be simply a stereotyped UML Interface. Examine each&#xD;
    &quot;collaborating&quot; ServiceInterface to identify its provided and required interfaces.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For each ServiceInterface in the &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/examples/soaml_design_model_sample_83612289.html&quot; guid=&quot;_AfQisHNIEd6va-EJWoOsvg&quot;>implementation package structure&lt;/a>, do the following:&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;font size=&quot;3&quot;>A. Confirm appropriate ServiceInterface type -- &quot;Simple&quot; or &quot;Collaborating&quot;&lt;/font>&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Select the ServiceInterface in Project Explorer. Right-click and select &lt;strong>Modeling References &amp;gt; Enclosing&#xD;
        Model&lt;/strong>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        In the list of search results, identify each property and each role. If the instructions defined in &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../practice.tech.soma.service_specification.base-ibm/guidances/toolmentors/rsa_analyze_service_collaborations_9386A599.html&quot; guid=&quot;_K9IWUJqFEd6QY_56pVRTLw&quot;>Tool Mentor: Analyze Service Collaborations&lt;/a>&amp;nbsp;were followed, these represent&#xD;
        instances of the ServiceInterface which were used in Service Collaborations. &amp;nbsp;Navigate in turn to each&#xD;
        property and role in Project Explorer.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Examine the Activities and Interactions in which the property and role appeared. Use the rules provided in &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../practice.tech.soma.service_specification.base-ibm/guidances/guidelines/identify_service_interfaces_from_role_interaction_patterns_A80FD7EE.html&quot; guid=&quot;_cBOmEJaLEd6mO_N3erykYQ&quot;>Guideline: Identify Service Interfaces from Collaboration Role Interaction Patterns&lt;/a>&amp;nbsp;and its five associated examples to identify whether the ServiceInterface is&amp;nbsp;a &quot;simple&quot;&#xD;
        ServiceInterface, with a single provided (realized)&amp;nbsp;interface, or whether it is a collaborating&#xD;
        ServiceInterface with&amp;nbsp;a provided interface and one or more required (used)&amp;nbsp;interfaces. If necessary,&#xD;
        create a new&amp;nbsp;ServiceInterface with the correct metaclass&amp;nbsp;and fix up the model so that the new&#xD;
        ServiceInterface is referenced wherever the old ServiceInterface was referenced. Then, delete the old&#xD;
        ServiceInterface.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h4>&#xD;
    &lt;font size=&quot;3&quot;>B. Create UML interfaces&lt;/font>&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        For each collaborating ServiceInterface,&amp;nbsp;begin by creating a single provided (realized) UML Interface and a&#xD;
        single required (used) UML Interface. &amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Create appropriate relationships (realization and&amp;nbsp;uses)&amp;nbsp;between the ServiceInterface and its interfaces.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Begin to build the Service Spec diagram, located under the ServiceInterface's package, so that it contains the&#xD;
        ServiceInterface, its interfaces, and their relationships.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h4>&#xD;
    &lt;font size=&quot;3&quot;>C. Add operations to interfaces&lt;/font>&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Revisit the Service Collaborations and identify each operation that needs to be allocated to a provided interface&#xD;
        and each operation that needs to be allocated to a required operation. Briefly: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Activity diagram Call Operation actions and messages that are received on sequence diagrams map to&#xD;
                operations on provided interfaces.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Activity diagram Accept Event or Accept Call actions and callBack messages on sequence diagrams map to&#xD;
                operations on required interfaces.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Create the appropriate operations on the provided and/or required interfaces for each ServiceInterface.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    &lt;font size=&quot;3&quot;>D. Refactor the interfaces and ServiceInterfaces&amp;nbsp;if necessary&lt;/font>&#xD;
&lt;/h3>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        After all the operations have been allocated to the provided and required interfaces, check to ensure that the&#xD;
        assigned operations are cohesive. &amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If the operations on a provided interface&amp;nbsp;span a greater range of functionality than one service could be&#xD;
        expected to support, refactor the provided interface into multiple interfaces, each of which offers a cohesive&#xD;
        subset of the original operations.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Create additional ServiceInterfaces, enough to support the total number of provided interfaces. Have each&#xD;
        ServiceInterface realize one of the refactored interfaces. &amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Revisit the service collaborations to determine which of the callBack operations supports each of the new&#xD;
        ServiceInterfaces. &amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Assign those operations to interfaces that are used by the appropriate ServiceInterface.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If the operations on a required interface aren't cohesive, refactor the interface into multiple interfaces and&#xD;
        distribute the initial set of operations to the new interfaces, such that each allocated set is now cohesive.&#xD;
        &amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Create a &lt;font face=&quot;Courier New, Courier, mono&quot;>&amp;lt;&amp;lt;usage&amp;gt;&amp;gt;&lt;/font> dependency from the original&#xD;
        ServiceInterface to each of the new required interfaces.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Describe the Services Data Model&quot; name=&quot;Describe the Services Data Model&quot;>Describe the services data model&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Based upon considerations presented in Patterns 10 and 11, determine whether you will use shared or private enums,&#xD;
    parameter types, and messages to define the data types that are used to pass information between services. &amp;nbsp; If&#xD;
    you will be using private data types, postpone the description of the services data model until you have created the&#xD;
    SoaML Participants which will provision the services. After you do that, revisit this step and the one that immediately&#xD;
    follows.&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Assuming that shared service data types are to be used, create a package structure, within the implementation&#xD;
        packages,&amp;nbsp;which will contain the shared elements. Use the &quot;common&quot; building block in the &lt;font face=&quot;Courier New, Courier, mono&quot;>&amp;lt;&amp;lt;modelLibrary&amp;gt;&amp;gt;&lt;/font> to create this package structure.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Create the services data model in line with the discussion on pages 368 - 375 of IBM &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/whitepapers/building_soa_solutions_redbook_BB469CB2.html&quot; guid=&quot;_e3mR4FIREd6lNtylJFsPIg&quot;>Redbook: Building SOA Solutions Using the Rational SDP&lt;/a>. Keep these guidelines in&#xD;
        mind: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Model domain types using UML DataTypes or classes, and then use &quot;domainType&quot; as the key word.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Derive information types from domain types. Model these using UML DataTypes or classes,&#xD;
                with&amp;nbsp;&quot;InfoType&quot; as the key word.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Derive parameter types from PrimitiveTypes, domain types, InfoTypes, or other parameter types. Model these&#xD;
                using UML DataTypes&amp;nbsp;with &quot;ParamType&quot; as the key word.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Build messages from PrimitiveTypes,&amp;nbsp;domainTypes,&amp;nbsp;ParamTypes, and other messages. Model messages by using&#xD;
        SoaML &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/message_type_soaml_41C1C53D.html&quot; guid=&quot;_Yy9FYGc6Ed65K8S2sWS35w&quot;>MessageTypes&lt;/a>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Illustrate the data model using Free Form diagrams. Use one or more such diagrams under each of the packages that&#xD;
        are used to organize your data model. &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../practice.tech.soma.service_specification.base-ibm/guidances/examples/parameter_types_derived_from_domain_types_B6CA3338.html&quot; guid=&quot;_SpwewKWREd6guMqwN5kA3g&quot;>Example: Parameter Types Derived from Domain Types&lt;/a>&amp;nbsp;presents the ParamType&#xD;
        diagram for the sample SoaML design model.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Complete Service Operation Signatures&quot; name=&quot;Complete Service Operation Signatures&quot;>Complete service operation&#xD;
    signatures&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Complete the service operation signatures by adding appropriate in, out, inout, and return parameters. These can be&#xD;
    typed&amp;nbsp;using PrimitiveTypes, ParamTypes, or MessageTypes. &amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Select the operation either in Project Explorer or on a diagram.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select the &lt;strong>Properties&lt;/strong> view, then the &lt;strong>Parameters&lt;/strong> tab.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Add necessary parameters, typed appropriately.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    Examine your Service Collaboration results to check that the parameters which have been assigned to the service&#xD;
    operations are sufficient to satisfy the required information flows through the behaviors.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Specify Service Protocols&quot; name=&quot;Specify Service Protocols&quot;>Specify service protocols&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;h4>&#xD;
    &lt;font size=&quot;3&quot;>Building locally owned service protocols&lt;/font>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    For each&amp;nbsp;collaborating ServiceInterface, create Behaviors&amp;nbsp;(Activities or Interactions) that describe the&#xD;
    protocols&amp;nbsp;service consumers and service providers must&amp;nbsp;conform to&amp;nbsp;during use of a service. If the&#xD;
    protocol involves only a single consumer,&amp;nbsp;then a simple ownedBehavior, such as the InvoicingService Activity that&#xD;
    appears in the above diagram, normally suffices. &amp;nbsp;The objective is to create a ServiceInterface specification that&#xD;
    is similar to what appears in the second diagram of &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/examples/service_interface_soaml_EC252D57.html&quot; guid=&quot;_dmG_MFbPEd6MCpkuB85p5g&quot;>Example: ServiceInterface (SoaML)&lt;/a>. Do this by following these steps:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Create a new structure diagram under the ServiceInterface.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Drag each interface that is involved in the protocol into the structure diagram. This creates a new property (part)&#xD;
        under the ServiceInterface. Connect the new parts appropriately, using the Connector element in the drawing&#xD;
        palette.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Create the ownedBehavior -- either an Activity or an Interaction -- under the ServiceInterface. If you are using an&#xD;
        Interaction, create a Sequence diagram under that.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        For Activity modeling, create partitions and type each one with a property.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        For Sequence diagram modeling, drag the properties onto the diagram to create the Lifelines.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Model the Behavior, using the previous results of service collaboration modeling to guide your understanding of how&#xD;
        the service provider (which will realize the provided interface) and the service consumer (which will realize the&#xD;
        ServiceInterface's required interface) must interact with each other. Follow the guidance in &quot;Modeling user&#xD;
        workflow by using activity diagrams&quot; if you are modeling behavior using Activities. Use &quot;Modeling the interactions&#xD;
        between objects in UML&quot; if you are using interactions.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    Now, complete the build-out of the Service Spec diagram for the ServiceInterface. This is precreated under the&#xD;
    ServiceInterface as part of the building block.&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Drag the ServiceInterface and&amp;nbsp;its UML Interfaces onto the diagram. The realization and usage relationships&#xD;
        should automatically appear. If they don't, make certain that you have created them in the model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select the ServiceInterface, then&amp;nbsp;select &lt;strong>Filters &amp;gt; Show/Hide Compartment &amp;gt; Structure&#xD;
        Compartment&lt;/strong>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Drag the ServiceInterface's Activity (or Interaction)&amp;nbsp;onto the diagram. If you are dragging an Activity and&#xD;
        its&amp;nbsp;activity diagram compartment appears, it will display the Activity Diagram in a disorganized state. You&#xD;
        can manually reorganize this if you wish. As an alternative, do the following: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Select the Activity, right-click, and select &lt;strong>Filters &amp;gt; Show/Hide Compartment &amp;gt; Name&#xD;
                Compartment Only&lt;/strong>.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Drag the Activity diagram from the Project Explorer and place its icon close to the Activity.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h4>&#xD;
    &lt;font size=&quot;3&quot;>Building a ServiceContract&lt;/font>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    For more complex protocols -- perhaps involving a provider and multiple consumers -- a &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_contract_soaml_E57B30D4.html&quot; guid=&quot;_IhtgsFbBEd6MCpkuB85p5g&quot;>ServiceContract&lt;/a> usually is created. The general approaches for building a locally&#xD;
    owned service protocol and a ServiceContract are similar. We highlight the differences here.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        To create a new ServiceContract, select the &lt;strong>3 - Service Contracts&lt;/strong> package, right-click, and select&#xD;
        &lt;strong>Add Services Model &amp;gt; ServiceContract&lt;/strong>. Name the new ServiceContract appropriately.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        For each interface that is involved in the ServiceContract, create a new Role (Property)&amp;nbsp;under the&#xD;
        ServiceContract and type it with the interface.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select the ServiceContract, right-click, and select &lt;strong>Add Diagram &amp;gt; Activity Diagram (or Sequence&#xD;
        Diagram).&lt;/strong>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Perform behavioral modeling as is described for the locally owned protocol.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Create a structural diagram in general accordance with the above instructions for the locally-owned protocol.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Create an Overview diagram that is similar to what is described for the locally owned protocol. In this case, drag the&#xD;
    Collaboration, rather than the ServiceInterface, onto the diagram and expose its structure compartment.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
