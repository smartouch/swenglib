<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-kbnok5436O7yI6KrnBjv4w" name="new_guideline,_RJMfcJiiEd69jrnQ2K7ppQ" guid="-kbnok5436O7yI6KrnBjv4w" changeDate="2009-09-25T06:39:16.640-0700" version="7.5.0">
  <mainDescription>&lt;p> &lt;strong>&lt;font size=&quot;4&quot;>What dependencies are and why knowing about them is &#xD;
  important&lt;/font>&lt;/strong> &lt;/p>&#xD;
&lt;p>&#xD;
    When an element contained by a &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/design_subsystem_47086B8E.html&quot; guid=&quot;_5inEwEo2Ed6D_7XK49c0nw&quot;>subsystem&lt;/a> uses some behavior of an element contained by another subsystem, a&#xD;
    dependency is created between the enclosing subsystems. Subsystem dependencies can have substantial impact on project&#xD;
    execution.&amp;nbsp;For example:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &#xD;
  &lt;li> Knowing about dependencies helps establish the required order of construction.&amp;nbsp; &#xD;
  &lt;/li>&#xD;
    &#xD;
  &lt;li> The subsystems that you depend on must be available before you can complete &#xD;
    the construction of your own subsystem.&amp;nbsp;If it is likely&amp;nbsp;that a required &#xD;
    subsystem will not be available during the timeframe of the current project, &#xD;
    mitigators must by defined and acted upon.&amp;nbsp; &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3> &lt;font size=&quot;4&quot;>What causes dependencies&lt;/font> &lt;/h3>&#xD;
&lt;ul>&#xD;
    &#xD;
  &lt;li> The previously mentioned &lt;strong>use of behavior&lt;/strong> of an element &#xD;
    contained by another subsystem. &lt;/li>&#xD;
    &#xD;
  &lt;li> The &lt;strong>use of data elements&lt;/strong> that are managed by services &#xD;
    that are contained by another subsystem. &lt;/li>&#xD;
    &#xD;
  &lt;li> &lt;strong>Temporal dependencies&lt;/strong>, when the capabilities of multiple &#xD;
    subsystems are involved in realizing a process that is managed externally &#xD;
    to any of the subsystems. These include: &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;ul>&#xD;
            &#xD;
      &lt;li> &lt;b>Precondition dependency:&lt;/b> An interface operation of another subsystem &#xD;
        must have executed successfully before the current invocation can begin &#xD;
        execution. &lt;/li>&#xD;
            &#xD;
      &lt;li> &lt;b>Processing dependency: &lt;/b> Another subsystem's operation is required &#xD;
        to complete the successful execution of the current operation. &lt;/li>&#xD;
            &#xD;
      &lt;li> &lt;b>Post-condition dependency:&lt;/b> This&amp;nbsp;occurs when a&amp;nbsp;subsystem &#xD;
        operation&amp;nbsp;requires invoking another subsystem operation after its &#xD;
        execution. &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3> &lt;font size=&quot;4&quot;>How to express dependencies&lt;/font> &lt;/h3>&#xD;
&lt;p> To improve reuse and reduce maintenance dependencies, express this in terms &#xD;
  of a dependency on a particular Interface of the subsystem, not upon the subsystem &#xD;
  itself, nor on the element contained in the subsystem.&lt;br />&#xD;
    &lt;br />&#xD;
    The reason for this is two-fold:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &#xD;
  &lt;li> You need to be able to substitute one model element (including subsystems) &#xD;
    for&amp;nbsp;another as long as the two offer the same behavior. You specify the &#xD;
    required behavior in terms of interfaces, so any behavioral requirements one &#xD;
    model element has on another&amp;nbsp;needs to&amp;nbsp;be expressed in terms of interfaces. &#xD;
  &lt;/li>&#xD;
    &#xD;
  &lt;li> You need to&amp;nbsp;give the designer total freedom in designing the internal &#xD;
    behavior of the subsystem, as long as it provides the correct external behavior. &#xD;
    If a model element in one subsystem references a model element in another &#xD;
    subsystem, the designer is no longer free to remove that model element or &#xD;
    redistribute the behavior of that model element to other elements. As a result, &#xD;
    the system is more brittle. &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p> In creating dependencies, ensure that there are no direct dependencies or &#xD;
  associations between model elements contained by the subsystem and model elements &#xD;
  contained by other subsystems. Also ensure that there are no circular dependencies &#xD;
  between subsystems and interfaces; a subsystem cannot both realize an interface &#xD;
  and be dependent on it, as well. &lt;/p> &#xD;
&lt;h3>&lt;font size=&quot;4&quot;>How to model subsystems and their dependencies&lt;/font> &lt;/h3>&#xD;
&lt;p> The concepts that were used to describe the &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_model_FC39652E.html&quot; guid=&quot;_T-AiUEozEd6D_7XK49c0nw&quot;>service &#xD;
  model&lt;/a> apply equally well to modeling subsystems. In this case, we might &#xD;
  make some model element substitutions, such as these: &lt;/p>&#xD;
&lt;ul>&#xD;
    &#xD;
  &lt;li> Use a component stereotyped as &lt;font face=&quot;Courier New, Courier, mono&quot;>&amp;lt;&amp;lt;subsystem&amp;gt;&amp;gt; &#xD;
    &lt;/font>rather than a component stereotyped as &lt;font face=&quot;Courier New, Courier, mono&quot;>&amp;lt;&amp;lt;Participant&amp;gt;&amp;gt;. &#xD;
    &lt;/font> &lt;/li>&#xD;
  &lt;li> Use an unstereotyped port, rather than a port stereotyped as &lt;font face=&quot;Courier New, Courier, mono&quot;>&amp;lt;&amp;lt;Service &#xD;
    Point&amp;gt;&amp;gt;&lt;/font> or &lt;font face=&quot;Courier New, Courier, mono&quot;>&amp;lt;&amp;lt;Request &#xD;
    Point&amp;gt;&amp;gt;. &lt;/font>&lt;/li>&#xD;
  &lt;li> Type the port with UML interfaces and classes, rather than interfaces and &#xD;
    classes that are stereotyped as &lt;font face=&quot;Courier New, Courier, mono&quot;>&amp;lt;&amp;lt;Service &#xD;
    Interface&amp;gt;&amp;gt;. &lt;/font> &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
