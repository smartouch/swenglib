<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-hSdB97doEtdojXEfsxFc7A" name="structure_test_implementaion,_PSykkHE6Edy8Ac588DXPCQ" guid="-hSdB97doEtdojXEfsxFc7A" changeDate="2007-12-20T13:39:06.796-0800" version="7.2.0">
  <sections xmi:id="_tvbI0HdeEdyqd9oUl_5ulw" name="Examine the Test Approach, Target Test Items and Assessment Needs " guid="_tvbI0HdeEdyqd9oUl_5ulw">
    <sectionDescription>&lt;p>&#xD;
    Starting with a review of the Test Plan to determine the assessment needs, consider how the assessment of the extent of&#xD;
    testing and of software quality can be determined using the stated Test Approach. Consider any special needs that need&#xD;
    to be addressed related to specific Target Test Items.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_vc8akHdeEdyqd9oUl_5ulw" name="Examine the Testability Mechanisms and Supporting Elements " guid="_vc8akHdeEdyqd9oUl_5ulw">
    <sectionDescription>&lt;p>&#xD;
    Review the mechanisms that are useful to enable testing in this environment, and identify the specific testability&#xD;
    elements that implement these mechanisms. This includes reviewing resources (such as any function libraries that have&#xD;
    been developed by the test team, and stubs or harnesses implemented by the development team).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Testability is achieved through a combination of developing software that is testable and defining a test approach that&#xD;
    appropriately supports testing. As such, testability is an important aspect of the test teams' asset development, just&#xD;
    as it is an important part of the software development effort. Achieving Testability (the ability to effectively test&#xD;
    the software product) will typically involve a combination of the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Testability enablers provided by test automation tools&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Specific techniques to create the component Test Scripts&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Function libraries that separate and encapsulate complexity from the basic test procedural definition in the Test&#xD;
        Script, providing a central point of control and modification&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;AnalyzeDistribution&quot; name=&quot;AnalyzeDistribution&quot;>Analyze distribution requirements&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Does the current Test Suite have the requirement to be distributed? If so, make use of the testability elements that&#xD;
    support distribution. These elements will typically be features of specific automation support tools that will&#xD;
    distribute the Test Suite, execute it remotely, and return the Test Log and other outputs for centralized results&#xD;
    determination.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;AnalyzeConcurrency&quot; name=&quot;AnalyzeConcurrency&quot;>Analyze concurrency requirements&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Does the current Test Suite have the requirement to be run concurrently with other Test Suites? If so, make use of the&#xD;
    testability elements that support concurrency. These elements will typically be a combination of specific supporting&#xD;
    tools and utility functions to enable multiple Test Suites to execute concurrently on different physical machines.&#xD;
    Concurrency requires careful Test Data design and management to ensure that no unexpected or unplanned side effects&#xD;
    occur (such as two concurrent tests updating the same data record).&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_xtyb0HdeEdyqd9oUl_5ulw" name="Create the Initial Test Suite Structure " guid="_xtyb0HdeEdyqd9oUl_5ulw">
    <sectionDescription>&lt;p>&#xD;
    Enumerate one or more Test Suites that (when executed) will provide a complete and meaningful result of value to the&#xD;
    test team, enabling subsequent reporting to stakeholders. Try to find a balance between enough detail to provide&#xD;
    specific information to the project team, but not so much detail that it is overwhelming and unmanageable.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Where Test Scripts already exist, you can probably assemble the Test Suite and its constituent parts yourself, then&#xD;
    pass the Test Suite stabilization work on to a Test Suite implementer to complete.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For Test Suites that require new Test Scripts to be created, you should also give some indication of the Test Scripts&#xD;
    (or other Test Suites) that you believe will be referenced by this Test Suite. If it is easy to enumerate them, do&#xD;
    that. If not, you might simply provide a brief description that outlines the expected content coverage of the main Test&#xD;
    Suite and leave it to the Test Suite implementer to make tactical decisions about exactly what Test Scripts are&#xD;
    included.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_28UWMHdeEdyqd9oUl_5ulw" name="Adapt the Test Suite Structure to Reflect Team Organization and Tool Constraints " guid="_28UWMHdeEdyqd9oUl_5ulw">
    <sectionDescription>&lt;p>&#xD;
    It may be necessary to further subdivide or restructure the Test Suites that you have identified to accommodate the&#xD;
    Work Breakdown Structure (WBS) the team is working to. This will help to reduce the risk that access conflicts might&#xD;
    arise during Test Suite development. Sometimes test automation tools might place constraints on how individuals can&#xD;
    work with automation assets, so restructure the Test Suites to accommodate this as necessary.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_7P_K0HdeEdyqd9oUl_5ulw" name="Identify inter-Test Script Communication Mechanisms" guid="_7P_K0HdeEdyqd9oUl_5ulw">
    <sectionDescription>&lt;p>&#xD;
    In most cases, Test Suites can simply call Test Scripts in a specific order. This will be sufficient in many cases to&#xD;
    ensure that the correct system state is passed through from one Test Script to the next.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    However, in certain classes of system, dynamic runtime data is generated by the system or derived as a result of the&#xD;
    transactions that take place within it. For example, in an order entry and dispatch system, each time an order is&#xD;
    entered a unique order number is system generated. To enable an automated Test Script to dispatch an order, a preceding&#xD;
    order entry Test Script needs to capture the unique number that the system generates, and then pass it on to the order&#xD;
    dispatch Test Script.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In cases like this, you will need to consider what inter-Test Script communication mechanism is appropriate to use.&#xD;
    Typical alternatives include passed parameters, writing and reading values in a disk file, and using global runtime&#xD;
    variables. Each strategy has pros and cons that make it more or less appropriate in each specific situation.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_-4SuQHdeEdyqd9oUl_5ulw" name="Define Initial Dependencies Between Test Suite Elements " guid="_-4SuQHdeEdyqd9oUl_5ulw">
    <sectionDescription>&lt;p>&#xD;
    This is primarily associated with the sequencing of the Test Scripts (and possibly Test Suites) for runtime execution.&#xD;
    Tests that run without the correct dependencies being established run the risk of either failing or reporting anomalous&#xD;
    data.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_DFtJ4HdfEdyqd9oUl_5ulw" name="Visually Model the Test Implementation Architecture" guid="_DFtJ4HdfEdyqd9oUl_5ulw">
    <sectionDescription>&lt;p>&#xD;
    If you have access to a UML modeling or drawing tool, you may wish to create a diagram of the Test Implementation Model&#xD;
    that depicts the key elements of the automated test software. You might also diagram some key aspects of the Test&#xD;
    Automation Architecture in a similar way.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Another approach is to draw these diagrams on a white board that is easily visible to the test team.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_GyVzsHdfEdyqd9oUl_5ulw" name="Refine the Test Suite Structure " guid="_GyVzsHdfEdyqd9oUl_5ulw">
    <sectionDescription>&lt;p>&#xD;
    As the project progresses, Test Suites are likely to change: new Test Scripts will be added and old Test Scripts&#xD;
    updated, reordered, or deleted. These changes are a natural part of Test Suite maintenance, and you need to embrace&#xD;
    them rather than avoid them.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If you do not actively maintain the Test Suites, they will quickly become broken and fall into disuse. Left for a few&#xD;
    builds, a Test Suite may take extensive effort to resurrect, and it may be easier to simply abandon it and create a new&#xD;
    one from scratch.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_JbwtAHdfEdyqd9oUl_5ulw" name="Maintain Traceability Relationships " guid="_JbwtAHdfEdyqd9oUl_5ulw">
    <sectionDescription>Using the Traceability requirements for the project, update the traceability relationships as required.</sectionDescription>
  </sections>
  <sections xmi:id="_M4TFUHdfEdyqd9oUl_5ulw" name="Evaluate and Verify Your Results" guid="_M4TFUHdfEdyqd9oUl_5ulw">
    <sectionDescription>&lt;p>&#xD;
    You should evaluate whether your work is of appropriate quality, and that it is complete enough to be useful to those&#xD;
    team members who will make subsequent use of it as input to their work. Where possible, use checklists to verify that&#xD;
    quality and completeness are good enough.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Have the people who perform the downstream tasks that rely on your work as input review your interim work. Do this&#xD;
    while you still have time available to take action to address their concerns. You should also evaluate your work&#xD;
    against the key input work products to make sure that you have represented them accurately and sufficiently. It may be&#xD;
    useful to have the author of the input work product review your work on this basis.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <purpose>&lt;p>&#xD;
    The purpose of this task is to:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Establish the structure in which the test suite implementation will reside&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Assign responsibilities for test suite implementation areas and their contents&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Outline the required Test Suites&#xD;
    &lt;/li>&#xD;
&lt;/ul></purpose>
</org.eclipse.epf.uma:TaskDescription>
