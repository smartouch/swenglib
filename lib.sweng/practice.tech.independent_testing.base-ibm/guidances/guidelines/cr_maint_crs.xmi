<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-WxAhrAP04DUApAchx_mW-A" name="new_guideline,_FgdI4LJWEdyHw6xErAkVmw" guid="-WxAhrAP04DUApAchx_mW-A" version="7.2.0">
  <mainDescription>&lt;h4>&#xD;
    &lt;a id=&quot;VerifyIncidentFacts&quot; name=&quot;VerifyIncidentFacts&quot;>Verify incident facts&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Verify that there is accurate, supporting data available. Collate the data for attachment directly to the Change&#xD;
    Request, or reference where the data can be obtained separately.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Whenever possible, verify that the problem is reproducible. Reproducible problems have much more likelihood of&#xD;
    receiving developer attention and being subsequently fixed; a problem that cannot be reproduced both frustrates&#xD;
    development staff and will waste valuable programming resources in fruitless research. You should probably still log&#xD;
    all of these incidents, but consider identifying unreproduceable incidents separately from the reproducible ones.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;ClarifyCRDetail&quot; name=&quot;ClarifyCRDetail&quot;>Clarify Change Request details&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    It is important for Change Requests to be understandable, especially the headline. Make sure that the headline is crisp&#xD;
    and concise, articulating clearly the specific issue. A brief headline is useful for summary defect listings and&#xD;
    discussion in the Change-Control Board status meetings.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is also important that the detailed description of the Change Request is unambiguous and can be easily interpreted.&#xD;
    It is a good idea to log your Change Requests as soon as possible, but take time to go back and improve and expand on&#xD;
    your descriptions before they are viewed by development staff.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Provide candidate solutions, as many as practical. This helps to reduce any remaining ambiguity in the description,&#xD;
    often helping to clarify. It also increases the likelihood that the solution will be close to your expectations.&#xD;
    Furthermore, it shows that the test team is not only prepared to find the problems, but also to help identify&#xD;
    appropriate solutions.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Other details to include are screen image captures, Test Data files, automated Test Scripts, output from diagnostic&#xD;
    utilities, and any other information that would be useful to the developers in isolating and correcting the underlying&#xD;
    fault.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;CRSeverityPriority&quot; name=&quot;CRSeverityPriority&quot;>Indicate the relative impact severity and resolution priority&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Provide an indication to the management and development staff of the severity of the problem. In larger teams, the&#xD;
    actual resolution priority is normally left for the management team to determine; however, you might allow individuals&#xD;
    to indicate their preferred resolution priority and subsequently adjust it as necessary. As a general rule, assign&#xD;
    Change Requests an average resolution priority by default, and raise or lower that priority on a case-by-case basis as&#xD;
    necessary.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You may need to differentiate between the impact the Change Request will have on the production environment if it is&#xD;
    not addressed, and the impact the Change Request will have on the test effort if it is not addressed. It is just as&#xD;
    important for the management team to know when a defect is impacting the testing effort as it is to be aware of the&#xD;
    severity of the impact on users.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Sometimes it is difficult to see in advance why you need both attributes. It is possible that an incident may be really&#xD;
    severe, such as a system crash, but the actions required to reproduce it very unlikely to occur. In this case, the team&#xD;
    may indicate its severity as high, but indicate a very low resolution priority.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;LogAnotherCR&quot; name=&quot;LogAnotherCR&quot;>Log additional Change Requests separately&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Incidents often bear out the old adage, &quot;Where there's smoke, there's fire&quot;; as you identify and log one Change&#xD;
    Request, you quite often identify other issues that need to be addressed. Avoid the temptation to simply add these&#xD;
    additional findings to the existing Change Request: if the information is directly related and helps to solve the&#xD;
    existing issue better, then that's OK. If the other issues are different, identifying them against an existing CR may&#xD;
    result in those issues not being actioned, not getting appropriate priority in their own right, or impacting the speed&#xD;
    at which other issues are addressed.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
