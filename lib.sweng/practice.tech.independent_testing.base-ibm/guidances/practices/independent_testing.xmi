<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:PracticeDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-nigOri6wcDzORmUXF_rAjw" name="independent_testing,_fnn70CFAEd2KZfP7K7AmSg" guid="-nigOri6wcDzORmUXF_rAjw" changeDate="2008-10-14T09:35:46.718-0700" version="7.5.0">
  <additionalInfo>For more information on this practice,&amp;nbsp;&amp;nbsp;see the &lt;a&#xD;
href=&quot;http://www.ibm.com/developerworks/rational/practices/ind_testing/&quot; target=&quot;_blank&quot;>practice resource page&amp;nbsp;on&#xD;
IBM&amp;reg; DeveloperWorks&amp;reg;&lt;/a>.</additionalInfo>
  <problem>&lt;p>&#xD;
    In many cases, the companies which need a more&amp;nbsp;formal approach to testing&amp;nbsp;are developing safety-critical&#xD;
    systems, such as air traffic control, missile guidance, or medical delivery systems, where a failure can harm people.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    But the criticality of a system is not necessarily immediately obvious. It's likely that the impact of a defect could&#xD;
    cause the business using the software considerable expense in lost revenue and, possibly, legal expenses. In this&#xD;
    information age, with increasing demands on providing electronically delivered services over the Internet,&#xD;
    many&amp;nbsp;information systems are now considered mission-critical. That is, companies cannot fulfill their functions&#xD;
    and they experience massive losses when failures occur.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A continuous approach to quality, initiated early in the software lifecycle, can significantly lower the cost of&#xD;
    completing and maintaining your software. This greatly reduces the risk associated with deploying poor-quality&#xD;
    software.&#xD;
&lt;/p></problem>
  <application>&lt;p>&#xD;
    The best way to review a practice is to adopt a multi-prong approach: Use different perspectives driven by artifacts,&#xD;
    activities, test cycles,&amp;nbsp;or roles, and shift among them when your focus changes from what you need to produce to&#xD;
    how or when an activity is performed.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Artifacts:&lt;/b> Start with the main work products, &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../practice.tech.independent_testing.base-ibm/customcategories/artifacts_view_737465D.html&quot;&#xD;
        guid=&quot;_iE1wkJx3Edy-TZpPnj7vyg&quot;>Test Artifacts&lt;/a>. Move to the secondary set of artifacts, and decide which ones&#xD;
        are important to you and your organization.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Activities:&lt;/b> Analyze the main&amp;nbsp;&lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../practice.tech.independent_testing.base-ibm/capabilitypatterns/struct_testing_iteration_2B6B3126.html&quot;&#xD;
         guid=&quot;_zAR1YYcrEdyuU5Sm8sc1Cw&quot;>Test Iteration [Template]&lt;/a>, which gives an overview of all of the activities&#xD;
        performed as part of a typical test cycle. Drill down into each activity to better understand the tasks and&#xD;
        artifacts employed.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Test lifecycle:&lt;/b> Depending on the role that you play in the test organization, you might want to focus only&#xD;
        on specific aspects of testing. See &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../practice.tech.independent_testing.base-ibm/customcategories/test_tasks_EB1A662E.html&quot;&#xD;
        guid=&quot;_UXZgAIl6EdyJz-Y2MJegug&quot;>Test Tasks&lt;/a>.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Review the guidelines, concepts, and, if applicable, tool-related guidance.&#xD;
&lt;/p></application>
</org.eclipse.epf.uma:PracticeDescription>
