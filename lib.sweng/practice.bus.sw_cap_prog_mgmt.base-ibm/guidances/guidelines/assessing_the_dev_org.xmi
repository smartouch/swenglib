<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-0PCkiYd65MZaBiY1Bd4t8A" name="new_guideline,_jMatsG2gEd-Mm_K-F15OKw" guid="-0PCkiYd65MZaBiY1Bd4t8A" changeDate="2010-11-20T14:28:57.359-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Development organization assessments are performed in order to understand an organization's current software&#xD;
    development capabilities.&amp;nbsp; The assessment team learns how the organization currently approaches software&#xD;
    development and delivery and identifies current process weaknesses and strengths. The assessment team then makes&#xD;
    improvement recommendations that are aligned with the organization's operational objectives and validates them with&#xD;
    stakeholders.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Factors to consider&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    When performing an assessment of the organization's current software capabilities, consider the following factors which&#xD;
    should shape the character of the organization's processes and tools usage, and their required tailoring guidelines.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Operational Objectives&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A successful assessment requires understanding the organization's operational objectives. These objectives are&#xD;
    internally-focused, concentrating on operations within the company and their ability to perform the most critical&#xD;
    functions to meet business obligations. Operational objectives typically target these criteria:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Productivity or efficiency&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Time to delivery&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Quality&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Predictability&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Value and customer satisfaction&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Organizational processes should be defined to align with the organization's operational objectives. For example, if&#xD;
    quality is a priority, confirm that the organization has sufficient practice and tool support to prevent and detect&#xD;
    defects.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Prior to beginning the assessment, review and validate the operational objectives.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;br />&#xD;
    Business context&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    There are different types of business contexts that affect the&amp;nbsp;required level of ceremony, the level of formality,&#xD;
    and the rigidity of the process. The more stakeholders (e.g. buyers, customers, subcontractors, regulatory bodies)&#xD;
    involved, the more likely projects will need to produce formal evidence, such as documents, reports, and prototypes, at&#xD;
    major project milestones. Examples to consider:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Contract work where the developer produces software to a given customer specification and for this customer only.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Speculative or commercial development where the developer produces and covers the cost of putting the software on&#xD;
        the market.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Internal projects where customer and developer are in the same organization.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;br />&#xD;
    Size of typical software development efforts&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The typical effort's size will also affect the level of ceremony, the level of formality, and the rigidity of the&#xD;
    process. The larger the project, the larger the development team and, regardless of the business context, the more&#xD;
    formality and visibility the various teams and management need to have in requirements, interfaces, and progress&#xD;
    indicators. Communication issues on large projects are further aggravated by geographically dispersed teams.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The size of&amp;nbsp;software development efforts&amp;nbsp;can be&amp;nbsp;defined by certain metrics such as Source Lines of Code&#xD;
    (SLOC), Delivered Source Instructions or Functions Points, number of person-months or merely the cost.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Degree of novelty&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The degree of novelty is based on what has preceded&amp;nbsp;a given&amp;nbsp;software effort&amp;nbsp;within the&amp;nbsp;development&#xD;
    organization and, in particular, whether the development is in a second or subsequent cycle. This includes the maturity&#xD;
    of the organization and its process, its assets, its current skill set, and issues such as assembling and training a&#xD;
    team, acquiring tools, and other resources.&lt;br />&#xD;
    &lt;br />&#xD;
    A given project's degree of novelty affects the process in a completely different way. For a new type of project, the&#xD;
    first of its kind, the inception and elaboration phases will be longer, and may span several iterations. Also, more&#xD;
    emphasis will be put on eliciting and capturing requirements, on use-case modeling, on architecture, and on mitigating&#xD;
    risk. For a project that is an evolution cycle from a previous system, change management is more crucial and&#xD;
    incorporating legacy code poses some technical challenges.&lt;br />&#xD;
    &lt;br />&#xD;
    Novelty is not only relative to the system being developed, it's also relative to the maturity of the performing&#xD;
    organization because introducing new techniques or tools affects the process.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;br />&#xD;
    Type of applications&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    There are different types of applications (e.g. &amp;nbsp;embedded real-time systems, distributed information systems,&#xD;
    telecom systems, Computer-Aided Software Engineering (CASE) tools). The type of applications delivered by an&#xD;
    organization&amp;nbsp;will affect&amp;nbsp;its processes, especially with respect to specific constraints the domain may impose&#xD;
    on the development such as safety, performance, internationalization, memory constraints, and so forth.&lt;br />&#xD;
    &lt;br />&#xD;
    The type of application may affect the process if the application is mission-critical; for example, the flight-control&#xD;
    system in an airplane. A mission-critical system requires a higher level of ceremony in general, both to trace&#xD;
    requirements and to assure the quality of the product. A mission-critical application also requires that more resources&#xD;
    are spent on testing.&lt;br />&#xD;
    &lt;br />&#xD;
    The type of development, or the target domain, bring in process issues such as:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Techniques and tools to support specific activities; for example, automatic code generation for finite-state&#xD;
        machines.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Certification procedures; for example, for medical instrumentation.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Compliance to standards; for example, for accounting or fiscal issues, and for telecommunication equipment.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;br />&#xD;
    Type of development&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    There are various types of development, such as:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Contract work where you develop a product for a specific customer. You have more stakeholders to manage and&#xD;
        negotiate with hen you perform contract work. There is often a need for more formal external artifacts because the&#xD;
        customer, or representatives, want to monitor progress and be kept informed. Make sure that the artifacts the&#xD;
        customer reviews are easy to understand. Sometimes, there is&amp;nbsp;a need to have a milestone where the project can&#xD;
        offer a fixed-price on the rest of the project. In that case, you may need to add a new milestone or adjust the&#xD;
        existing milestones. In other cases, you may have to adjust to the lifecycle model the customer is using with other&#xD;
        milestones and phases.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Speculative development where you develop a product for a mass-market. In speculative development, a marketing&#xD;
        (product) manager, within the organization itself, acts as the customer. Time-to-delivery is often more important&#xD;
        than the functionality in speculative development and there is less need for formal reviews.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Internal development where you develop a product that is delivered to another department within the company. It may&#xD;
        be acceptable to be less formal when describing artifacts because&amp;nbsp;they will be reviewed by peers.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Pre-studies where you do not normally develop a product. The purpose of a pre-study project is to find out whether&#xD;
        it is&amp;nbsp;possible to build a product. A pre-study project doesn't have the same milestones as a&amp;nbsp;typical&#xD;
        project.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Technical and managerial complexity&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Different types of systems, and their projects, can be classified in terms of the technical complexity of the system&#xD;
    and the managerial complexity. For example, a typical small business spreadsheet application is often of low technical&#xD;
    complexity and is easy to manage. The other extreme is a typical weapon system project, which is often both technically&#xD;
    complex, and complex to manage.&lt;br />&#xD;
    &lt;br />&#xD;
    Usually increasing system size, project duration or business context also increases the managerial complexity.&#xD;
    Increasing the novelty, in either the problem domain or the solution space, increases the technical complexity. There&#xD;
    is an interaction between managerial and technical complexity as well, as many large projects are also technically&#xD;
    complex. This results in:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Increased managerial complexity that leads to more ceremony, including more formal reviews and milestones, and more&#xD;
        artifacts.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Increased technical complexity that leads to the introduction of specific techniques, roles and tools, and,&#xD;
        therefore, more activities.&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Problems and root causes&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    An important aspect of understanding&amp;nbsp;the software development organization is to understand the problems in the&#xD;
    existing software development process. This influences those areas of the process you will concentrate on in the&#xD;
    beginning of the process implementation. It is&amp;nbsp;important to note that, if there is no established way of working&#xD;
    in the organization, it may be pointless to find problems. Instead, you may need to identify the root causes of the&#xD;
    problems. To eliminate the problems, you will tackle the root causes by improving the process, introducing tools to&#xD;
    automate the process, and training people.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Examples of common problems:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Inability to manage scope-the organization routinely tries to do more than they actually do in the end.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Inability to capture requirements-they have difficulty specifying requirements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Inability to manage changing requirements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Inability to manage requirements-requirements do not make it to the final product.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Inability to estimate-they are routinely too optimistic about their ability to deliver on schedule.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Design deficiency-they are good at meeting requirements, yet poor at designing systems. What kinds of design&#xD;
        problems do they have? Are the systems difficult to maintain and enhance? Do they have performance problems,&#xD;
        usability problems, capacity problems, and so on?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Inability to produce quality products-the product has too many defects which may be due to lack of testing, but&#xD;
        usually is also related to an inability to capture and manage requirements, as well as design deficiency.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Unacceptable software performance.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Low usability.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Colliding developers-there is a lack of control over ownership and configuration management, so that developers&#xD;
        make conflicting changes and work is lost.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Late discovery of problems.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Trouble going from use cases to design.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Examples of root causes&lt;br />&#xD;
    &lt;br />&#xD;
    A problem is often a symptom that something is wrong. You need to identify the root causes of the problems. The&#xD;
    following are examples of some common root causes:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Insufficient requirements management&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ambiguous and imprecise communications&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Brittle architectures&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Overwhelming complexity&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Undetected inconsistencies among requirements, designs, and implementations&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Insufficient testing&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Subjective project status assessment&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Delayed risk reduction due to waterfall development&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Uncontrolled change propagation&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Insufficient automation&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        No systematic way to build user interfaces&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        No way to go from use cases to a design&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Advice for conducting the assessment&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Depending on the scope of the assessment, it can be useful to schedule a kickoff meeting to review and discuss the&#xD;
        assessment and the process. Invite stakeholders, participants, and the assessment team.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Confirm there is sufficient domain expertise available on the assessment team to identify strengths and weaknesses.&#xD;
        Confirm the scope of the assessment&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Confirm that you have identified the right people to provide the materials that will be assessed. Be clear about&#xD;
        what is being requested. Success depends on the availability of information and open communication about what is&#xD;
        working and what is not.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Prepare interview questions in advance so that the interviews are conducted as consistently as possible.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Workshops are often used to support the&amp;nbsp;assessment of an organization's software development processes and&#xD;
        tools.&amp;nbsp;See &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../practice.bus.sw_cap_prog_mgmt.base-ibm/guidances/guidelines/conduct_assessment_workshop_AE1F7574.html&quot;&#xD;
         guid=&quot;_0sYDEGqjEd-xSa1ixq-krw&quot;>Guideline: Conduct an Assessment Workshop&lt;/a>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            Perform information gathering on-site through a series of interviews, artifact reviews, and inspections of the&#xD;
            development environment&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h5>&#xD;
    &lt;br />&#xD;
    &lt;br />&#xD;
&lt;/h5></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
