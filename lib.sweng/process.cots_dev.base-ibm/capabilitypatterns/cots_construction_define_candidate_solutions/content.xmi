<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1">
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-li9WhRvOKTsfSa2v23nqkg" name="cots_inception_define_candidate_solutions,_P6-zYffeEdmriJhf4djjLA" guid="-li9WhRvOKTsfSa2v23nqkg" version="7.1.0">
    <mainDescription>&lt;p>&#xD;
    Once additional information has been gathered within each sphere of influence, it is combined to refine the definition&#xD;
    of the selected solution and build an &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../practice.tech.cots_dev.base-ibm/workproducts/cots_executing_system_F270F4C8.html&quot;&#xD;
    guid=&quot;_yylRKuwiEd-sjp03to1LnQ&quot;>Executing System&lt;/a> ready for fielding.&#xD;
&lt;/p></mainDescription>
    <scope>&amp;nbsp;</scope>
  </org.eclipse.epf.uma:ProcessDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-GdZbktgmnIkjfOKPtTNhQw" name="business_case,_s-g1J-wsEd-sjp03to1LnQ" guid="-GdZbktgmnIkjfOKPtTNhQw">
    <refinedDescription>For a commercial software product, the Business Case should include a set of assumptions about the project and the order of&#xD;
magnitude return on investment (ROI) if those assumptions are true. For example, the ROI will be a magnitude of five if&#xD;
completed in one year, two if completed in two years, and a negative number after that. These assumptions are checked again&#xD;
at the end of the Elaboration phase, when the scope and plan are defined with more accuracy.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-qV0TUpMC5f8tHoCwV87_fQ" name="cots_system_architect,_LVwhIRZCEeC7GIF5yBIrzQ" guid="-qV0TUpMC5f8tHoCwV87_fQ">
    <keyConsiderations>&lt;b>Relationship of System Architect to Software Architect&lt;/b> &#xD;
&lt;p>&#xD;
    There are many similarities in the roles; indeed for projects that are deemed &quot;systems&quot; developments because of their&#xD;
    size or complexity, but which are, nevertheless largely or completely software, the two roles coalesce. However, in the&#xD;
    general case, the constituency of the System Architect is larger than that of the Software Architect. The System&#xD;
    Architect must contend with physically imposed constraints that do not exist in the much more malleable world of&#xD;
    software. The very flexibility of software though makes possible paths of architectural evolution that previously could&#xD;
    not be contemplated. Therefore, the relationship of Software Architect to System Architect is not a strictly&#xD;
    subordinate one: feedback from software architectural considerations can profoundly affect the system architecture; to&#xD;
    deny this is to run the risk of potentially sub-optimal &lt;i>system&lt;/i> architectures based on the simplistic notion of&#xD;
    software architecture as derivative from the allocation of requirements (by the System Architect) to computing&#xD;
    platforms. It is true to say though that in a team of System Architect and Software Architect(s), the responsibilities&#xD;
    of the System Architect role require that the System Architect be &lt;i>primus inter pares&lt;/i>, because the system is the&#xD;
    end-product.&#xD;
&lt;/p></keyConsiderations>
    <refinedDescription>&lt;p>&#xD;
    The System Architect establishes and refines the system's logical and physical structure and is concerned with the&#xD;
    optimization of these structures in terms of major system elements and their interfaces, and making trade-offs in&#xD;
    competing factors and constraints (for example, performance, cost, environmental impact), in evaluating potential&#xD;
    solutions that produce the required behavior. The System Architects' view spans the entire system and all factors,&#xD;
    external and internal, that might affect its development. Given the need to maintain this broad view, the System&#xD;
    Architect rarely engages in depth in the detailed engineering of a system, preferring to leave that to other&#xD;
    practitioners in the various engineering specialties.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-s3sXSlf4uulNf0wQ-JZHKg" name="build_procedures,_QQSJJxY8EeC7GIF5yBIrzQ" guid="-s3sXSlf4uulNf0wQ-JZHKg">
    <keyConsiderations>&lt;p>
    This is a very straightforward work product.&amp;nbsp; Write the build procedures so any team member can follow them.&amp;nbsp;
&lt;/p>
&lt;p>
    If security is an issue, ensure that the team knows where and how to get the password.&amp;nbsp; One solution is letting
    the project manager keep passwords in a sealed envelope in a secure location. However, the proper people must be aware
    of how to gain access to this location, if necessary.
&lt;/p>
&lt;p>
    You can test the Build Procedures by having a team member unfamiliar with the process walk through the
    procedures.&lt;br />
&lt;/p></keyConsiderations>
    <refinedDescription>This artifact&amp;nbsp;may include such items as which files are required, which links must be in place, which libraries are
accessed, the sequence of steps required to generate the system, or any required passwords.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-jaI1bLjDZs3W2FefRpCoIg" name="integrator,_QQbTERY8EeC7GIF5yBIrzQ" guid="-jaI1bLjDZs3W2FefRpCoIg">
    <refinedDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_integrator_(role)__description_of&quot; name=&quot;XE_integrator_(role)__description_of&quot;>&lt;/a>&lt;a&#xD;
id=&quot;Description&quot; name=&quot;Description&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    Implementers deliver their tested Implementation Elements into an integration workspace, whereas integrators combine&#xD;
    them to produce a build. An integrator is also responsible for planning the integration, which takes place at the&#xD;
    subsystem and system levels, with each having a separate integration workspace. Tested elements are delivered from an&#xD;
    implementer's private development workspace into a subsystem integration workspace, whereas integrated implementation&#xD;
    subsystems are delivered from the subsystem integration workspace into the system integration workspace.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Further Reading&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    See &lt;i>Code Complete - A Practical Handbook of Software Construction&lt;/i> [&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../core.tech.common.extend-ibm-usdd/guidances/supportingmaterials/tech_references.usdd_B1D5B98B.html&quot;&#xD;
    guid=&quot;_XgtG4EcbEd6pZ7kaNkUN9Q&quot;>MCO93&lt;/a>].&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-En0rUX_hzquS1yMWlireUA" name="cots_system_architect,_s-g1LOwsEd-sjp03to1LnQ" guid="-En0rUX_hzquS1yMWlireUA">
    <keyConsiderations>&lt;b>Relationship of System Architect to Software Architect&lt;/b> &#xD;
&lt;p>&#xD;
    There are many similarities in the roles; indeed for projects that are deemed &quot;systems&quot; developments because of their&#xD;
    size or complexity, but which are, nevertheless largely or completely software, the two roles coalesce. However, in the&#xD;
    general case, the constituency of the System Architect is larger than that of the Software Architect. The System&#xD;
    Architect must contend with physically imposed constraints that do not exist in the much more malleable world of&#xD;
    software. The very flexibility of software though makes possible paths of architectural evolution that previously could&#xD;
    not be contemplated. Therefore, the relationship of Software Architect to System Architect is not a strictly&#xD;
    subordinate one: feedback from software architectural considerations can profoundly affect the system architecture; to&#xD;
    deny this is to run the risk of potentially sub-optimal &lt;i>system&lt;/i> architectures based on the simplistic notion of&#xD;
    software architecture as derivative from the allocation of requirements (by the System Architect) to computing&#xD;
    platforms. It is true to say though that in a team of System Architect and Software Architect(s), the responsibilities&#xD;
    of the System Architect role require that the System Architect be &lt;i>primus inter pares&lt;/i>, because the system is the&#xD;
    end-product.&#xD;
&lt;/p></keyConsiderations>
    <refinedDescription>&lt;p>&#xD;
    The System Architect establishes and refines the system's logical and physical structure and is concerned with the&#xD;
    optimization of these structures in terms of major system elements and their interfaces, and making trade-offs in&#xD;
    competing factors and constraints (for example, performance, cost, environmental impact), in evaluating potential&#xD;
    solutions that produce the required behavior. The System Architects' view spans the entire system and all factors,&#xD;
    external and internal, that might affect its development. Given the need to maintain this broad view, the System&#xD;
    Architect rarely engages in depth in the detailed engineering of a system, preferring to leave that to other&#xD;
    practitioners in the various engineering specialties.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-k9HE79y1VyJDDTH4UmPItw" name="data_migration_specification,_auLkwXOZEeCIg8bfzEsl9Q" guid="-k9HE79y1VyJDDTH4UmPItw">
    <keyConsiderations>&lt;ul class=&quot;noindent&quot;>&#xD;
    &lt;li>&#xD;
        It is preferable to have legacy developers from the source data reference as participants in the data mapping&#xD;
        process.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Data mapping rules may be stored in an automated tool, preferably one with a repository.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The logical level of the data model should be completed, and the external data references identified before the&#xD;
        data mapping is begun.&#xD;
    &lt;/li>&#xD;
&lt;/ul></keyConsiderations>
    <refinedDescription>&lt;p>&#xD;
    This artifact is a detailed description of the requirements for accomplishing data transfers. A data reference can be&#xD;
    either a source (sending data into the system -inbound) or a target (receiving data from the system -outbound).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Appropriate data sources are found for each of&amp;nbsp;the target data elements, and then rules are drafted to extract,&#xD;
    transform, and move the source to the target data element. Rules are developed for the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Data selection - rules describing the criteria by which data is to be selected&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Data cleansing - rules describing how the source data will be cleansed as it is extracted&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Error detection and correction - rules defining how missing or invalid data should be treated&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Data mapping - rules describing what must be done to the source data (transformation) to satisfy target data&#xD;
        requirements&#xD;
    &lt;/li>&#xD;
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-e4ZvSojbiLdylNWt59BTPg" name="data_migration_specification,_4puLcXOZEeCIg8bfzEsl9Q" guid="-e4ZvSojbiLdylNWt59BTPg">
    <keyConsiderations>&lt;ul class=&quot;noindent&quot;>&#xD;
    &lt;li>&#xD;
        It is preferable to have legacy developers from the source data reference as participants in the data mapping&#xD;
        process.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Data mapping rules may be stored in an automated tool, preferably one with a repository.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The logical level of the data model should be completed, and the external data references identified before the&#xD;
        data mapping is begun.&#xD;
    &lt;/li>&#xD;
&lt;/ul></keyConsiderations>
    <refinedDescription>&lt;p>&#xD;
    This artifact is a detailed description of the requirements for accomplishing data transfers. A data reference can be&#xD;
    either a source (sending data into the system -inbound) or a target (receiving data from the system -outbound).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Appropriate data sources are found for each of&amp;nbsp;the target data elements, and then rules are drafted to extract,&#xD;
    transform, and move the source to the target data element. Rules are developed for the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Data selection - rules describing the criteria by which data is to be selected&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Data cleansing - rules describing how the source data will be cleansed as it is extracted&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Error detection and correction - rules defining how missing or invalid data should be treated&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Data mapping - rules describing what must be done to the source data (transformation) to satisfy target data&#xD;
        requirements&#xD;
    &lt;/li>&#xD;
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
</xmi:XMI>
