<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-MTDa9hDhwuOA_IWtKEJfJA" name="val_class,_JkIwALXuEd-FofslSzycTA" guid="-MTDa9hDhwuOA_IWtKEJfJA" version="7.5.0">
  <sections xmi:id="_P-cjgOCMEd-aE9U0mRj03A" name="Design tests" guid="_P-cjgOCMEd-aE9U0mRj03A">
    <sectionDescription>Select a set of Test Cases to develop into detailed, executable Test Suite. Sketch an outline of the Test Suite as a&#xD;
logical sequence of steps. Review the data requirements of the Test Case, and determine if existing data sets are&#xD;
sufficient, or if you need to develop new test data for this Test Suite. Examine Supporting Requirements that apply to this&#xD;
Test Case, and note where they affect the expected results of a step. Develop a detailed, procedural Test Suite based on&#xD;
your design. Use a request-response style that declares an exact input, and expects an exact output.</sectionDescription>
  </sections>
  <sections xmi:id="_QyvuQOCMEd-aE9U0mRj03A" name="Execute tests" guid="_QyvuQOCMEd-aE9U0mRj03A">
    <sectionDescription>Select an implementation technique for this design. At a minimum, determine if the Test Suite will be manual or automated.&#xD;
If the Test Case is well understood, it's best to implement an automated Test Script without first writing a manual&#xD;
procedure. However, if the Test Case is new or novel, writing a manual Test Script can help validate the design of the test&#xD;
and aid collaboration with other team members.</sectionDescription>
  </sections>
  <sections xmi:id="_R2PyoOCMEd-aE9U0mRj03A" name="Validate class in isolation" guid="_R2PyoOCMEd-aE9U0mRj03A">
    <sectionDescription>Validate the class apart from the system. Ensure that the QoS requirements were achieved for the class as a result of the&#xD;
optimization. It is common to use specially created &quot;testing buddy&quot; classes, &quot;webifying&quot; your application to automatically&#xD;
create web pages to drive the execution, or use model-level debugging facilities to validate the class.</sectionDescription>
  </sections>
  <sections xmi:id="_TTOuAOCMEd-aE9U0mRj03A" name="Validate class in collaboration" guid="_TTOuAOCMEd-aE9U0mRj03A">
    <sectionDescription>Validate the system after re-connecting the class to its collaboration.&amp;nbsp; The design collaborations (collaborations&#xD;
made up of design classes) must also be able to replicate the use case sequences. In addition, the quality of service and&#xD;
other optimization concerns must also be met.</sectionDescription>
  </sections>
  <sections xmi:id="_U9B9YOCMEd-aE9U0mRj03A" name="Analyze and communicate test results" guid="_U9B9YOCMEd-aE9U0mRj03A">
    <sectionDescription>Analyze the results of the execution.&amp;nbsp; You should always document any defects that a test finds, and decide whether to&#xD;
immediately repair, deferred repair, or ignore deviations from the expected results.</sectionDescription>
  </sections>
  <purpose>The purpose of this task is to ensure that the proper system functionality remains and that the optimization goals have&#xD;
been met after the optimization was performed.</purpose>
</org.eclipse.epf.uma:TaskDescription>
