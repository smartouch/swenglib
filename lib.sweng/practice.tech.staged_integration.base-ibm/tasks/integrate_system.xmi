<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_2OXh9NnmEdmO6L4XMImrsA" name="integrate_system,{3233A207-6271-4492-A8BF-64E1D89D6C5E}" guid="_2OXh9NnmEdmO6L4XMImrsA" changeDate="2005-11-04T07:38:42.773-0800" version="7.1.0">
  <sections xmi:id="_Vaj4MNnnEdmO6L4XMImrsA" name=" Accept Subsystems and Produce Intermediate Builds " guid="_Vaj4MNnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;Accept Subsystems and Produce Intermediate Builds&quot; name=&quot;Accept Subsystems and Produce Intermediate Builds&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    When this task begins, implementation subsystems have been delivered to satisfy the requirements of the next (the&#xD;
    'target') build described in the&amp;nbsp;&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.tech.common.extend_supp-ibm/workproducts/build_procedures_F7BCB948.html&quot;&#xD;
    guid=&quot;mweb5B766B6F521FF03C852568820059E222&quot;>Build Procedures&lt;/a>, recalling that plans may define the need for several&#xD;
    builds in an iteration. Depending on the complexity and number of subsystems to be integrated, it is often more&#xD;
    efficient to produce the target build in a number of steps, adding more subsystems with each step, and producing a&#xD;
    series of intermediate 'mini' builds - thus, each build planned for an iteration may, in turn, have its own sequence of&#xD;
    transient intermediate builds. These are subjected to a minimal integration test (usually a subset of the tests&#xD;
    described for this target build) to ensure that what is added is compatible with what already exists in the system&#xD;
    integration workspace. It should be easier to isolate and diagnose problems using this approach.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The integrator accepts delivered subsystems incrementally into the system integration workspace, in the process&#xD;
    resolving any merge conflicts.&amp;nbsp;It is recommended that this be done bottom-up with respect to the layered&#xD;
    structure, making sure that the versions of the subsystems are consistent, taking imports into consideration. The&#xD;
    increment of subsystems is compiled and linked into an intermediate build, which is then provided to the tester to&#xD;
    execute a minimal system integration test.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturelarge&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;172&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/ac_intsy.gif&quot; width=&quot;501&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot; align=&quot;left&quot;>&#xD;
    This diagram shows a build produced in three increments. Some subsystems are only needed as stubs, to make it possible&#xD;
    to compile and link the other subsystems, and provide the essential minimal run-time behavior.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;left&quot;>&#xD;
    The final increment of a sequence produces the target build. When this has been minimally tested, an initial or&#xD;
    provisional baseline is created for this build. The build is now made available to the tester for complete system&#xD;
    testing.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_bLwhgEz4EdqvZ80lhu0DBw" name="Promote Baselines " guid="_bLwhgEz4EdqvZ80lhu0DBw">
    <sectionDescription>As a build passes various levels of test, the associated baselines are promoted accordingly. This is done by invoking the&#xD;
promote baseline procedures, typically defined as part of Configuration Management procedures. Promotion is a means of&#xD;
marking baselines as having passed or failed a certain level of testing. The names of the promotion levels are defined by&#xD;
project configuration policies. The promotion levels are important to consumers of the baseline: for example, an&#xD;
implementer will want to know that a baseline is stable and tested before updating (or 'rebaselining') a private&#xD;
development workspace to be consistent with a baseline in the system integration workspace.</sectionDescription>
  </sections>
</org.eclipse.epf.uma:TaskDescription>
