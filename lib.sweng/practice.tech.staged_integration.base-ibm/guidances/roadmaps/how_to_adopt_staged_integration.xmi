<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-h9oX94cdRpLHUQRl6ricmg" name="new_roadmap,_z093UOQVEdyy8NdG6HqqRA" guid="-h9oX94cdRpLHUQRl6ricmg" changeDate="2011-08-05T12:03:32.953-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Getting&amp;nbsp;Started:&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The ultimate goal of integration is to minimize the time between injecting a change into the code base&amp;nbsp;and&#xD;
    creating a working build that includes that change.&amp;nbsp;The ideal is to perform continuous integration.&amp;nbsp;However,&#xD;
    as systems become larger and components are developed by separate subteams, it becomes necessary to introduce staged&#xD;
    integration.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Staged integration requires coordination between components and component teams.&amp;nbsp;If your system is complicated&#xD;
    enough to require a staged integration approach, then you will typically require a dedicated person or team to be&#xD;
    responsible for this coordination.&amp;nbsp;In order to allow the system build to compile and&amp;nbsp;evolve to include&#xD;
    increasing levels of functionality, the integrators need to understand&amp;nbsp;the following: the architecture of&amp;nbsp;the&#xD;
    system,&amp;nbsp;the dependencies between components, and the sequence of development.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Developer practices&#xD;
&lt;/h4>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Make changes available frequently.&lt;/b> For integration to be effective, component teams&amp;nbsp;need to regularly&#xD;
        qualify subsystem builds and make them available for&amp;nbsp;higher level integration. Keep&amp;nbsp;&lt;a&#xD;
        class=&quot;elementLinkwithUsertext&quot;&#xD;
        href=&quot;./../../../core.mgmt.common.extend_supp/guidances/concepts/change_set_430BF233.html&quot;&#xD;
        guid=&quot;_1QU9MAIoEdyLh7vsrHZ4YA&quot;>change set&lt;/a>s small, complete, cohesive, and available for integration,&amp;nbsp;so&#xD;
        that they can be completed and tested in a relatively short time span.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Don't break the build.&lt;/b> Coordinate changes so that system builds evolve, rather than break and have to be&#xD;
        fixed.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Fix broken builds immediately.&lt;/b> When a problem is identified, fix it as soon as possible, while it is still&#xD;
        fresh in your mind. If the problem cannot be quickly resolved, back out (do not complete) the changes.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Integration practices&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A build is more than a compile (compilation). A build consists of compilation, testing, inspection, and deployment.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Provide feedback&lt;/b> as quickly as possible.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Automate the build process&lt;/b> so that it is fast and repeatable and so that issues are identified and conveyed&#xD;
        to the appropriate person for resolution as quickly as possible.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Automation&#xD;
&lt;/h4>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Commit your test scripts&lt;/strong> to the CM repository so they are controlled and available to the rest of&#xD;
        the team. Automated testing is highly recommended, both for developer tests and integration tests. Tests need to be&#xD;
        repeatable and fast.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Commit your build scripts&lt;/strong> to the CM repository so they are controlled and available to the rest of&#xD;
        the team. Automated builds are highly recommended, both for private builds and integration builds. Builds need to&#xD;
        be repeatable and fast.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Common pitfalls&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>A build process that doesn't identify problems.&lt;/b> A build is more that a simple compilation (or its dynamic&#xD;
        language variations). Adopt sound testing and inspection practices, both at developer testing and integration&#xD;
        testing levels, so to ensure the right amount of coverage.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Integration builds that take too long to complete.&lt;/b> The build process must balance coverage with speed. You&#xD;
        don't have to run every system level acceptance test to meet the intent of continuous integration. Use staged&#xD;
        builds&amp;nbsp;to provide a useful means to organize testing to get the balance coverage and speed.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Change sets that are too large.&lt;/b> Developers must develop the discipline and skills to organize their work&#xD;
        into small, cohesive change sets. This will simplify testing, debugging, and reporting. It will also ensure that&#xD;
        changes are made available frequently enough to meet the intention of continuous integration.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Failure to commit defects to the CM repository.&lt;/b> Ensure adequate testing by developers before making change&#xD;
        sets available.&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
