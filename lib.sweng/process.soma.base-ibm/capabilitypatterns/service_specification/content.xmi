<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1">
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-dtFozi6TeFj7uRx28VdWkg" name="Service Specification,_eeSNYZm3Ed6wYer5xLEQPw" guid="-dtFozi6TeFj7uRx28VdWkg" version="7.5.0"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-BHvpdG1Mp5ObkCEBHER1Uw" name="perform_subsystem_analysis,_k9gTkK0_Ed6PI4QTZDl88Q" guid="-BHvpdG1Mp5ObkCEBHER1Uw">
    <refinedDescription>&lt;p>&#xD;
    Subsystem analysis establishes traceability from business &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../core.bus.common.extend-ibm/guidances/concepts/functional_area_analysis_9B1F96D5.html&quot; guid=&quot;_fk1woEo1Ed6D_7XK49c0nw&quot;>functional areas&lt;/a> to the &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/design_subsystem_47086B8E.html&quot; guid=&quot;_5inEwEo2Ed6D_7XK49c0nw&quot;>IT subsystems&lt;/a> that support each such area.&amp;nbsp;&amp;nbsp;This process  prepares for detailed&#xD;
    design by building understandings of the dependencies between the IT subsystems.&amp;nbsp; Finally, you make initial&#xD;
    decisions regarding which detailed components will be involved in realizing each service in the service&#xD;
    model.&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This task marks the beginning of the transition from service solution specification into service realization design --&#xD;
    that is, identification and design of the components that underpin the services.&amp;nbsp; Prior to this point, you have&#xD;
    finished the &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../core.tech.common.extend_supp_soa-ibm/workproducts/service_model_B9A1BF81.html&quot; guid=&quot;_IgcA4Eo1Ed6D_7XK49c0nw&quot;>service&#xD;
    model&lt;/a>.&amp;nbsp; Now, begin focusing on&amp;nbsp;component-based design.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The steps of this task are not necessarily performed in sequence -- and, sometimes, they need to be performed in&#xD;
    concert with steps in other tasks.&amp;nbsp; For example, it is likely that some&amp;nbsp;dependencies between subsystems will&#xD;
    be discovered during the&amp;nbsp;&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../practice.tech.soma.service_specification.base-ibm/tasks/perform_component_specification_327DBD42.html&quot; guid=&quot;_MPsycHq9Ed6TH_N7AhVgiA&quot;>component specification task&lt;/a>.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-CYWFlFSGpr9kg3em5_u8oQ" name="functional_area_model,_k9zOg60_Ed6PI4QTZDl88Q" guid="-CYWFlFSGpr9kg3em5_u8oQ">
    <refinedDescription>The Functional Area Model is a representation of the functional structure of the business, in terms of business domains,&#xD;
functional areas, and business services.&amp;nbsp; See &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../core.bus.common.extend-ibm/guidances/concepts/functional_area_analysis_9B1F96D5.html&quot; guid=&quot;_fk1woEo1Ed6D_7XK49c0nw&quot;>Concept: Functional Area Analysis&lt;/a>&amp;nbsp;for more details.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-ydZk5VRidtEvRifW9Jc2dA" name="component_model,_k9zOhK0_Ed6PI4QTZDl88Q" guid="-ydZk5VRidtEvRifW9Jc2dA">
    <keyConsiderations>&lt;p>&#xD;
    Points to consider when deciding whether to use a Component Model:&lt;br />&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A Component Model is useful when you must design the system for multiple target environments, with separate design&#xD;
        architectures. The Component Model is an abstraction, or a generalization, of the system design. It omits most of&#xD;
        the details of the design in order to provide an overview of the system's functionality.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The Component Model provides value when the design is complex, such that new team members need a simplified,&#xD;
        abstracted model to understand it. A well-defined architecture can serve the same purpose.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Balance the extra work required to ensure that the component and design models remain consistent against the&#xD;
        benefit of having a view of the system that represents only the most important details of how the system works. It&#xD;
        can be very costly to maintain a high degree of fidelity between the Component Model and the system design. A less&#xD;
        ambitious approach might be to maintain the Component Model with only the most important components and the key&#xD;
        abstractions in the design. As the complexity of the Component Model increases, so does the cost to maintain it.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Once you no longer maintain the Component Model, its value decays rapidly. At some point, it no longer accurately&#xD;
        reflects the current functional design of the system. Deciding to no longer maintain the Component Model may be&#xD;
        appropriate, as it may have served its purpose, but the decision should be a conscious one.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Component models tend to be useful in companies where systems live for decades, or where there are many variants of the&#xD;
    system.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To ensure the successful development of a component model on a project, your team should:&lt;br />&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Create a stable and coherent structure&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Focus on the right levels of abstraction&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Develop relationship and interaction diagrams in parallel&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select architecturally significant requirements as inputs to the Component Model&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Plan how your team will leverage the Component Model throughout the project lifecycle&#xD;
    &lt;/li>&#xD;
&lt;/ul></keyConsiderations>
    <refinedDescription>&lt;p>&#xD;
    The component model describes the structure of a system in terms of its software components with their&#xD;
    responsibilities, interfaces, relationships, and the way they collaborate to deliver the required functionality. The&#xD;
    component model is the main artifact documenting the functional view of the architecture and serves as an abstraction&#xD;
    of the design. Components identified may be decomposed into further component models before they complete the&#xD;
    specification required for detailed design.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Component models help define and document:&lt;br />&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The structure of the system&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The recurring interactions and dependencies between sets of components&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The components present within an enterprise, each of which may be made up of smaller components.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Component models are documented at 2 levels:&lt;br />&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The logical level - focuses on specifying the components' responsibilities and characteristics required to deliver&#xD;
        the requirements. These specifications are technology and product neutral.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The physical level -focuses on how to implement the components to meet the previously established specifications.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    You may transform logical components into physical components via custom development, the purchase of products, or the&#xD;
    reuse of assets.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It may be important to maintain a separation between logical and physical components on larger projects. However,&#xD;
    smaller or less complex projects may evolve a single logical component model into a physical model, and end up with&#xD;
    only a physical model.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Examples of components at the logical level are a 'Message Bus' or a 'Customer Relationship Manager' component.&#xD;
    Components at the physical level that implement these logical components might be 'IBM WebSphere Message Broker' or&#xD;
    'Siebel Contact Center.'&lt;br />&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-o3BSvoOAB6Kc7PbPboju4g" name="perform_component_specification,_s9ELIK0_Ed6PI4QTZDl88Q" guid="-o3BSvoOAB6Kc7PbPboju4g">
    <refinedDescription>&lt;p>&#xD;
    This task uses conventional component design approaches to describe how &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_component_54F50804.html&quot; guid=&quot;_Gcmp8GZaEd65K8S2sWS35w&quot;>service components&lt;/a> realize the services that have been allocated to them.&amp;nbsp;&#xD;
    After this task is completed, you have the following results:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The operations and attributes of each &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/functional_component_595EAFE6.html&quot; guid=&quot;_Ocmr0GWpEd6Zd-lbA790BQ&quot;>functional component&lt;/a> and each &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/technical_component_D89DA554.html&quot; guid=&quot;_RjrxgGWpEd6Zd-lbA790BQ&quot;>technical component&lt;/a> that support the service component have been defined&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The relationships between the functional and technical components have been defined&#xD;
  &lt;/li>&#xD;
    &lt;li>&#xD;
        The interactions between the functional and technical components, which realize each service component operation,&#xD;
        have been described&#xD;
    &lt;/li>&#xD;
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-geQGEJzDJ9cG99CJOd5dGQ" name="component_design,_s9XGEK0_Ed6PI4QTZDl88Q" guid="-geQGEJzDJ9cG99CJOd5dGQ">
    <keyConsiderations>&lt;p>&#xD;
    In circumstances where the design of a component involves applying well understood, existing strategies, it is possible&#xD;
    that you will not need a &lt;em>new&lt;/em> design. In those cases, you can simply refer to some existing design.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Decide on the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Properties to include&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Whether or not any extensions to the Unified Modeling Language (UML) are needed; for example, your project may&#xD;
        require additional stereotypes&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The level of formality applied to the model&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If the model is mapped to other models, such as an architectural models and how&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Whether a single model or multiple models will be used&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        How the model is mapped to an implementation model (this is very much affected by the decision to use&#xD;
        reverse-engineering, code generation, or round-trip engineering); see Concept: Mapping from Code to Design&#xD;
    &lt;/li>&#xD;
&lt;/ul></keyConsiderations>
    <refinedDescription>&lt;p>&#xD;
    This artifact is a specification of the internal structure and behavior of one or more major structural elements&#xD;
    (components) of a system.&amp;nbsp; Each component realization describes the internal behaviors of a component that realize&#xD;
    its interfaces.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-FVKN_s5Cx9v7Q3EJGq-fPw" name="identify_security_patterns,_wxJgwK0_Ed6PI4QTZDl88Q" guid="-FVKN_s5Cx9v7Q3EJGq-fPw">
    <refinedDescription>&lt;p>&#xD;
    IT solutions are conduits to sensitive corporate and customer information.&amp;nbsp; Here, the security architect&#xD;
    identifies likely threats and documents requirements for mitigating the threats.&amp;nbsp; He identifies high-level&#xD;
    security patterns appropriate to attach to architectural elements in response to security requirements and policies.&#xD;
    These patterns are then refined with detailed patterns appropriate to particular technology and platform choices by&#xD;
    down-stream design and implementation tasks.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-H-SXBTPRJ3oiusdpOuaGPQ" name="apply_service_litmus_test,_Ln73sLFLEd69ivGsO9X4aw" guid="-H-SXBTPRJ3oiusdpOuaGPQ">
    <keyConsiderations>&lt;p>&#xD;
    Application of service litmus tests is an iterative process. Early in the project, make decisions&amp;nbsp;based on current&#xD;
    knowledge. Revisit service litmus tests&amp;nbsp;as more information is obtained throughout the design process.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Apply and review service litmus tests for each candidate service with the appropriate Subject Matter Experts or&#xD;
    Stakeholders.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Reviewing results of the service litmus tests&amp;nbsp;is a useful way to track the appropriateness of the criteria and&#xD;
    service granularity. For example, if too many candidate services are passing a particular test, that test definition&#xD;
    might be too broad or the service level granularity might not&amp;nbsp;be appropriate.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A service might fail one or more of the service litmus tests but might still be exposed due to some project specific&#xD;
    decision (business or IT). This is acceptable. There might be an architectural or business decision made to expose a&#xD;
    service despite the service litmus tests.&#xD;
&lt;/p></keyConsiderations>
    <refinedDescription>&lt;p>&#xD;
    A service identification effort can create a large number of &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/candidate_service_277B23D6.html&quot; guid=&quot;_R5GZYEo1Ed6D_7XK49c0nw&quot;>candidate services&lt;/a> for service exposure.&amp;nbsp; However, it most likely will not be&#xD;
    appropriate -- due to business fit, available resources, or technical concerns -- to invest in exposing all of the&#xD;
    identified candidates.&amp;nbsp; &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../practice.tech.soma.service_specification.base-ibm/guidances/concepts/service_litmus_tests_8CE8505D.html&quot; guid=&quot;_dXhFEIkNEd6ilu16R-rAlg&quot;>Service Litmus Testing&lt;/a> is a procedure for filtering the candidates down to the core&#xD;
    set of services that are most worthy of additional investment at the current time.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The first five steps  described below map to litmus testing criteria that has proven valuable in prior engagements.&amp;nbsp; Each criterion is to be applied to each candidate service that is in your &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/candidate_services_portfolio_A1269E3C.html&quot; guid=&quot;_YDPAYEo1Ed6D_7XK49c0nw&quot;>Candidate Service Portfolio&lt;/a> (this can simply be part of your service model).&amp;nbsp;&#xD;
    Feel free to experiment with this list, to either subtract certain steps or to add your own.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In this task, the work product slot of [Business Design] is filled by the Business&amp;nbsp;Model work product, which&#xD;
    contains business process descriptions.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-PzFoyrNP0qDp0tRqoVY28g" name="business_goal,_LrqhIbFLEd69ivGsO9X4aw" guid="-PzFoyrNP0qDp0tRqoVY28g">
    <refinedDescription>&lt;p>&#xD;
    Business goals describe specific things that are important for the business to achieve. High level goals can be&#xD;
    decomposed into sub-goals that become increasingly narrower in scope and definition. KPIs are associated with each goal&#xD;
    and sub-goal to identify what managers of a company look at to determine the degree of success or organizational&#xD;
    performance relative to business goals. Metrics associated with each KPI are individual features that can be measured&#xD;
    to support the assessment of KPIs.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The taxonomy is therefore:&#xD;
&lt;/p>&#xD;
&lt;ul class=&quot;noindent&quot;>&#xD;
    &lt;li>&#xD;
        High level business goals&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Sub-goals decomposed from the high level business goals&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Key Performance Indicators (KPIs) associated with each goal and sub-goal&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Metrics associated with each KPI that can be used to identify what measurements need to be captured and analyzed to&#xD;
        assess whether goals are being met&#xD;
    &lt;/li>&#xD;
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-lc91DeyrbkecAzdn9FH8iQ" name="architectural_decisions,_CHbmoKDhEd-qJpwHlLqo6g" guid="-lc91DeyrbkecAzdn9FH8iQ">
    <keyConsiderations>&lt;p>&#xD;
    Some important considerations for making and implementing architectural decisions:&lt;br />&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Make sure the process for making decisions has the right level of sponsorship necessary to enforce those decisions&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Make architecturally significant decisions early and be sure to validate high risk decisions using an executable&#xD;
        architecture&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Review and update architectural decisions as development progresses and update this artifact so it reflects any&#xD;
        changes to your decisions&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It is not necessary to document every minute decision you make when developing the architecture; focus on those&#xD;
        that are controversial or are based on reasoning that is not obvious&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul></keyConsiderations>
    <refinedDescription>&lt;p>&#xD;
    This artifact documents key architectural decisions and the rationale behind those decisions.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-W1_WWzOo2fuQOB9eEScufw" name="architecture_overview,_CILNgKDhEd-qJpwHlLqo6g" guid="-W1_WWzOo2fuQOB9eEScufw">
    <keyConsiderations>As communication is its main purpose, it is more important for the description of the architecture to be simple, brief,&#xD;
clear, and understandable than comprehensive or accurate in all details.</keyConsiderations>
    <refinedDescription>&lt;p>&#xD;
    This artifact provides an overview of the main conceptual elements and relationships of an architecture, which might&#xD;
    include candidate subsystems, components, nodes, connections, data stores, users and external systems. As such, it&#xD;
    represents the governing ideas and candidate building blocks of the architecture.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-1zE3HHfkdvusZY_mdxG-Cg" name="operational_model,_KuMBEKDhEd-qJpwHlLqo6g" guid="-1zE3HHfkdvusZY_mdxG-Cg">
    <keyConsiderations>&lt;h5>&#xD;
    Levels of this artifact&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    The artifact can be a large and complex work product.&amp;nbsp; It is therefore important to understand how it may be best&#xD;
    developed and presented, depending on the particular context.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In order to reduce the complexity of the development process, the various development techniques available take&#xD;
    advantage of a number of well-defined views and levels of completeness.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Therefore this artifact can be refined and elaborated in various ways depending on the nature of the project life cycle&#xD;
    and the development techniques used.&amp;nbsp; Useful intermediate stages of development have been defined for both the&#xD;
    &lt;strong>logical&lt;/strong> and &lt;strong>physical&lt;/strong> levels of this artifact as described within this artifact.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Degree of completeness (elaboration) and quality (refinement)&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Individual circumstances will dictate the degree of completeness (including omission) of each level of this&#xD;
    artifact.&amp;nbsp; Decisions on level of detail, focus and completeness will be based on many factors, such as&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Audience (e.g. business people, IT Architects, or Developers)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Purpose (is it to be fully specified and configured or a generalized reference pattern?)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Completeness (is it early in a project's life, or a finished artifact?)&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The degree of completeness reached (or required) will also be dependent on the development process (e.g. waterfall,&#xD;
    iterative, etc.).&amp;nbsp; The levels of this artifact elaborate through degrees of completeness towards their completed&#xD;
    states while remaining synchronized and consistent with one another at each major project &quot;milestone&quot;.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Varying depth of detail&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    As well describing the operational aspect of a complete IT system, it is often helpful to develop this artifact showing&#xD;
    greater detail for particular parts of the system.&amp;nbsp; For example:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        This artifact may model a whole IT system as one or two nodes on the overall model, but a further more detailed&#xD;
        representation of parts of the IT system in a particular location may also be constructed.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        This artifact may model a single part of an IT system in detail without modeling the whole IT system.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        This artifact may include the same &quot;recurring pattern&quot; of nodes and/or connections, and, in this case, a separate&#xD;
        artifact may detail the recurring pattern and be referenced by the main artifact.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h5>&#xD;
    Cross-cutting viewpoints&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    This artifact and the logical and physical levels of this artifact may be the focus of a particular viewpoint, at any&#xD;
    degree of elaboration and refinement, to address the concerns of a particular stakeholder. These cross-cutting&#xD;
    viewpoints overlap with one another.&amp;nbsp; For example, views may be constructed on this artifact for the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Application&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Technical&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Performance&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Capacity&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Availability and Recovery&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Security and Privacy Management&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Operability and Operations Management&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Systems Management&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Software Distribution and Installation&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Distributed Data Management&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Problem Identification and Management&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        End User Support/Helpdesk&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Networking&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Accessibility&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        National Language Support&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Financial proprietary&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Archiving&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Such filtering does not generally change the elements in the artifact rather it simply enables a clearer focus on some&#xD;
    particular part of it.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Please refer to &quot;An Introduction to the IBM Views and Viewpoints Framework for IT Systems&quot; Whitepaper for further&#xD;
    details on the views and viewpoints framework including the relationship between base and cross-cutting views.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Linkages to other work products&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    As well as a linkage via Deployment Units with the functional aspect of architecture as embodied in the Component&#xD;
    Model, this artifact has influences and/or is strongly interdependent on other areas that cover the design of the&#xD;
    infrastructure that will implement the operational aspect of architecture. For example:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Network Design: affects the application design, middleware selection, component placement, security and privacy,&#xD;
        systems management and overall operational system control.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Platform Design; the detailed design and configuration of the platforms that will implement the nodes.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Storage Design; the detailed design and configuration of storage which may be shared across multiple platforms.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Site &amp;amp; Facilities Design; the detailed design and configuration of the site and facilities in the locations in&#xD;
        which nodes (implemented by platforms) are placed.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Systems Management design; through its definition of how the IT system is spread out over locations and what&#xD;
        systems management components and nodes are needed at each location.&amp;nbsp; Selection of a systems management style&#xD;
        is an important decision, which determines: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                The cost of operations management&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                The cost of software distribution&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                The complexity of system management tooling&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Potential security and performance of the IT system (ability to satisfy the service level requirements)&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Existing or planned enterprise-wide IT infrastructure initiatives on which the target system will be&#xD;
        implemented.&amp;nbsp; For example, enterprise wide middleware decisions may well move function, which would otherwise&#xD;
        be duplicated across multiple applications, into a set of shared services, which are usually purchased or part of&#xD;
        an enterprise wide development effort.&#xD;
    &lt;/li>&#xD;
&lt;/ul></keyConsiderations>
    <refinedDescription>&lt;p>&#xD;
    This artifact describes the operational distribution of a system's components (which may be grouped into deployment&#xD;
    units) onto nodes, the placement of nodes and users across locations, the connections between nodes necessary to&#xD;
    support the required interactions between components, in order to achieve the system's functional and non-functional&#xD;
    requirements within the constraints of technology, skills and budget.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Operational Modeling Terminology&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    This artifact's (and that of its contained artifacts) terminology is defined within the System Description Standard R3&#xD;
    Semantic Specification (see Guidance for link) which includes definitions for the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Actors (and workers) - the roles a user or an external system play with respect to the target system&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Locations - a geographical area or position.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Borders - representing the existing connection between two locations&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Components - modular units of functionality, which make this functionality available through an interface.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Deployment Units - a grouping of facets of a component that have similar characteristics.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Connectors - enable the exchange of messages (interactions) between resource containers.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Interactions - identify the messages exchanged between one or two resource containers in the context of a&#xD;
        collaboration, and the sequencing of these messages via their associated send/receive events.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Nodes - a collection of components fulfilling a specific responsibility with a certain quality of service within&#xD;
        the target system.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Connections - supports the required connectivity between connectable model elements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Zones - an aggregation of a number of model elements with a common (sub-) set of values for a particular&#xD;
        non-functional requirement and/or non-functional characteristic.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Boundaries - associated with a change in value for a particular non-functional requirement and/or characteristic&#xD;
        between two model elements.&amp;nbsp;&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Depending on the development approach adopted and/or the context, it can be very helpful to create levels of this&#xD;
    artifact.&amp;nbsp; The two basic levels of this artifact are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Logical&lt;/strong>:&amp;nbsp; This level describes the characteristics and capabilities of the operational aspect&#xD;
        of the system architecture in a &lt;strong>technology independent and product neutral&lt;/strong> manner.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Physical&lt;/strong>:&amp;nbsp; This level describes characteristics and capabilities of the operational aspect of&#xD;
        the system architecture in a &lt;strong>technology and product dependent&lt;/strong> manner.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Both levels of this artifact may be further described at three different sub-levels relating to the degree to which the&#xD;
    level has been sized:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Unsized&lt;/strong> (or unranged) - the technology and products are specified to support the components&#xD;
        deployed but not sized and without detailing how the system will achieve the service level characteristics.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Ranged&lt;/strong> - the technology and products are specified to support a bounded range of requirements for&#xD;
        a defined range of circumstances.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Sized&lt;/strong> - the technology and products are specified and sized to support the components deployed and&#xD;
        details how the system will achieve the service level characteristics.&#xD;
    &lt;/li>&#xD;
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-n1aidgE2mxYvAB0VAy9Wfg" name="component_specification,_pLKQYazsEeCJ-7p1IAy8Iw" guid="-n1aidgE2mxYvAB0VAy9Wfg">
    <keyConsiderations>&lt;p>&#xD;
    Points to consider when deciding whether to use a Component Specification:&lt;br />&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The Component Specification provides value when the architecture is complex, such that new team members need a&#xD;
        simplified, abstracted model to understand it.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The extra work required to ensure that the Component Specification and Executable Architecture remain consistent&#xD;
        must be balanced against the benefit of having a view of the system that represents only the most important details&#xD;
        of how the system works. It can be very costly to maintain a high degree of fidelity between the Component&#xD;
        Specification and Executable Architecture. As the complexity of the Component Specification increases, so does the&#xD;
        cost to maintain it.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Once you no longer maintain the Component Specification, its value decays rapidly. At some point, it will no longer&#xD;
        accurately reflect the Executable Architecture. Deciding to no longer maintain the Component Specification may be&#xD;
        appropriate (it may have served its purpose), but the decision should be a conscious one.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Component Specifications tend to be useful in companies where systems live for decades, or where there are many&#xD;
    variants of the system.&lt;br />&#xD;
&lt;/p></keyConsiderations>
    <refinedDescription>&lt;p>&#xD;
    This artifact specifies the details of a component identified in the Component Model. The specification shows the&#xD;
    interfaces offered and used by the component, identifies where business rules are placed, and details the operations&#xD;
    and their signatures for each interface.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Component Interfaces&lt;/strong> - An interface specifies one or more operation signatures and is both offered and&#xD;
    used by a component. Offering an interface means the component makes the interface available for other components to&#xD;
    use.&amp;nbsp;&amp;nbsp;Each interface provides a unique and well-defined set of operations. Hiding the structure of a&#xD;
    component and its data behind an interface allows that data to be changed without affecting how the interface is&#xD;
    used.&amp;nbsp; The actual composition of that data may change, but the interface that provides access to that data is&#xD;
    fixed. Interfaces also describe the state of a component.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Business Rules&lt;/strong> - Business Rules dictate the behavior of a system, and the component specification&#xD;
    defines how the system implements the business rules.&amp;nbsp; For example, a business rule may state that Internet&#xD;
    transactions for an on-line order can not exceed $1000 for a given account. A component that manages account&#xD;
    transactions may define an on-line transactions interface that implements this business rule.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Operations&lt;/strong> - Fully specified Component Specifications assign operations and operation signatures to&#xD;
    the interfaces and may define pre- and post-conditions on the operations.&amp;nbsp; Pre- and post-conditions specify the&#xD;
    effect of an operation without prescribing an algorithm or implementation.&amp;nbsp;A post-condition specifies the effect&#xD;
    of the operation on the components data or state.&amp;nbsp;A pre-condition is the condition under which the operation&#xD;
    guarantees that the post-condition is true.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
</xmi:XMI>
