<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="_GbYkMN36EdmAuujzfxByGA" name="reusable_asset_specification,1.1032898096431317E-305" guid="_GbYkMN36EdmAuujzfxByGA" changeDate="2011-07-27T14:59:23.343-0700" version="1.0.0">
  <mainDescription>&lt;h3>&#xD;
    Reusable Asset Specification (RAS)&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This is an OMG standard that was jointly produced with multiple companies. RAS describes the structure of information&#xD;
    about an asset, and is generally captured in XMI/XML.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    There are many kinds of software development artifacts in many forms, and from many authors with varying styles. This&#xD;
    increases the costs of discovering, comprehending, and reusing other authors' artifacts. Providing consistent artifact&#xD;
    organization, structure, description, and packaging mitigates some of these costs through consistency and&#xD;
    predictability.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Reusable Asset Specification (RAS) describes an extensible way to organize software artifacts into assets for&#xD;
    future reuse.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Additional information on RAS can be found at IBM developerWorks (&lt;a&#xD;
    href=&quot;http://www-130.ibm.com/developerworks/&quot;>http://www-130.ibm.com/developerworks/&lt;/a>).&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    RAS Key Concepts&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    An asset is a collection of artifacts&amp;nbsp;that provides a solution in one or more contexts, and which has variability&#xD;
    points, or customization points, and instructions for usage. The asset may have relationships to other assets as well.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The asset is further described using meta-data, which provides some of the asset's packaging. There are several major&#xD;
    sections specifying the asset including some main asset attributes such as the name, and version, and&#xD;
    description.&amp;nbsp;In addition,&amp;nbsp;the asset can be classified through simple name and value descriptors and through&#xD;
    the declaration of contexts, such as a specific development or deployment context, and so on. The asset has a payload&#xD;
    which is the collection of artifacts providing a solution. These artifacts may have instructions for proper usage, and&#xD;
    the asset can have a relationship to other assets. These elements describing the asset are capturing in XML, and serve&#xD;
    as a manifest for the asset.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To support varying degrees of reuse formalities and process maturity in organizations, the sections described above for&#xD;
    specifying an asset are largely optional. This means that even though RAS supports a broad, and possibly deep structure&#xD;
    for specifying assets, only a few items are actually required. Required items include the asset's name and id, and the&#xD;
    declaration of the asset type. Otherwise, all the other elements are considered optional, and support an evolutionary&#xD;
    strategy to conducting asset-based development activities in your organization.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Just as there are many types of artifacts, there are many types of assets, with&amp;nbsp;each type represented by a&#xD;
    different RAS profile. As defined earlier, one asset may comprise many artifacts. The asset type is extensible to&#xD;
    support customization for your particular needs. Your organization may define the contents of a component to be&#xD;
    different than what another organization may do. This is accomplished through profiles, wherein the core structure of&#xD;
    RAS is preserved but through which it may be extended.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The manifest file and artifacts combine to form the asset. The asset may be physically combined into a single file,&#xD;
    such as a .ras file, which is Zip file format, or it may be unbundled. In both cases, the manifest file points to the&#xD;
    relative location of all the artifacts&amp;nbsp;that comprise the asset, regardless of the physical composition of the&#xD;
    asset.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The remainder of this page describes these concepts in further detail.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    RAS Profiles&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A RAS profile describes the asset's type. RAS profiles are expressed as XML Schema files. Some organizations create&#xD;
    their own profiles. IBM has produced multiple profiles, including the RAS Default Profile.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When an asset is created, an XML file is produced that is based on one of these schemas, or perhaps based on a custom&#xD;
    profile that your organization has created.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The RAS Default Profile can be used to represent assets of any type. In practice, you may want to use this profile to&#xD;
    do some initial asset packaging, and then&amp;nbsp;determine any additions you may deem necessary. For information on how&#xD;
    to define new RAS profiles, see &lt;a&#xD;
    href=&quot;./../../../practice.mgmt.asset_based_dev.base-ibm/guidances/guidelines/extending_the_reusable_asset_specification_1E6BFA5F.html&quot;&#xD;
     guid=&quot;9.326103840370738E-306&quot;>Guideline: Extending the Reusable Asset Specification&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    RAS Manifest File&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    There is one manifest file (an XML file) that is produced for each asset. The manifest file is an instance of the RAS&#xD;
    profile XML schema file. Depending on your packaging strategy you may call these the same name, such as rasset.xml, or&#xD;
    you may call the files something unique for each asset. RAS doesn't specify the naming strategy for these files.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Search engines and repositories can use the manifest file to discover the contents of an asset, its classification, its&#xD;
    related assets, and so on. The manifest file may be included in an installation wizard, stored in a library with other&#xD;
    assets, or included in a development environment. See the next section, &lt;a href=&quot;#RASArchiveFile&quot;>RAS Archive File&lt;/a>&#xD;
    for more information on where the manifest should reside when an archive file is used.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    RAS Archive File&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The archive file is the file in which the asset is deployed. It is an archive of the asset directories and&#xD;
    artifacts&amp;nbsp;that contains the asset &lt;a href=&quot;#RASManifestFile&quot;>manifest file&lt;/a> as well as the asset's contents&#xD;
    zipped into a single file with a .ras extension.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When an archive file is used, the manifest file is placed in the asset's root directory, above the sub-directories of&#xD;
    artifacts (in other words, at the top of the archive). All other artifacts are then placed in the proper sub-directory,&#xD;
    and the RAS Manifest file should have the proper reference to those artifacts.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When an archive file is not used, the manifest file may be placed in any location, and may point to artifacts just&#xD;
    about anywhere.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    RAS Structure&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    There are several sections for specifying an asset, as shown in the following image, major schema nodes for the RAS&#xD;
    Default profile, version 2.2.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;Specifying an asset: classification, solution, usage, related assets.&quot; src=&quot;./resources/ras_overview.gif&quot;&#xD;
    width=&quot;514&quot; height=&quot;105&quot; />&#xD;
&lt;/p>&lt;br />&#xD;
&lt;h4>&#xD;
    Asset Node&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The asset node includes the following attributes:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Name&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        ID&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Date&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        State&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Version&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Access Rights&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The asset description is captured in the description node, which is a child to the asset node.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Profile&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    As described in the &lt;a href=&quot;#RASProfiles&quot;>RAS Profiles&lt;/a> section, a RAS profile specifies a particular type of&#xD;
    asset. This includes identifying the kinds of artifacts that should be in an asset, as well as how the asset should be&#xD;
    classified and used. For more information on asset types, see &lt;a&#xD;
    href=&quot;./../../../practice.mgmt.asset_based_dev.base-ibm/guidances/concepts/reusable_asset_DFDAA7EF.html&quot;&#xD;
    guid=&quot;2.7928382150685155E-305&quot;>Concept: Reusable Asset&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The profile section describes the asset type. The asset's type history can also be tracked. This means that if your&#xD;
    organization creates a custom profile, they will identify which RAS profile your custom profile derived from. This&#xD;
    lineage is stored with the schema and goes along with the asset. One benefit of this is that tools may pick up an asset&#xD;
    from other sources, and determine the ancestry of the schema that is used to represent, and deal appropriately, with&#xD;
    the asset. This information may be useful to the Asset Consumer in helping them understand the asset.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The profile node has the following attributes:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Name&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        ID History&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Version Major&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Version Minor&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Reference&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Classification&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The classification of an asset includes both context entries and descriptors.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;em>Context entries&lt;/em> describe the intended environment that the asset is expecting to be applied within. This&#xD;
    includes contexts such as development context, deployment context, or business domain context. A key point about&#xD;
    context entries is that they have an id, and that&amp;nbsp;this id can be referenced if you are describing the tasks for&#xD;
    installing an asset for a particular context.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Some possible contexts to consider capturing values in an asset include the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;i>Deployment Context&lt;/i>: Identifies the servers and runtime environment for which the asset is intended, such&#xD;
            as &lt;em>WebSphere&lt;/em>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;i>Development Context&lt;/i>: Identifies the development environment in which the asset is intended to be&#xD;
            developed or extended&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;i>Domain Context&lt;/i>: Identifies the business domain of the asset such as &lt;em>Insurance&lt;/em>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;i>Reuse Scope Context&lt;/i>: Identifies organizationally where the asset is intended to be reused, such as,&#xD;
            project team, department, and enterprise.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;i>Test Context&lt;/i>: Identifies the contexts in which the asset should be tested, such as &lt;em>load test&lt;/em>,&#xD;
            &lt;em>performance test&lt;/em>, and &lt;em>functional test&lt;/em>.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Example of a development context: Development tools and environment: WebSphere, XDE for Java Release 2, jdk 1.4, Win&#xD;
    2K, etc.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;i>Descriptors&lt;/i> are name/value pairs that provide general classification. Classification descriptors may be defined&#xD;
    that are organization- or project-specific, or they may reflect very specific elements from an industry classification&#xD;
    schema. They may contain values that are very general to very specific. For example, a descriptor may be a name/value&#xD;
    pair of {keyword, web development}, or it may be more verbose such as {problem solved, deriving common structures for&#xD;
    J2EE online applications and codifying them in architectural mechanisms and frameworks}. The asset classification&#xD;
    descriptors that can be used for a project or organization should be documented in the reuse guidelines defined for&#xD;
    that project or organization.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The complexity of an asset partially determines its ease of usability, and thus it&amp;nbsp;is a very important piece of&#xD;
    information to potential consumers of the asset. Therefore, metrics can be gathered and stored as part of the&#xD;
    classification documentation of the asset.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There are no agreed upon metrics that quantify the complexity of an asset. However, the following can be used as&#xD;
    indicators of an asset's complexity (some call these &quot;reusability metrics&quot;):&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The McCabe Cyclomatic Complexity metric&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The number of dependencies the asset has on external elements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The number of steps the user must follow in order to install and customize the asset&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The number of variability points&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The number of lines of code&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The quality of the documentation&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Feedback received from users that have applied (or attempted to apply) the asset&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The measurements of some of these items can be automated such as complexity metrics, lines of code, etc. Other items&#xD;
    must be measured manually such as asset dependencies, tasks to install and customize, documentation size and quality.&#xD;
    In any case, these metrics are generally gathered after the asset artifacts have been harvested.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Solution&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    This section describe's the asset's payload (i.e., the solution that the asset's artifacts provide to a problem). The&#xD;
    documentation in this section should focus more on the nature of the solution that the asset provides and less on how&#xD;
    to use the asset which is covered by the &lt;a href=&quot;#Usage&quot;>Usage&lt;/a> section. For the purpose of external documentation&#xD;
    then, the description of the solution should be to support the scenarios of asset searching, browsing, and consumption.&#xD;
    Certainly not all artifacts need to be listed in the documentation for these purposes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This section contains the set of artifacts that comprise the asset's payload (i.e., the solution that the asset's&#xD;
    artifacts provide to a problem). We recommend organizing the artifacts according to the RUP work product sets if you&#xD;
    are using the Default Profile. Other profiles may require a different organization. In the RAS Default Profile version&#xD;
    2.0, the solution node has many artifacts. For each artifact, the following set of attributes can be captured:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Name&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Type&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Reference&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        ID&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Version&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Digest Name&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Digest Value&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Access Rights&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Within the solution node is the artifact node, which is used to reference the artifacts in an asset such as source code&#xD;
    files, models, test scripts, and so on. There are several child nodes under the artifact node, one in particular is the&#xD;
    variability point. This allows the asset producer (i.e., asset artifact developer or asset packager) to identify the&#xD;
    locations within a artifact&amp;nbsp;that should be customized or modified in some way by the asset consumer.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Usage&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In this section the instructions for using the asset are provided. The instructions should describe how to use the&#xD;
    asset for the different contexts listed in the &lt;a href=&quot;#Classification&quot;>Classification&lt;/a> section. There may also be&#xD;
    instructions for specific artifacts listed in the &lt;a href=&quot;#Solution&quot;>Solution&lt;/a> section.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The usage section should also include instructions for providing values for the artifacts variability points.&#xD;
    Variability points differ based on the type of artifacts. For example, you might have a use case document in the asset&#xD;
    and it could contain one or more variability points in the document wherein the Asset Consumer needs to provide the&#xD;
    name of the project, and the name of some actors, and so on. Whereas, another artifact in the same asset, such as a&#xD;
    model might have some variability points wherein one or more classes must be extended.&amp;nbsp;In addition,&amp;nbsp;in the&#xD;
    same asset, some source code might have some variability points wherein the Asset Consumer must make some modifications&#xD;
    for the target environment.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The usage section can dramatically lower the cost of reuse by providing sufficient guidance on applying and customizing&#xD;
    the asset.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the RAS, task nodes are used to describe the steps to install and customize an asset. There are three kinds of task&#xD;
    nodes:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        The &lt;i>asset-task&lt;/i> node describes a task for the asset in general.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;em>artifact-task&lt;/em> node describes tasks for a specific artifact, and references that artifact using its&#xD;
        work artifact-id.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;i>context-task&lt;/i> node describes tasks for a specific context, and references that context using the&#xD;
        context-id.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    For each task node, the following set of attributes can be captured:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        ID&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Task&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Reference&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Role&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Task Type&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Some of the usage information may be automated using scripts and wizards, which are stored in the &lt;a&#xD;
    href=&quot;#Solution&quot;>Solution&lt;/a> section with the other asset artifacts.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Related Assets&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    This section describes the asset relationships to other assets. Often hyperlinks and other references are useful for&#xD;
    the Asset Consumer to navigate to other assets from this point.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following attributes can be captured for each relationship:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Name&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Relationship Type&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Asset ID&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Reference&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Although RAS doesn't specify the values of the relationship-type attribute, there are several values to consider as&#xD;
    recommended practice:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Aggregation:&lt;/b> the asset &quot;owns&quot; the referenced asset.&lt;br />&#xD;
        For example, if the asset is an architectural framework it could contain two components&amp;nbsp;that plug some holes&#xD;
        in the framework. In this context, the architectural framework is the aggregate (i.e., container) of the&#xD;
        components.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Parent:&lt;/b> the asset's parental context.&lt;br />&#xD;
        This relationship is the inverse of the Aggregation relationship. If asset X aggregates (owns) asset Y, then asset&#xD;
        X is the parent of asset Y.&lt;br />&#xD;
        Using the above architectural framework example, where the framework is the aggregate of two components, the&#xD;
        architectural framework is the parent (i.e., the container, the aggregate) of the components.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Similar:&lt;/b> the asset is like another asset&lt;br />&#xD;
        For example, some patterns say something: check out this other pattern which is similar to this one.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Dependency:&lt;/b> the asset requires the services of another asset&#xD;
    &lt;/li>&#xD;
&lt;/ul>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
