<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_GSGFUd36EdmAuujzfxByGA" name="reusable_asset,2.7928382150685155E-305" guid="_GSGFUd36EdmAuujzfxByGA" changeDate="2007-05-25T14:07:30.375-0700" version="1.0.0">
  <mainDescription>&lt;h3>&#xD;
    Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    As shown in the following figure, an &lt;b>asset&lt;/b> is a collection of related artifacts that provides a solution to a&#xD;
    problem. The asset is customizable through its &lt;b>variability points&lt;/b>, meaning those locations within the asset (or&#xD;
    more specifically, within the asset's artifacts) that can be customized. Asset consumers may need to supply, for&#xD;
    example, their own model extension and integration, or a JDBC driver, or perhaps some IP addresses.&#xD;
&lt;/p>&#xD;
&lt;table cellpadding=&quot;5&quot; width=&quot;299&quot; align=&quot;center&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                &lt;img height=&quot;258&quot; alt=&quot;An asset as a collection of artifacts &quot; src=&quot;./resources/asset.gif&quot; width=&quot;315&quot;&#xD;
                border=&quot;0&quot; />&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td align=&quot;middle&quot;>&#xD;
                An asset as a collection of artifacts&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&#xD;
&lt;p>&#xD;
    The asset&amp;nbsp;may also be relevant to one or more contexts, such as a development context, a deployment context, or a&#xD;
    business context. The asset is accompanied&amp;nbsp;by rules and instructions for its&amp;nbsp;usage.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An asset may be fully articulated and include requirements and use cases, design models, component specifications,&#xD;
    components, test cases, test drivers, and test data, or it may be just a set of use cases and their models and the&#xD;
    rules for extending the use cases. In any case, however,&amp;nbsp;it should have the following qualities to be a good&#xD;
    asset:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The asset should be easy to use, customize, and apply to another context.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It should possess the characteristics of sound engineering: tight cohesion, loose coupling, and sufficient&#xD;
        capabilities.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Its purpose and intent should be easy to understand.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It should be easy to conduct fit analysis to determine the asset's match to a particular context.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    To achieve these goals, an asset needs to be more than just a collection of runtime artifacts (code and components); it&#xD;
    should also include artifacts that explain its goals, purpose, and motivations. In many cases these are best captured&#xD;
    as subsets of the original requirements and the vision-related artifacts used in creating the asset's runtime elements.&#xD;
    In addition, modified versions of the build files should be packaged with the asset to help make it easy to use, and&#xD;
    test beds should be provided to aid in evaluating the asset.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on the Reusable Asset Specification, which is used to specify assets, see &lt;a&#xD;
    class=&quot;elementlinkwithtype&quot;&#xD;
    href=&quot;./../../../practice.mgmt.asset_based_dev.base-ibm/guidances/concepts/reusable_asset_specification_AD4A8238.html&quot;&#xD;
    guid=&quot;1.1032898096431317E-305&quot;>Concept: Reusable Asset Specification&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There are many types of reusable assets, as described in &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../practice.mgmt.asset_based_dev.base-ibm/guidances/concepts/specifying_asset_types_D215EA1E.html&quot;&#xD;
    guid=&quot;_mzz8MPCrEdquxKT1X5kJ4g&quot;>Specify Asset Types&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Assets also vary in the way that the Asset Consumer interacts with them, as described in &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../practice.mgmt.asset_based_dev.base-ibm/guidances/concepts/styles_of_reuse_4492F185.html&quot;&#xD;
    guid=&quot;_n_dP8PCrEdquxKT1X5kJ4g&quot;>Styles of Reuse&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Making Assets Reusable&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The RAS (Reusable Asset Specification) describes&amp;nbsp;a consistent way to&amp;nbsp;organize and package artifacts, thus&#xD;
    providing an infrastructure in which to reuse them. This article discusses the nature of the content itself (that&#xD;
    is,&amp;nbsp;the material that is inside the asset).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Both the content and the packaging of the asset need to be useful. For example, if you receive a beautifully wrapped&#xD;
    package from your Auntie for your birthday, and it has uncle Joe's dirty socks inside, then regardless of the wrapping&#xD;
    it is unlikely that you will use the gift. In this case, it sounds more like a liability than an asset.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Packaging must enable capturing, browsing, and reuse. But it is the usability and relevance of the content that truly&#xD;
    allows the asset to be reused.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &quot;One possible measure of a component's reusability comes from its successful use.&quot; [Source: Measuring Software Reuse,&#xD;
    Jeffrey S. Paulin, Addison-Wesley, pg. 110]&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To improve the likelihood of an asset being successfully used, you&amp;nbsp;should consider some characteristics of&#xD;
    reusable assets.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Characteristics of Reusable Assets&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    You&amp;nbsp;can consider an asset to be a candidate for reuse when it fits a cross section of:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Providing a solution to your problem&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Fitting your technical context&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Meeting your business objectives&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Fitting within your delivery process&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Integrating within your organizational structure&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    One&amp;nbsp;goal of an asset packager should be to make these cross sections easy to understand for the asset consumer,&#xD;
    and to simplify fit analysis whereby the consumer evaluates the asset's potential fit in their context.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The degree to which&amp;nbsp;you conduct such an analysis is proportional to the size, complexity, and value proposition of&#xD;
    the asset. For instance,&amp;nbsp;you will likely spend more effort on evaluating an application framework than&amp;nbsp;you&#xD;
    will on a component that formats addresses.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    These guidelines focus on the technical aspects of making an asset reusable, and will not discuss the issues&#xD;
    surrounding meeting the business/organizational/process needs.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There are technical things&amp;nbsp;you can do to your assets and their artifacts to make them more reusable. The goal and&#xD;
    purpose of this is to lower the relative costs of reuse. This is a sound value proposition for both corporate/internal&#xD;
    asset producers (i.e., asset artifact developer or asset packager) as well as producers that operate on a public&#xD;
    exchange. The bottom line is that the asset consumer is better served by addressing these issues which lowers the cost&#xD;
    of reuse thereby decreasing the number of times the asset must be used in order to get payback on their investment.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    So the question remains: What can&amp;nbsp;you do to make my asset reusable? What, in fact, makes an asset reusable?&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There are many studies and papers written&amp;nbsp;that claim a variety of elements for answering this question. The&#xD;
    suggestions range from creating good documentation, to defining well-formed interfaces, to controlling the size and&#xD;
    complexity of the asset itself.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The sum of it all is that the use of sound software engineering principles is the key item that makes an asset&#xD;
    reusable. This should not be a surprise. These principles represent elements of the foundation on which Rational has&#xD;
    been preaching and practicing. These principles are summarized below:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>&lt;a href=&quot;#Comprehension&quot;>Comprehension&lt;/a>&lt;/b> &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#Documentationquality&quot;>Documentation quality&lt;/a>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#Timetounderstandabilityanduse&quot;>Time to understandability and use&lt;/a>&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>&lt;a href=&quot;#Complexity&quot;>Complexity&lt;/a>&lt;/b> &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#DegreeofCustomization&quot;>Degree of customization&lt;/a>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#DegreeofCoupling&quot;>Degree of coupling&lt;/a>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#LevelofComplexity&quot;>Level of complexity&lt;/a>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#AssetSize&quot;>Asset size&lt;/a>&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>&lt;a href=&quot;#Reliability&quot;>Reliability&lt;/a>&lt;/b>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    A challenge with determining an asset's reusability is the lack of standard quantitative metrics in this area. It would&#xD;
    be useful if we could say that the asset X reusability metric score is 9 out of a possible 10. Some projects have&#xD;
    produced such metrics, but since these are not well established, the principles for determining reusability are used&#xD;
    with a combination of quantitative and subjective techniques. Each of these is discussed in further detail below.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Comprehension&quot; name=&quot;Comprehension&quot;>&lt;/a>Comprehension&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    This principle is critical to the proper selection and usage of the asset. The reason for this being a key principle is&#xD;
    that an asset's relevance to your context is critical in determining its reusability. Said another way, reusability of&#xD;
    an asset is largely a function of how well the asset fits our context.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To make such judgments, you&amp;nbsp;must first be able to understand what problem the asset proposes to solve, the nature&#xD;
    of the asset's solution, and the context (e.g., business, technical, and other) for which it is intended.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Two key elements of this principle follow.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Documentationquality&quot; name=&quot;Documentationquality&quot;>&lt;/a>Documentation quality&#xD;
&lt;/h5>&#xD;
&lt;p class=&quot;ctp&quot;>&#xD;
    Documentation is often viewed as a final step to getting the software out the door. If an asset consumer can find what&#xD;
    they need to know to conduct both fit analysis and asset usage, then the documentation can be viewed more as a&#xD;
    strategic tool than as an afterthought.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Timetounderstandabilityanduse&quot; name=&quot;Timetounderstandabilityanduse&quot;>&lt;/a>Time to Understandability and Use&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    If the asset consumer can attain comprehension in a relatively short period of time, then the asset is evaluated with&#xD;
    more correct information. How many&amp;nbsp;times have you&amp;nbsp;looked at a component or a class library and, after a&#xD;
    period of time, determined that it might be easier just to built the thing yourself?&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The asset must be discoverable at multiple levels to conduct a fit analysis. This means that&amp;nbsp;you need to be able&#xD;
    to understand where the asset fits within your process, who will use it, what are the steps and costs of using it,&#xD;
    and&amp;nbsp;whether&amp;nbsp;you have the skills to use it.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Complexity&quot; name=&quot;Complexity&quot;>&lt;/a>Complexity&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Complexity is manifested in several ways,&amp;nbsp;perhaps best described as&amp;nbsp;&lt;em>internal complexity&lt;/em> and&#xD;
    &lt;em>external complexity&lt;/em>. External complexity is about the complexity of working with, customizing, and applying&#xD;
    the asset. This could be termed &quot;ease of use.&quot; Internal complexity is about the structure, organization, and&#xD;
    architecture of the content itself. Metrics such as Halstead and MacCabe can be used to get a sense of the internal&#xD;
    complexity.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The measurements of some of these items can be automated whereas other items must be measured manually.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        If the asset is difficult to use and to customize, then this increases complexity.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If the asset has many parameters and points of customization, then this increases complexity.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If the asset has many external dependencies, said another way is tightly coupled, then this increases complexity.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The complexity of an asset partially determines its ease of usability. There are no agreed upon metrics that quantify&#xD;
    the complexity of an asset. However, the following can be used as indicators of an assets complexity:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The McCabe Cyclomatic Complexity metric&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The number of dependencies the asset has on external elements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The number of steps the user must follow in order to install and customize the asset&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The number of variability points&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The number of lines of code (if applicable)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The quality of the documentation&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Feedback received from users that have applied (or attempted to apply) the asset&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    An asset can have many artifacts in it. These artifacts can be requirements documents, models, source code, binaries,&#xD;
    tests, and so on. The complexity of these artifacts greatly affects the reusability of the asset.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For assets of any significant size and complexity there may be an architect and designer and developer who are creating&#xD;
    the initial artifacts. There is also an asset packager. This person (or people) focus on making the asset consumable.&#xD;
    Cooperating with each other, these roles address the issue of making the artifacts consumable.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Some of the elements affecting complexity are listed in the following sections. This initial list identifies some items&#xD;
    to consider in mitigating complexity in your asset.&lt;br />&#xD;
    &lt;br />&#xD;
&lt;/p>&#xD;
&lt;table cellspacing=&quot;2&quot; cellpadding=&quot;2&quot; width=&quot;600&quot; summary=&quot;Complexity Items List&quot; border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;th scope=&quot;col&quot;>&#xD;
                Complexity Item&#xD;
            &lt;/th>&#xD;
            &lt;th scope=&quot;col&quot;>&#xD;
                Value&#xD;
            &lt;/th>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Degree of Customization&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                How many locations for customization?&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Degree of Coupling&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                How many occurrences and of what type?&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Level of Complexity&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                What are the Halstead and MacCabe numbers?&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Asset Size&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                How many (classes, interfaces, services,and so)&amp;nbsp;must the user interact with?&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&lt;br />&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;DegreeofCustomization&quot; name=&quot;DegreeofCustomization&quot;>&lt;/a>Degree of Customization&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    An asset may be customized in many places, such as in the use case document, the model, or in the code itself.&#xD;
    Obviously, the more places where customization is required, the more difficult the asset is to reuse. These points of&#xD;
    customization are called variability points.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Identify the locations where the asset consumer must customize the artifacts. It is helpful to build a table like the&#xD;
    one below for capturing these variability points or to create a package and diagrams with variability points as&#xD;
    well.&lt;br />&#xD;
    &lt;br />&#xD;
&lt;/p>&#xD;
&lt;table cellspacing=&quot;2&quot; cellpadding=&quot;2&quot; width=&quot;600&quot; summary=&quot;Variability Points&quot; border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;th scope=&quot;col&quot;>&#xD;
                Variability Point Location&#xD;
            &lt;/th>&#xD;
            &lt;th scope=&quot;col&quot;>&#xD;
                Type&#xD;
            &lt;/th>&#xD;
            &lt;th scope=&quot;col&quot;>&#xD;
                Variability Point Binding&#xD;
            &lt;/th>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Design Model::User Account&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Java Interface&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Create implementation class&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                DB2 Control Center&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Relational DBMS&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Create database&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                WebSphere Advanced Server&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Application Server&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Configure Container Managed Persistence&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&lt;br />&#xD;
&lt;p>&#xD;
    The purpose of the table is not to replace installation and customization instructions. Rather, the table should&#xD;
    provide a summary of the numbers and types of customization that the asset consumer must&amp;nbsp;perform in order&amp;nbsp;to&#xD;
    use the asset. If the number of customizations becomes too large, at times&amp;nbsp;you may decide to create multiple&#xD;
    implementation strategies of the same asset. This may decrease the number of variability points; however, this decision&#xD;
    must be balanced with support and maintenance capabilities as well.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;DegreeofCoupling&quot; name=&quot;DegreeofCoupling&quot;>&lt;/a>Degree of Coupling&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    There are several forms of coupling, and they can be viewed as a spectrum. Using the following table evaluate the&#xD;
    boundary of your asset and determine how many occurrences there are for each type of coupling.&lt;br />&#xD;
    &lt;br />&#xD;
&lt;/p>&#xD;
&lt;table cellspacing=&quot;2&quot; cellpadding=&quot;2&quot; width=&quot;600&quot; summary=&quot;Degree of Coupling&quot; border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;th scope=&quot;col&quot;>&#xD;
            &lt;/th>&#xD;
            &lt;th scope=&quot;col&quot;>&#xD;
                Forms/Types of Coupling&#xD;
            &lt;/th>&#xD;
            &lt;th scope=&quot;col&quot;>&#xD;
                Definition&#xD;
            &lt;/th>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;th scope=&quot;row&quot;>&#xD;
                Best Form&#xD;
            &lt;/th>&#xD;
            &lt;td>&#xD;
                Data coupling&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                This is where the proper data elements are passed to another asset or component.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;th scope=&quot;row&quot;>&#xD;
            &lt;/th>&#xD;
            &lt;td>&#xD;
                Relevant Structure Coupling&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                This is where more data than is necessary, such as in a data structure, is passed to another asset or&#xD;
                component.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;th scope=&quot;row&quot;>&#xD;
            &lt;/th>&#xD;
            &lt;td>&#xD;
                Control Coupling&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                This is where an object or function passes an element of control to another asset or component.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;th scope=&quot;row&quot;>&#xD;
            &lt;/th>&#xD;
            &lt;td>&#xD;
                Shared Element Coupling&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                This is where multiple assets or components access the same data storage location.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;th scope=&quot;row&quot;>&#xD;
                Worst Form&#xD;
            &lt;/th>&#xD;
            &lt;td>&#xD;
                Internal Reference Coupling&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                This is where an asset or component has knowledge of something internal to another asset or component, such&#xD;
                as a local variable.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&lt;br />&#xD;
&lt;p>&#xD;
    Note that for this evaluation you do not need to consider the coupling that may exist within the boundaries of the&#xD;
    asset. However, this evaluation should consider the coupling that the asset has with other assets.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If you have mostly data coupling and relevant structure coupling, then your asset's reusability is greatly improved. If&#xD;
    your asset has control coupling or any that are worse, then the asset's reusability is in jeopardy and needs&#xD;
    re-architecting.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As has already been stated, the fewer occurrences of any kind of coupling the more reusable is the asset. This table&#xD;
    illustrates a coupling spectrum to consider when evaluating the complexity of your asset.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Coupling is expressed as a dependency on another asset or component. Poulin quotes a study by Torres and Samadzadeh&#xD;
    regarding the impact of coupling on reuse. The result of their studies using Ada and C found that high coupling &quot;had a&#xD;
    negative affect on reuse&quot;, while low complexity &quot;had a positive effect&quot;.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There are various forms of coupling; some have a more negative impact on reuse than others. The spectrum of coupling&#xD;
    spans from an asset knowing about the internals of another asset to an asset passing a simple argument or a fully-used&#xD;
    data structure to another asset.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To make an asset reusable all instances of coupling must be addressed. The number of coupling instances that an asset&#xD;
    has directly affects its reusability for several reasons. It affects comprehension, maintenance, and usability. If the&#xD;
    coupling can be removed then it should be. If it cannot be removed then it should be made the &quot;best form&quot; of coupling,&#xD;
    as mentioned previously.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;LevelofComplexity&quot; name=&quot;LevelofComplexity&quot;>&lt;/a>Level of Complexity&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Halstead and MacCabe metrics focus on program structure complexity. This is useful for assets providing source&#xD;
    code&amp;nbsp;that the asset consumer must use. These metrics reflect the effort to comprehend, use, and maintain the&#xD;
    asset.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Another element affecting complexity is the number of parameters that the asset consumer must use. This may range from&#xD;
    a few simple parameters on a component to many parameters for a framework, plus all of&amp;nbsp;the relevant parameters for&#xD;
    deploying the asset. Presenting the asset consumer with these parameters at the right point in time minimizes the&#xD;
    complexity and information overload.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;AssetSize&quot; name=&quot;AssetSize&quot;>&lt;/a>Asset Size&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Another element affecting complexity is size. The size of the asset tends to affect comprehension and usability, which&#xD;
    in turn affect reusability. Finding the balance of the right-sized thing is important. As some have pointed out, &quot;we&#xD;
    don't package up the letter 'e' and pass it around to everybody because it is so reusable&quot;. Therefore finding the&#xD;
    right-sized set of artifacts, and solving the right, repeatable problem, is critical to making assets reusable.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An asset with several classes and interfaces, a few source files, and a few use cases, and test data&amp;nbsp;is certainly&#xD;
    approachable compared with 50 classes, 10 interfaces, 60 source files, 10 use cases, and several test beds. The point&#xD;
    here is that as we create assets we should consider size as one factor in mitigating complexity.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Reliability&quot; name=&quot;Reliability&quot;>&lt;/a>Reliability&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Few things are more aggravating than using an asset from another source and continually facing reliability issues. In&#xD;
    addition to the productivity losses for the asset consumer, there&amp;nbsp;is the sense of a loss of control when waiting&#xD;
    upon another party to rectify the situation. This issue can have a more negative impact on reuse than any amount of&#xD;
    good documentation and well-architected solutions can overcome.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Therefore, when creating and packaging an asset there must be a commitment to verifying the asset in targeted contexts.&#xD;
    This speaks to the need for well-formed, mature processes in an organization. It is no surprise that opportunities for&#xD;
    sustained reuse and the resulting benefits are generally reserved for mature software development organizations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Mitigating the asset's complexity and providing avenues for comprehension are key to making the asset reusable. If you&#xD;
    add to these factors the notion of reliability,&amp;nbsp;you begin to experience reusable assets within an infrastructure&#xD;
    that behaves seamlessly for retaining and leveraging your corporate investments.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    The Lifecycle of an Asset&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The lifecycle of a reusable asset can be described as a series of states. These states are customizable and should&#xD;
    reflect the needs of your organization. Some states of an asset may be:&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Asset Production&#xD;
&lt;/h4>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;em>In Progress:&lt;/em> The asset is being created&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Harvested&lt;/i>: The asset is gleaned from existing artifacts and is ready to go through packaging&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Developed&lt;/i>: The asset is produced from new artifacts and is ready to go through packaging&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Packaged&lt;/i>: The Harvested or Developed asset is packaged but has not yet been submitted&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Submitted&lt;/i>: The Packaged asset is submitted for review and inclusion in the reusable library&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Asset Management&#xD;
&lt;/h4>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;em>Under Review:&lt;/em> The Submitted is currently being reviewed&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;em>Rejected&lt;/em>: The Submitted has been reviewed but not accepted&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Approved&lt;/i>: The Submitted asset has been reviewed and accepted by the Asset Administrator&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Published&lt;/i>: The Accepted asset is available for consumption from the&amp;nbsp;&lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../practice.mgmt.asset_based_dev.base-ibm/workproducts/repository_BBA87BE5.html&quot;&#xD;
        guid=&quot;{634E94FE-A1C0-4B66-94C0-4D91B3CADB90}&quot;>Asset Repository&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Asset Consumption&#xD;
&lt;/h4>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;em>Reused&lt;/em>: The asset has been used on a particular project&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Considerations When Developing Reusable Assets&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Creating and reusing assets certainly doesn't come for free, as such there are some costs to consider.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Cost of Creating Reusable Assets&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    There&amp;nbsp;are generally some additional costs when making artifacts reusable, preparing the documentation, and other&#xD;
    supporting material for Asset Consumers. Poulin refers to this as the Relative Cost of Writing for Reuse, and uses an&#xD;
    average number of an additional 50% cost to do this. [Source: Measuring Software Reuse, Jeffrey S. Poulin, Addison&#xD;
    Wesley, p. 31.]&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Cost of Reusing Assets&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The cost of reusing an asset includes searching and browsing assets, conducting fit analysis, acquiring, applying and&#xD;
    customizing the asset. Lowering the costs of reusing assets strengthens the business case for conducting reuse&#xD;
    activities and is driven by several factors, including the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The organization and packaging of the asset and its documentation&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The complexity of the asset, such as the number of variability points&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The degree to which the asset fits within your context&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    According to Poulin's research [Source: Measuring Software Reuse, Jeffrey S. Poulin, Addison-Wesley, pp. 24-25], if 25%&#xD;
    or more of an asset must be changed to make it fit your needs, then the cost of reuse jumps to over 80%. Modification&#xD;
    in this sense is not the use of a variability point but rather a functional, structural or architectural change to the&#xD;
    asset. In other words, if more than 25% of the asset needs to be modified for your use, then the cost of reuse tends to&#xD;
    go upwards of 80% of what it would have cost to develop the asset. Thus, if such a degree of change is required, you&#xD;
    may decide not to reuse the asset, and instead&amp;nbsp;just build it yourself.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    When and What to Count as Reuse&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A key part of measuring your reuse activities is to arrive at a definition of reuse transaction occurrences and&#xD;
    content. This means that for the reuse measurements to be accurate, there must be agreement on when to count a reuse&#xD;
    transaction and what is in the reuse transaction. For example, if your team develops a component on a project and uses&#xD;
    it themselves, is that considered a reuse instance? Or if another team builds a component and your team uses that, is&#xD;
    that considered a reuse instance?&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Therefore, a policy needs to be determined describing when to count instances of reuse. The other part of this policy&#xD;
    needs to describe what to count. For example, if your team purchases a COTS product that is an application, does that&#xD;
    count as reuse? Or, should the middleware layer of a system be counted as reuse? Or should only those assets that are&#xD;
    developed by the organization be counted?&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The goal here is to arrive at some clarity of what is being counted and when it is being counted.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
