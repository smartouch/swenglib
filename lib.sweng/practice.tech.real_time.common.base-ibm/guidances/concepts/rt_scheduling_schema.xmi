<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-7-S67OffrOMTRTAsBgeZKg" name=",_H5t3sOKzEd-G2pDngtqTxA" guid="-7-S67OffrOMTRTAsBgeZKg" changeDate="2012-10-03T09:08:15.892-0700" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    Task scheduling can be classified in different ways, such as in the figure&amp;nbsp;below.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Figure 1.&amp;nbsp;A taxonomy of Scheduling Schemas&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img style=&quot;WIDTH: 844px; HEIGHT: 646px&quot; alt=&quot;Class diagram showing a taxonomy of scheduling schemas&quot;&#xD;
    src=&quot;./resources/scheduling_schemas.jpg&quot; width=&quot;600&quot; height=&quot;523&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For real-time systems, Rate Monotonic Scheduling (RMS) is both optimal (other scheduling patterns can't do better) and&#xD;
    stable (you can predict which tasks will fail in an overload situation). Earliest Deadline First (EDF) dynamically&#xD;
    adjusts the priority depending on the nearness of the deadlines. EDF is optimal but not stable.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
