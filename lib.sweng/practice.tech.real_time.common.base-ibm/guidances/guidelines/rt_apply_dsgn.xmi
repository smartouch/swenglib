<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-LUmfrEaPQBa8Qe0w6MDLOg" name="new_guideline,_QFRtcOK_Ed-G2pDngtqTxA" guid="-LUmfrEaPQBa8Qe0w6MDLOg" changeDate="2010-10-28T11:15:36.437-0700" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    Design patterns are &quot;generalized solutions to commonly occurring design problems&quot; and are a kind of asset that can be&#xD;
    reused in many different specific designs. In this process, we recommend that design proceeds primarily through the&#xD;
    application of design patterns to the PIM, resulting in the PSM. Two primary approaches are used to accomplish this -&#xD;
    elaboration and translation.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Design Pattern Preparation&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Before design patterns can be selected, let alone applied, the problem context and optimization required need to be&#xD;
    clarified.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To understand the context of the pattern, you need to view the model to which you are planning to optimize, focusing on&#xD;
    the aspect to optimized (e.g. structural collaboration of classes) at the level of abstraction of concern (e.g.&#xD;
    architectural (global scope), mechanistic (collaboration scope), or detailed (class scope)). The &lt;em>pattern&#xD;
    context&lt;/em> is the collaboration of elements at the appropriate level of abstraction for the pattern, and typically&#xD;
    includes the elements to be instantiated within the pattern (the &lt;em>actual parameters&lt;/em> of the pattern)&amp;nbsp;and&#xD;
    the elements that directly connect to the actual parameters.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To clarify the design criteria:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Identify the optimizations to be achieved, in terms of design optimization criteria&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Rank the criteria in order of importance or criticality&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Optimization criteria are usually organized around some aspect of performance, resource usage, developer efficiency or&#xD;
    artifact property. At the detailed level, class optimization is performed by applying &quot;design idioms&quot; (essentially tiny&#xD;
    patterns). We recommend that you list the top criteria (at least 6-10) for optimization and then rank then in order of&#xD;
    importance. The ranking can be done either in a scale of 1-10 or 1-100 in which the value represents the importance, or&#xD;
    the ranking can be normalized so that the sum of the ranking add up to a predefine value (normally 10 or 100). In&#xD;
    either case, the important thing it to clarify the relative importance of different optimization criteria so that good&#xD;
    selections of design patterns can be made.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The criteria and their properties can easily&amp;nbsp;represented in a spreadsheet.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Pattern Selection&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Based on the optimization needs, select design patterns from the literature or from your design expertise that perform&#xD;
    the desired optimizations at a cost you are willing to pay and those preconditions are met by the pattern context&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    One the pattern(s) have been selected, the patterns can be applied to the pattern context in two primary ways:&#xD;
    elaboration and translation.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Elaboration&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Elaboration is the most common approach to the application of design patterns. The analysis model - functionally&#xD;
    correct but un-optimized - provides the starting point. The selected patterns are applied to the analysis model&#xD;
    manually (typically in the context of a graphical modeling tool) by adding in the elements from the design pattern. The&#xD;
    elements from the pattern are mostly either &quot;glue&quot; elements that are added without change or they are &quot;formal&#xD;
    parameters&quot; that will be replaced (or sub-classed) by elements from your analysis model. In addition to the insertion&#xD;
    of these elements, there is often some minor reorganization of responsibility, functionality, and class relations that&#xD;
    takes place; this is known as &quot;refactoring.&quot; Refactoring is common during the application of design patterns, but it is&#xD;
    only very rarely an issue.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Translation&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Translation requires a more sophisticated modeling tool to do well, and even tools that claim to be translation-based&#xD;
    don't always succeed in their goal. The translation approach takes the same analysis model as in the Elaboration&#xD;
    approach and applies patterns automatically. When used in this way, the designer doesn't explicitly do &quot;design work&quot; -&#xD;
    instead he or she creates a translator that embodies those design decisions in a set of transformational rules. The&#xD;
    translator then applies the design decisions to the analysis model to construct the design model. In some cases, the&#xD;
    design model is not explicitly represented by is constructed (and discarded) &quot;on the fly&quot; and the result of the&#xD;
    translation is the source code implementing the analysis model with the design decisions.&amp;nbsp; The translation itself&#xD;
    can be &quot;property-driven&quot; or &quot;rule-driven&quot;. In either case, it is necessary to identify to which elements different&#xD;
    design transformations should be applied. This can be done with properties, tags, or stereotypes. Properties are&#xD;
    tool-specific predefined metadata that specify which transformations should apply to the element. Tags are user-defined&#xD;
    metadata that apply to the elements that the translator can be instructed to use. Stereotypes are &quot;marks&quot; given to&#xD;
    model elements that the translator used to identify which transformational rules apply.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    In Practice&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In practice, some patterns are easy to add via elaboration but relatively hard via translation while for other patterns&#xD;
    the reverse is true. We recommend a combination of both approaches.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
