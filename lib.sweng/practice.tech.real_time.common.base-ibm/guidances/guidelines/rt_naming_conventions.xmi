<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-2039OMWhiZqpFIHMT_Nnqg" name="new_guideline,_o6JxwOK-Ed-G2pDngtqTxA" guid="-2039OMWhiZqpFIHMT_Nnqg" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    Naming conventions provide consistency within a document or model lessening the burden on the developer reviewing it.&#xD;
    Naming conventions apply to any element that can be named, but this guidance focuses on developer work products and&#xD;
    elements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>General&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Use naming meaningful in the context of the usage &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                An exception is temporary variables that might be used in a local scope, such as looping variables&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Avoid overly long names. It is difficult to read identifier names longer than 16 characters&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Avoid the use of acronyms in an identifier unless the acronym is in a project-approved acronym list &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                An exception might be standard abbreviations for units for scalar variables appended to the identifier name&#xD;
                (e.g. pressure_psi)&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        When a phrase is used for an identifier name, you may use one of two mixed-case styles (this decision should be&#xD;
        project wide), &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Remove white space to make the name into an identifier but make the beginning of each new word uppercase&#xD;
                (except for the first word (see naming of classes and class features), such as digitalMotorController&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Replace white space with an underscore character, such as digital_motor_controller&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Even in a case-sensitive language, &lt;em>never&lt;/em> use case to distinguish names (e.g. sourceFile and Sourcefile).&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;strong>Files&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        File names should not have white space unless you are sure that all operating systems and tools that may&#xD;
        &lt;em>ever&lt;/em> use the files allow it.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Filename should reflect their content&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Files should be divided into an interface (header) file and an implementation file. &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                The header file should only contain declarations, not implementation. It should declare all elements with&#xD;
                public visibility&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                The implementation file should contain the elements that implement the declarations in the header file plus&#xD;
                any needed protected or private elements&lt;br />&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;strong>Diagrams&lt;/strong>&#xD;
&lt;/p>Diagrams should be named according to their usage or content. Since each diagram should have a mission statement, the&#xD;
mission can be exposed within the name (e.g. scenario1_targetAcquired for a sequence diagram, acquireTargetCollaboration&#xD;
for a class diagram realizing a use case &quot;Acquire Target&quot;, flowControlAlgorithm for an activity diagram, NavigationUseCases&#xD;
for a use case diagram containing use cases and actors focusing on navigation, etc).&lt;br />&#xD;
&lt;p>&#xD;
    &lt;strong>Classes&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Class names should be meaningful singular&amp;nbsp;nouns or noun phrases (e.g. ECGMeasurement)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Class names should begin with an uppercase letter and may have letters, digits or &quot;_&quot;&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;strong>Class Features&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A class feature is a sub-element within a class, such as a port, attribute, or operation.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A class feature should begin with a lower case letter.&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;strong>Attributes and Variables&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Attributes and variables should be scoped within an enclosing namespace to prevent name pollution&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Attributes and variables should have meaningful singular&amp;nbsp;noun or noun phrase names (e.g. speed_rpm)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Attributes and variables are class features and so class feature conventions apply&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        When applicable, attributes and variables should append standard abbreviations for units to their names (e.g.&#xD;
        speed_mph)&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;strong>Operations, Functions&lt;/strong> &lt;strong>and Messages&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Operations, functions, and messages&amp;nbsp;should be scoped within an enclosing namespace to prevent name pollution&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Operations, functions, and messages&amp;nbsp;should have meaningful verb or verb phrase names (e.g.&#xD;
        computeAngleInRadians)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Operations, functions, and messages&amp;nbsp;are class features and so class feature conventions apply&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Operations and&amp;nbsp;functions should append standard abbreviations to their names&amp;nbsp;for units when they apply&#xD;
        (e.g. speed_mph)&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;strong>Types&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Types identifies should be named beginning with an upper case letter&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Type names should be meaningful noun or noun phrases (e.g. RadarReturnCode)&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Use Cases&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Use cases should begin with an upper case letter&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use cases define functionality, and so meaningful verb or verb phrases should be used for names &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                An exception is when a use case refers to an operational mode (usually such a use case specializes another)&#xD;
                (e.g. AutoGuidanceMode specializing NavigateSystem use case.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use cases may, optionally, contain white space if that option is supported in the selected modeling tool&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;strong>States&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        States are a condition and so should have meaningful&amp;nbsp;verb or verb phrase names (e.g. WaitingForUser or&#xD;
        RotatingTheAntenna).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        State names should reflect the condition of the instance for which they define the behavior&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;strong>Transitions and Events&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Transitions are named by the events that trigger them&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Events are occurrences and therefore singular nouns&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Event names should be meaningful noun or noun phrases, optionally prefaced with 'ev' (e.g. evButtonPush) &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                An exception is when the triggering event is a timeout; in this case, use tm() or after()&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
