<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-TPH5-emEtPLzWmPHm7CadQ" name="new_guideline,_TrKrgOK-Ed-G2pDngtqTxA" guid="-TPH5-emEtPLzWmPHm7CadQ" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    While&amp;nbsp;this process&amp;nbsp;is primarily focused on model-based development, there is often a limited amount of&#xD;
    hand-written source code. The guidelines are primarily meant to ensure readability, understandability and testability&#xD;
    and therefore do not apply strongly to code automatically generated from the models, since in that case, the model is&#xD;
    generally the work product that will be reviewed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Guidance here is provided for structuring, coding for testability, and in-line documentation (comments). Source-code&#xD;
    language-specific guidance is not provided here.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Code Structuring&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Code structuring refers to the physical organization of source code into files as well as the organization of code&#xD;
    elements within the source files.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;em>File Organization&lt;/em>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For object-oriented source code, we recommend that there is a header and implementation file (e.g. .cpp and .h) for&#xD;
    every class and package. For structured code, we recommend that the contents within the file are strongly cohesive,&#xD;
    either/or around data, behavior, or functionality. In any event, if it is possible to multiply-include a file header,&#xD;
    then it should be explicitly prevented (such as with a #IFDEF in C or C++).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;em>Comments&lt;/em>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Each file should have a comment header identifying the following&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The purpose of the file and its contents&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A list and brief description of the primary elements within the file&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Important preconditions or constraints on the elements of the file or their usage&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Raised error code or exceptions&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Each element (e.g. class, variable, type, or function) should be prefaced with a comment block that describes the&#xD;
    element, constraints, preconditions or limitations on its usage, post-conditions (where appropriate), and errors or&#xD;
    exceptions raised. For scalar data elements (scalar variables or scalar parameters), the comment should also identify&#xD;
    valid and invalid ranges and values, as well as what actions should be taken when the variable is out of range, if&#xD;
    known in the context.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Comments should always address &lt;em>why&lt;/em> the element is structured or written as it is not &lt;em>what&lt;/em> the&#xD;
    structure is (since that is apparent from the code itself).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;em>Declarations&lt;/em>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Whenever possible, a element should be declared before it is used. This is often done with &quot;forward declarations&quot;.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Code Design for Readability&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A consistent naming convention should be followed as well as consistent formatting.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Care should be taken to avoid writing code, which even though correct, is obscure and/or difficult to understand or&#xD;
        debug.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Indentation should be used consistently to show level of scope nesting (e.g. indent the content of a &quot;function&quot;,&#xD;
        &quot;loop&quot;, &quot;if&quot; or &quot;case&quot; statement)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use blank lines to visually organize related code into blocks&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Avoid using uncommented &quot;magic names&quot;. When constants are required, name them and, if necessary explain them, e.g. &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                const double PI = 3.14159265;&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                #DEFINE RADAR_BIT_FAIL (0x3CC) /* Returned by the Radar device hardware when built in test fails */&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use named enumerations rather than numbers when possible&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It is usually preferable to have code that is more readable than more optimal &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                When execution optimality is necessary and it makes the code less readable or understandable, be sure to&#xD;
                add additional comments to assist in the comprehension of the code&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Avoid bit-packing attributes and variables unless required&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;strong>Code Design for Correctness&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Initialize each variable or attribute when it is constructed&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Always check return values when present&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Pointers to functions should be declared &lt;em>const&lt;/em>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Static and global variables should be defined within a namespace to prevent name pollution&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Static checking tool such as LINT should be run on code prior to its delivery to aid the identification of&#xD;
        potential problems (e.g. memory leaks)&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;em>Defensive Design&lt;/em>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Defensive design is a principle in which you assume that the preconditions of the code you write will be violated and&#xD;
    explicitly check for and handle such situations&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Always check parameter values to ensure they are in range and/or reasonable (e.g. an array index should not be&#xD;
        negative, the weight of a patient for a medical application will not exceed 1000 Kg, body temperature for a live&#xD;
        patient is in the range of room temperature to 120 degrees Fahrenheit).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Always handle exceptions and errors returned, unless the code does not have enough scope or context information to&#xD;
        do the corrective action&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;strong>Code Design for Testability&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Non-deliverable source code developed expressly to debug or unit test deliverable code should be put in separate&#xD;
        files and be configuration managed with the code that it debugs or tests.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Code should be explicitly tested for the following kinds of defects &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Parameters or values out of range and other precondition violations&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Parameters or values on the end points of a range (boundary tests)&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                High volume of data (stress test)&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Quality of service (e.g. worst case performance)&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Random in-range data values (statistical testing)&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Code coverage (e.g. DC - decision coverage, or MCDC (Modified Condition Decision Coverage))&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
