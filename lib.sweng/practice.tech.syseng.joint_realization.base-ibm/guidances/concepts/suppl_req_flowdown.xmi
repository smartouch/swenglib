<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-aMiKVqOoil_7k0GRisL8Rg" name="new_concept,_7o4PwL6MEd6EnZQdp87-CQ" guid="-aMiKVqOoil_7k0GRisL8Rg" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    As a part of the Analysis process, the Architect develops an initial Locality diagram. The Locality view is a synthesis&#xD;
    of the non-functional considerations and provides a context for addressing how the non-functional requirements such as&#xD;
    reliability and capacity are addressed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Standard engineering practice allows for the budgeting of capacity, permitted failure rates, and so forth. This effort&#xD;
    results in a set of derived supplementary requirements for each locality element. The locality characteristics are&#xD;
    determined from these requirements. The derived requirements and characteristics are revisited as the partitioning of&#xD;
    subsystems (across localities) is determined and refined.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The system-level Supplementary Requirements also have an impact on the subsystems (hardware, software, people)&#xD;
    themselves, with the subsystem characteristics, in combination with locality characteristics, combining to yield the&#xD;
    desired system characteristics.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Quality of service measures&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Quality of service (QoS) is a notion that includes aspects of non-functional requirements. The list of such&#xD;
    characteristics is potentially large, including many &quot;abilities,&quot; such as reliability, maintainability and usability,&#xD;
    and possibly complete engineering specialties such as safety, human factors, and so on. Significant engineering&#xD;
    specialty problems are typically addressed by experts in those disciplines. The issues that often fall to the system&#xD;
    and software engineer are those to do with:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Performance - how well, against time, does the system perform its functions, that is, responsiveness, throughput,&#xD;
        meeting deadlines.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Reliability/Fault Tolerance - how long can the system continue to perform its required functions before a failure,&#xD;
        and how well (gracefully) does it cope with partial failures. The system Mean Time Between Failure (MTBF) is a&#xD;
        measure of reliability.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Maintainability - how easy is it to keep the system running, and diagnose and fix problems in the system. The&#xD;
        system Mean Time To Repair (MTTR) is a measure of maintainability.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Before system construction, the system engineer must often rely on models of the system as a way of defining&#xD;
    alternative solutions, and assignment and budgeting of non-functional requirements. These models are analyzed to see&#xD;
    how well they meet the desired quality of service levels, and a solution can then be selected (usually with cost as a&#xD;
    factor). Such &lt;i>trade studies&lt;/i> are important in system design at all levels of refinement. The synthesis of&#xD;
    candidate solutions depends very much on the ability and experience of the Architect. The analysis of these solutions&#xD;
    (through mathematical modeling, simulation, and so on) should be relatively mechanical. Even so, the reliability of&#xD;
    these analyses will vary considerably with the goodness of the input data and the fidelity of the models.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A body of techniques is available to make tractable the analysis of models with respect to the QoS measures listed&#xD;
    above - for example, Rate Monotonic Analysis&amp;nbsp; for the examination of the performance of real-time embedded&#xD;
    software systems [see Klein, M. H., et al. &lt;i>A Practitioners' Handbook for Real-Time Analysis: Guide to Rate Monotonic&#xD;
    Analysis for Real-Time Systems,&lt;/i> Kluwer Academic Publishers, 1993], and Failure Mode Effects and Criticality&#xD;
    Analysis (FMECA), for hardware failure and safety risk identification and characterization [see Kececioglu, Dimitri,&#xD;
    &lt;i>Reliability Engineering Handbook, Vol. 2,&lt;/i>&amp;nbsp; &lt;font color=&quot;#000000&quot;>PTR Prentice Hall&lt;/font>, 1991].&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Support for these kinds of analyses is being added to the UML through the provision of profiles, notably the &lt;i>&quot;UML&#xD;
    Profile for Scheduleability, Performance, and Time Specification&quot;&lt;/i> and the &lt;i>&quot;UML Profile for Modeling Quality of&#xD;
    Service and Fault Tolerance Characteristics and Mechanisms.&quot;&lt;/i> These profiles (available from &lt;a&#xD;
    href=&quot;http://www.omg.org/&quot; target=&quot;_blank&quot;>&lt;u>&lt;font color=&quot;#0000ff&quot;>www.omg.org&lt;/font>&lt;/u>&lt;/a>) define annotations for&#xD;
    UML models that allow them to be analyzed for the characteristics defined in the profile, and quantitative predictions&#xD;
    made regarding these characteristics, using various existing and future model analysis techniques and tools.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
