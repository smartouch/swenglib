<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-Vmefn-ZSOgQumQHqTA24tw" name="new_concept,_IQ-YsL6NEd6EnZQdp87-CQ" guid="-Vmefn-ZSOgQumQHqTA24tw" changeDate="2009-10-21T15:01:25.812-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>Introduction&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../practice.tech.syseng.joint_realization.base-ibm/guidances/concepts/sys_arch_viewpoints_67437C6A.html&quot;&#xD;
    guid=&quot;_UZvWwL6MEd6EnZQdp87-CQ&quot;>System Architecture: Viewpoints, Levels, Models&lt;/a>, you find the idea of&#xD;
    &lt;i>viewpoints&lt;/i> from which a system can be examined; of particular relevance here is the &lt;i>physical&lt;/i> viewpoint.&#xD;
    This viewpoint &quot;focuses on the distributed interactions between objects in the system, and provides the mechanisms to&#xD;
    support distribution&quot; [quote from &lt;i>Architecting with RM-ODP&lt;/i>, Janis Putman, Prentice Hall PTR]. At the level&#xD;
    described here, the logical objects include subsystem instances. The Deployment Model supports this viewpoint by&#xD;
    describing how the system is physically distributed and the physical support for distributed interactions between the&#xD;
    logical objects supported by the system.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The purpose of&amp;nbsp;a Deployment Model&amp;nbsp;is to capture the decomposition of the system into elements which host the&#xD;
    processing. This is done at several levels of abstraction, namely Locality (the most abstract), Descriptor, and&#xD;
    Implementation (the least abstract, at which actual choices of hardware and software are described)- these levels are&#xD;
    more or less equivalent to the Conceptual, Specification and Physical levels described for the&amp;nbsp;Deployment&#xD;
    Model&amp;nbsp;(which is used&amp;nbsp;mostly in&amp;nbsp;software development). The most familiar manifestation of the&amp;nbsp;a&#xD;
    deployment model is at the Design and Implementation levels, through the use of UML deployment diagrams. The following&#xD;
    is an introduction to the Analysis level, physical viewpoint concept of &lt;i>Locality.&lt;/i>&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Localities and Connections&quot; name=&quot;Localities and Connections&quot;>Localities and connections&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The &lt;b>Locality&lt;/b> Model represents the initial, abstract, &lt;i>physical&lt;/i> partitioning and distribution of the&#xD;
    system, and is concerned with the physical resources of the system (nodes, devices, sensors and their physical&#xD;
    connections and interfaces, and the physical characteristics of these, for example weight, heat generation, power&#xD;
    consumption, vibration, and so on). A locality expresses notionally where processing occurs (the semantics of locality&#xD;
    implies a tighter grouping of resources) without defining exact geographic location or how the processing capability is&#xD;
    to be realized. It is conceivable for very complex, very large systems, that the initial Locality Model might have&#xD;
    localities that decompose to finer-grained localities (just as a subsystem might contain subsystems). At the&#xD;
    &lt;b>Descriptor&lt;/b> level, the &lt;i>types&lt;/i> of processing resources at a locality are specified - these are &lt;i>nodes&lt;/i>,&#xD;
    which can include computing devices (servers, workstations, and so on), people, or other electro-mechanical devices.&#xD;
    Finally, at the &lt;b>Implementation&lt;/b> level, the actual hardware selection is made, numbers of role instances (in the&#xD;
    case of human resources) determined, with a defined set of configurations, capacity, power and other environmental&#xD;
    requirements, cost and performance. For example, a Locality view might show that the system enables processing onboard&#xD;
    a space satellite and a ground station. Other examples are shown in the figures in the Locality Diagrams section.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Deployment Model is also used to record the subsystem operations that are hosted at each locality - this determines&#xD;
    the computing requirements to be supported at the locality. Based on the behavior to be supported at the localities,&#xD;
    collaborations of localities can be constructed (and represented in interaction diagrams)- these help characterize the&#xD;
    connections between the localities.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The locality diagrams show the initial partitioning, how the system processing elements are distributed, and how they&#xD;
    are connected. Locality of computing is an issue when considering primarily non-functional requirements and for many&#xD;
    systems engineers, this is &quot;the architecture.&quot;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Locality diagrams consist of two elements:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Locality - a locality is a collection of computing, storage, structural, electro-mechanical and human resources&#xD;
        that can host processing (in the general sense) and/or interact physically with the environment and other&#xD;
        localities.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Connections - pathways for information, mass, energy, or discrete physical items to be exchanged between&#xD;
        localities.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The semantics of the locality diagrams are similar to those of deployment diagrams, and localities are represented as&#xD;
    stereotyped UML nodes. In the UML standard, a node is a classifier that &quot;... is a physical object that represents a&#xD;
    processing resource, generally, having at least a memory and often processing capability as well. Nodes include&#xD;
    computing devices but also human resources or mechanical processing resources.&quot; UML allows us to extend the semantics&#xD;
    of nodes, and the associations that connect them, through stereotyping and the application of tagged values, and these&#xD;
    facilities are used to define localities and connections. The icon for a locality is a rounded cube (see the&#xD;
    illustrations in&amp;nbsp;the Locality Diagrams section).&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Each locality in the Deployment Model needs an attached description of derived supplementary requirements (derived from&#xD;
    the supplementary specifications) which specify quality (reliability, maintainability, safety, and so on), physical and&#xD;
    environmental requirements, and development constraints (cost, technical risk, and so forth). From these requirements,&#xD;
    the actual characteristics (of each locality) are determined; obviously these are chosen to meet the explicit&#xD;
    requirements at least, but can exceed the requirements if sound engineering practice dictates this - for example, to&#xD;
    cope with unexpected capacity demands.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Localities are characterized with:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Quality tags, such as reliability, availability, performance, capacity, and so forth.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Management tags, such as cost and technical risk&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Connections are characterized by the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Link parameters, such as data rate, supported protocols, physical flow rate.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Management tags, such as cost and technical risk.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    As you move to the design model, localities can be refined to one or more nodes, or more than one locality can be&#xD;
    mapped to a single node. And, through the freedom given by the UML definition, localities can represent quite disparate&#xD;
    things, ultimately realized, for example, as a collection of hardware platforms, part of a computational resource, or&#xD;
    groups of collaborating human resources.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Locality Diagrams&quot; name=&quot;Locality Diagrams&quot;>Locality diagrams&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The figures show Locality diagrams that document different engineering approaches to a click-and-mortar enterprise. The&#xD;
    enterprise has a number of retail stores, central warehouses, and a web presence. In the first solution, there is&#xD;
    processing capability in the stores. In the second solution, all the terminals are connected directly to a central&#xD;
    office processor. In each case, characteristics can be set for the localities that are required to realize the design.&#xD;
    These days, most people would agree that the first example is a better design. However, the solution in the second&#xD;
    example might become superior in a few years.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img height=&quot;595&quot; alt=&quot;&quot; src=&quot;./resources/retail_localities_1.jpg&quot; width=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot; align=&quot;center&quot;>&#xD;
    Locality Diagram, Example 1.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img height=&quot;591&quot; alt=&quot;&quot; src=&quot;./resources/retail_localities_2.jpg&quot; width=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot; align=&quot;center&quot;>&#xD;
    Locality Diagram, Example 2.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
