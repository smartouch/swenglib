<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-jTEI4wgcBBdoXte3LnOXSQ" name="new_roadmap,_mJI04L6FEd6EnZQdp87-CQ" guid="-jTEI4wgcBBdoXte3LnOXSQ" changeDate="2009-10-21T14:08:29.312-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Getting Started&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Begin by reviewing Section 5 of the Redbook, &quot;Model Driven Systems Development with Rational Products&quot;. Also, the&#xD;
    whitepaper &quot;Rational Unified Process for Systems Engineering Part III: Requirements analysis and design&quot;. Study the&#xD;
    concept of a viewpoint.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Joint realization consists of the following procedure:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Choose the participating viewpoints. The logical viewpoint is mandatory.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        For each white-box step in realizing a black-box service, you must:&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Specify the logical element that executes it.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Model how the additional viewpoints participate. For example, you might include a Distribution viewpoint:&#xD;
                specify hosting locality; if there are two localities, then decompose into two steps.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Throughout this process, apply the following joint realization rule: If a given logical element white-box&#xD;
                step requires more than one element of the other viewpoints, divide that step into further steps so that&#xD;
                each step requires exactly one white-box element from each viewpoint.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Create interaction diagrams for each viewpoint:&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Architecture Interaction Diagram&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Maybe a Locality Interaction Diagrams&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Budget supplementary requirements for performance, accuracy, and so forth, to each step; evaluate/confirm with&#xD;
        interaction diagrams.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    Common Pitfalls&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    &lt;strong>There's only one architecture&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A logical architecture isn't necessarily the same as a distribution architecture. The logical architecture helps one&#xD;
    reason about the groupings of functionality. The distribution architecture is used to reason about some of the&#xD;
    non-functional requirements and constraints. How a system performs its functions and includes concerns such as quality,&#xD;
    quantity, and timeliness. These are just two different viewpoints that are important, but depending on the application&#xD;
    other viewpoints such as security may need to be used in the analysis.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Consider only functional requirements&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A frequent pitfall is to consider only functional requirement during your development activities. A common mistake is&#xD;
    to overlook non-functional requirements, as availability, security, performance. Realization of both functional and&#xD;
    non-functional requirements will ensure the success of your design.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
