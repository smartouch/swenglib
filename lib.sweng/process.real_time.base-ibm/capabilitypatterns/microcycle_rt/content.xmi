<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1">
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-Z1h0lqvflufF3MS7bJuB9g" name="microcycle_rt,_ytYjcd05Ed-7no4nyxiTMA" guid="-Z1h0lqvflufF3MS7bJuB9g" version="7.5.0">
    <mainDescription>&lt;p>&#xD;
    The microcycle is an iterative, incremental development process.&amp;nbsp; In the microcycle, the subsystem software team&#xD;
    begins with the specification of requirements and context. The team then selects functionality - organized around the&#xD;
    software subsystem use cases - to be developed. In the Analysis phase of the microcycle, the use cases to be added to&#xD;
    the prototype are identified and detailed, if necessary. Following this a domain analysis (also known as object&#xD;
    analysis) is done to identify the essential elements that must be in any acceptable software solution to the problem.&#xD;
    Following the analysis phase, the project enters the design phase.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Design is all about optimization of a system against the set of design criteria for the product. The design criteria is&#xD;
    a set of properties of the system that measure goodness of the design - properties such as worst case performance,&#xD;
    throughput, bandwidth, reliability, safety, security, time to market, complexity, maintainability, and so on. These&#xD;
    properties are weighted in order of their criticality. Design then proceeds by identifying design patterns that&#xD;
    optimize the most important design criteria at the expense of the least important criteria. It is during this stage&#xD;
    that technological solutions are adopted to achieve these design goals.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Following design, the code is produced that realizes the design. Depending on the tool environment, the code&amp;nbsp;might&#xD;
    be&amp;nbsp;entirely generated automatically from the UML design specification. With less capable tools, significant effort&#xD;
    must be expended to create the code and maintain the code in synch with the model. As an integral part of the&#xD;
    development of this code, we include unit-level test - mostly oriented around the important classes from the analysis&#xD;
    model - and, following successful unit test, peer review. Peer review of the model allows not only for other sets of&#xD;
    eyes to look at and find fault with the design, but also to disseminate information about parts of the design to other&#xD;
    team members.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Once the high-quality (i.e. tested and verified) architectural units (subsystems) are produced they are integrated&#xD;
    together (along with specific artifacts from other engineering disciplines) into a system prototype that is then&#xD;
    validated against the requirements of the prototype. These requirements are not only the new requirements added during&#xD;
    the current microcycle, but also requirements added in previous microcycles. This is what is known as regression&#xD;
    testing.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The system prototypes becomes increasingly complete as more of the remaining capabilities are added over time until the&#xD;
    system meets the entire set of requirements necessary for product release. At this point, the engineered system is&#xD;
    passed to final acceptance testing and released to the customer.&#xD;
&lt;/p></mainDescription>
    <purpose>Develop a prototype according to the microcycle's mission statement.</purpose>
    <scope>A microcycle focuses on developing a single prototype. This is done in order to break up large scale systems into more&#xD;
manageable subsystems. The&amp;nbsp;microcycle mission statement will define which use cases and requirements the current&#xD;
microcycle will attempt to develop.</scope>
  </org.eclipse.epf.uma:ProcessDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-egEpQpoWhkMFVfdeR2ZVhA" name="update_hazard_analysis,_-YaQAN4REd-8BsDLkQrDSQ" guid="-egEpQpoWhkMFVfdeR2ZVhA">
    <refinedDescription>The hazard analysis is a key document for safety critical systems as it combines the description of the hazards, the level&#xD;
of risk, system faults that can lead to the hazard, and the control measures all together in a single view. The Fault is a&#xD;
non-compliance of the system that can lead to the identified hazard. The severity is a measure of how bad the hazard is (an&#xD;
arbitrary scale of 1-10 is used often used). The Risk is a value computed by the likelihood multiplied by the severity of&#xD;
the occurrence. This task keeps the hazard analysis up to date, re-performing fault tree and failure modes and effect&#xD;
analyses as appropriate.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-yUPVmS0tz1GIZyElJhcb8w" name="rt_safe_czar,_-YaQAd4REd-8BsDLkQrDSQ" guid="-yUPVmS0tz1GIZyElJhcb8w">
    <refinedDescription>&lt;p>&#xD;
    This&amp;nbsp;role only exists within projects developing safety critical systems or applications.&amp;nbsp;This &amp;nbsp;role is&#xD;
    active throughout the project development and participates and oversees the following activities:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Specifying safety requirements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Analyzing work products for safety, including&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Requirements&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Use Cases&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Requirements scenarios&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Architecture&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Algorithms&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Classes, functions, and variables&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Test suites and test cases&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Configuration Management approach&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Performing fault tree analysis (FTA) to determine relations of faults, hazards, risks, and control measures&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Reviewing work products for adherence to safety requirements and/or regulations&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Performing traceability between safety requirements and work products&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    With the explicit allocation of responsibility for safety, safety critical projects can be run more efficiently and&#xD;
    productively, while reducing the risk of failing to meet the safety needs of the developed product.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-NUYD9pY9NA6TqyLXoHS84g" name="rt_rel_czar,_-YaQAt4REd-8BsDLkQrDSQ" guid="-NUYD9pY9NA6TqyLXoHS84g">
    <refinedDescription>This&amp;nbsp;role only exists within projects developing high-reliability systems or applications. The Reliability Czar role&#xD;
is active throughout the project development and participates and oversees the following activities &#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Specifying reliability requirements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Analyzing work products for reliability, including &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Requirements&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Use Cases&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Requirements scenarios&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Architecture&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Algorithms&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Classes, functions, and variables&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Test suites and test cases&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Configuration Management approach&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Performing Fault Means Effect Analysis (FMEA)&amp;nbsp;to determine relations of faults, hazards, risks, and control&#xD;
        measures&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Reviewing work products for adherence to reliability requirements and/or regulations&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Performing traceability between reliability&amp;nbsp;requirements and work products&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    With the explicit allocation of responsibility for reliability, high-reliability projects can be run more efficiently&#xD;
    and productively, while reducing the risk of failing to meet the safety needs of the developed product.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-7olOAwvrKvhAI4uwHfhrxA" name="haz_an,_-YaQA94REd-8BsDLkQrDSQ" guid="-7olOAwvrKvhAI4uwHfhrxA">
    <keyConsiderations>All the relevant hazards of the system and the faults that can lead to those hazards must be identified in the hazard&#xD;
analysis.</keyConsiderations>
    <refinedDescription>&lt;p>&#xD;
    The hazard analysis is a key document for safety critical systems (see Term Definition: Safe) as it combines the&#xD;
    description of the hazards, the level of risk, system faults that can lead to the hazard, and the control measures all&#xD;
    together in a single view. The Fault is a non-compliance of the system that can lead to the identified hazard. The&#xD;
    severity is a measure of how bad the hazard is (an arbitrary scale of 1-10 is used often used). The Risk is a value&#xD;
    computed by the likelihood multiplied by the severity of the occurrence.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    All safety critical systems are real-time systems as well, since each fault has a period of time that it can be&#xD;
    tolerated (called its Fault Tolerance Time). To be considered safe against a specific fault, the sum of the fault&#xD;
    detection time and the control time (the time required for the control measure to handle the fault) must be less than&#xD;
    or equal to the fault tolerance time.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The hazard analysis is usually coupled with one or more Fault Tree Analysis (FTA) to show how faults and other&#xD;
    conditions can combine to lead to hazards.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The hazard analysis is created during the requirements analysis phase but not all aspects (such as the control&#xD;
    measures) may be identified early on. The hazard analysis should be maintained throughout the development cycle - as&#xD;
    new hazards or faults are identified, they must be added to the table. As control measures are specified, the analysis&#xD;
    must be updated as well.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-aVZdM7uY8rHad_Rm0PYVSg" name="fmea,_-YaQBN4REd-8BsDLkQrDSQ" guid="-aVZdM7uY8rHad_Rm0PYVSg">
    <refinedDescription>&lt;p>&#xD;
    An FMEA is most often used in a bottom-up approach - that is detailed failures are examined to determine their ultimate&#xD;
    consequences. In contrast, Fault Tree Analysis is more commonly used in a top-down approach, beginning with hazards and&#xD;
    then determining what faults elicit them.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    FMEA and FTA are used in both reliability engineering and safety-critical system engineering.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-M_Jj56pWMQGdcX_24ou0EA" name="fta,_-YaQBd4REd-8BsDLkQrDSQ" guid="-M_Jj56pWMQGdcX_24ou0EA">
    <refinedDescription>&lt;p>&#xD;
    An FTA uses logical operators (commonly AND, OR, and NOT, but may also include XOR, NOR, and NAND) to depict the&#xD;
    explicit relation between normal and exception (i.e. error) conditions and normal and exception (i.e. failure) events.&#xD;
    FTA can be used to depict the causal chain of events and conditions for an existing design and also drive the&#xD;
    development of design approaches (called control measures) that address the safety issues. These control measures are&#xD;
    then added to the FTA as &quot;ANDing redundancy&quot; so that for the hazard to be manifest, both the original condition or&#xD;
    fault must occur AND the control measure must fail as well.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An FTA is most often used in a top-down fashion, beginning with the hazards and the discovering that underlying faults&#xD;
    that can lead to them. In contrast, an Fault Means and Effect Analysis (FMEA) is most often used in a bottom up&#xD;
    fashion, beginning with the failures and then determining the consequences. Both are used in reliability and safety&#xD;
    engineering.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
</xmi:XMI>
