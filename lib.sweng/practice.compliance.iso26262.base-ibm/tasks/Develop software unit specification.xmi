<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-axcTVegsCLtdVtmByg9uIQ" name=",_RidoEKPpEeC6tIhMGJuAIA" guid="-axcTVegsCLtdVtmByg9uIQ" changeDate="2011-08-24T05:44:26.490-0700" version="7.5.1">
  <mainDescription>&lt;p>&#xD;
    This task covers the specification of the software units functional behavior and internal design down to the point&#xD;
    where the software units can be implemented.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To ensure that the specification complies with good practices around software unit design and captures all the&#xD;
    necessary information required to develop the item the design shall be described using a set of notations. Please refer&#xD;
    to &quot;Table 8- Notations for software unit design&quot;, located in ISO 26262 volume 6 clause 8.4.1. The notations covered are&#xD;
    the following:&#xD;
&lt;/p>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        Documentation of the software unit design in natural language (highly recommended for all ASILs) &lt;strong>a&lt;/strong>&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Informal notations (highly recommended for ASILs A and B, and recommended for ASILs C and D)&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Semi-formal notations&amp;nbsp; (highly recommended for ASIL A , and recommended for ASILs B, C and D)&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Formal notations (recommended for all ASILs)&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    &lt;strong>a&lt;/strong> Authors Note:- This can lead to misunderstanding due to the informal nature of natural language and&#xD;
    its potential for ambiguity.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the case of model-based development with automatic code generation, the methods for representing the software unit&#xD;
    design have to be applied to the functional model which will serve as the basis for the code generation. This applies&#xD;
    to semi formal notations such as UML and tools that support UML and code generation.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To achieve the properties of simplicity, robustness, maintainability, testability, readability and comprehensibility in&#xD;
    the software unit design&amp;nbsp;and to ensure that the following correspond to the software architectural design:-&#xD;
&lt;/p>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        Correct order of execution of subprograms and functions&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Consistency of interfaces between software units&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Correctness of control and data flow between and within the&amp;nbsp;SW units&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    Please refer to &quot;Table 9 - Design principles for software unit design and implementation&quot; located in ISO 26262 volume 6&#xD;
    clause 8.4.4, this table details the use of the following design principles (with some further caveats detailed in the&#xD;
    actual table, which the user is advised to examine).&#xD;
&lt;/p>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        One entry and one exit point in subprograms and functions&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Initialization of variables&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        No hidden data flow or control flow&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    All the principles above are highly recommended for all ASIL levels&#xD;
&lt;/p>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        No dynamic objects or variables, or else online test during their creation&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        No multiple use of variable names&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        No implicit type conversions&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        No hidden data flow or control flow&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    The principles above&amp;nbsp;are recommended for ASIL A and highly recommended for ASILs B,C and D.&#xD;
&lt;/p>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        Avoid global variables or else justify their usage&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        No recursions&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    The principles above&amp;nbsp;are recommended for ASILs A and B and highly recommended for ASILs C and D.&#xD;
&lt;/p>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        Limited use of pointers is a technique that is recommended for ASILs B and C and highly recommended for ASIL D&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&lt;br />&#xD;
&lt;p>&#xD;
    To help with the development of this specification it is possible to use model based methods, see &lt;a&#xD;
    class=&quot;elementLink&quot; href=&quot;./../../process.real_time.base-ibm/capabilitypatterns/mech_dsgn_rt_603447DF.html&quot;&#xD;
    guid=&quot;_k6ra0bFCEd-mOKCs6c0xZQ&quot;>Collaboration Design - RT&lt;/a>&amp;nbsp;this provides the specification for the unit design&#xD;
    and implementation.&#xD;
&lt;/p></mainDescription>
  <purpose>To specify the software unit based upon the software architectural design and the associated software safety requirements&#xD;
so it can be implemented.</purpose>
</org.eclipse.epf.uma:TaskDescription>
