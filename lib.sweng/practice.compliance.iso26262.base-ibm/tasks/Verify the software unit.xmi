<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-qkJIdwFsSVDYotgHhoVwZg" name=",_emRcoKPpEeC6tIhMGJuAIA" guid="-qkJIdwFsSVDYotgHhoVwZg" changeDate="2012-11-19T16:08:47.051-0800" version="7.5.1">
  <mainDescription>&lt;p>&#xD;
    &amp;nbsp;Verification that the software unit is compliant with the hardware/software interface, the software unit&#xD;
    specification and coding guidelines. It shall also be compatible with the target hardware and a full traceability&#xD;
    coverage back to software safety requirements and the software architecture.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Methods for the static and informal verification of the software unit design and implement are shown below.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &amp;nbsp;Please refer to &quot;Table 10-Methods for the verification of software unit design and implementation&quot; located in ISO&#xD;
    26262 volume 6, clause 8.4.5. This table details the applicability of the methods (detailed)&amp;nbsp;corresponding to ASIL&#xD;
    level of the item. some extra caveats to the summary below are detailed in the actual table.&#xD;
&lt;/p>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        Semi-formal verification (requires and executable design or implementation model of the unit to be built, this&#xD;
        technique is very applicable to model based software engineering).&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Control flow analysis&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Data flow analysis&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    The techniques detailed above are recommended for ASILs A&amp;nbsp;or B and highly recommended for ASILs C or D.&#xD;
&lt;/p>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        Static code analysis is recommended at ASIL A and highly recommended for ASILs B, C and D&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Semantic code analysis is recommended for all ASILs&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Formal verification is recommended for ASILs C or D&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    Informal verification is broken down into a further set of activities according to ASIL, please&#xD;
    refer&amp;nbsp;&quot;Table11-Methods for the informal verification of software unit design and implementation&quot; located in ISO&#xD;
    26262 volume 6, clause 8.4.5. This table details the following methods&#xD;
&lt;/p>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        Inspection of the software unit design&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Model Inspection&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Inspection of the source code&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    The techniques above are all recommended at ASIL A and highly recommended at ASILs B,C and D.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The techniques below based upon walkthroughs are all highly recommended at ASIL level A and recommended at ASIL level B&#xD;
&lt;/p>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        Walk-through of the software unit design&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Model Walk-through&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Walk-through of the source code&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    If using model based techniques. Model walk-through and inspection are valid ways of verifying the software unit&#xD;
    specification. If a model based approach is used for automatic code generation it is possible to replace the informal&#xD;
    methods of code inspection and walk-through by automated methods and techniques.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If the code is to be included as part of a production release it shall be verified that it contains all the specified&#xD;
    functions. If other functions are included it shall be ensured that these cannot impair the compliance of the software&#xD;
    with the software safety requirements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Code used for other functions such as development or debugging can only be included if developed and verified to the&#xD;
    same safety standards as the rest of the code. Removal of the code is deemed to be a change, but deactivation of these&#xD;
    functions is an acceptable means of compliance.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;p>&#xD;
    &lt;br />&#xD;
    &lt;br />&#xD;
    &amp;nbsp;&#xD;
&lt;/p></mainDescription>
  <purpose>To ensure that the software component can work with the HW and is developed according to the guidelines.</purpose>
</org.eclipse.epf.uma:TaskDescription>
