<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-oxAcNM8KGdJtJzVcUCWfUA" name="new_guideline,_9HuNEEk-Edyi3_jfs__bIQ" guid="-oxAcNM8KGdJtJzVcUCWfUA" changeDate="2009-03-17T22:48:46.109-0700" version="1.0.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Explanation&quot; name=&quot;Explanation&quot;>Explanation&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The include-relationship connects a base use case to an inclusion use case. The inclusion use case is always abstract.&#xD;
    It describes a behavior segment that is inserted into a use-case instance that is executing the base use case. The base&#xD;
    use case has control of the relationship to the inclusion and can depend on the result of performing the inclusion, but&#xD;
    neither the base nor the inclusion&amp;nbsp;can access each other's attributes. The inclusion is in this sense&#xD;
    encapsulated, and represents behavior that can be reused in different base use cases.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You can use the include-relationship to:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Factor out behavior from the base use case that is not necessary for the understanding of the primary purpose of&#xD;
        the use case, only the result of it is important.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Factor out behavior that is in common for two or more use cases.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In an ATM system, the use cases Withdraw Cash, Deposit Cash, and Transfer Funds all need to include how the customer is&#xD;
    identified to the system. This behavior can be extracted to a new inclusion use case called Identify Customer, which&#xD;
    the three base use cases include. The base use cases are independent of the method used for identification, and it is&#xD;
    therefore encapsulated in the inclusion use case. From the perspective of the base use cases, it does not matter&#xD;
    whether the method for identification is to read a magnetic bank card, or perform a retinal scan. They only depend on&#xD;
    the result of Identify Customer, which is the identity of the customer. And vice versa, from the perspective of the&#xD;
    Identify Customer use case, it does not matter how the base use cases use the customer identity or what has happened in&#xD;
    them before the inclusion is executed - the method for identification is still exactly the same.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;150&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;./resources/include1.gif&quot; width=&quot;289&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    In the ATM system, the use cases Withdraw Cash, Deposit Cash, and Transfer Funds all include the use case Identify&#xD;
    Customer.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A base use case&amp;nbsp;can have multiple inclusions. One inclusion use case&amp;nbsp;can be included in several base use&#xD;
    cases. This does not indicate any relationship between the base use cases. You&amp;nbsp;can even have multiple&#xD;
    include-relationships between the same inclusion use case and base use case, provided the inclusion is inserted at&#xD;
    different locations of the base use case. The include-relationship defines what the location is. All additions&amp;nbsp;can&#xD;
    be nested, which means that an inclusion use case&amp;nbsp;can serve as the base use case for another inclusion.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Because&amp;nbsp;the inclusion use case is abstract, it does not need to have an actor associated with it. A&#xD;
    communication-association to an actor is only needed if the behavior in the inclusion explicitly involves interaction&#xD;
    with an actor.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Executing the Inclusion&quot; name=&quot;Executing the Inclusion&quot;>Executing the Inclusion&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The behavior of the inclusion is inserted in one location in the base use case. When a use-case instance following the&#xD;
    description of a base use case reaches a location in the base use case from which include-relationship is defined, it&#xD;
    will follow the description of the inclusion use case instead. Once the inclusion is performed, the use-case instance&#xD;
    will resume where it left off in the base use case.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;224&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;./resources/include2.gif&quot; width=&quot;307&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    A use-case instance following the description of a base use case including its inclusion.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The include-relationship is not conditional: if the use-case instance reaches the location in the base use case for&#xD;
    which it is defined, it is always executed. If you want to express a condition, you need to do that as part of the base&#xD;
    use case. If the use-case instance never reaches the location for which the include-relationship is defined, it will&#xD;
    not be executed.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;224&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;./resources/include3.gif&quot; width=&quot;307&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Use-case instance #1 reaches the location in the base use case for which the include-relationship is defined, and the&#xD;
    inclusion is performed. Use-case instance #2 does not reach that location, and the inclusion is therefore not performed&#xD;
    as part of that instance.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The inclusion use case is one continuous segment of behavior, all of which is included at one location in the base use&#xD;
    case. If you have separate segments of behavior that need to be inserted at different locations, you&amp;nbsp;must consider&#xD;
    the extend-relationship (see &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../practice.tech.use_case_driven_dev.extend-ibm/guidances/guidelines/defining_extend_relationships_9E99C694.html&quot; guid=&quot;_hjbKkEk-Edyi3_jfs__bIQ&quot;>Guideline: Defining Extend Relationships&lt;/a>).&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Describing the Include-Relationship&quot; name=&quot;Describing the Include-Relationship&quot;>Describing the&#xD;
    Include-Relationship&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    For the include-relationship, you&amp;nbsp;must define the location within in the behavior sequence of the base use case&#xD;
    where the inclusion is to be inserted. The location can be defined by referring to a particular step or subflow within&#xD;
    the flow of events of the base use case.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In the ATM system, the use case Withdraw Cash includes the use case Identify Customer. The include-relationship from&#xD;
    Withdraw Cash to Identify Customer can be described as follows:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Identify Customer is inserted between sections 1.1 Start of Use Case and 1.2 Ask for Amount in the flow of events of&#xD;
    Withdraw Cash.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For the sake of clarity, you&amp;nbsp;must also mention the inclusion in the text describing the flow of events of the base&#xD;
    use case.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Example of Use&quot; name=&quot;Example of Use&quot;>Example of Use&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    If there is a behavior segment in a use case where you can see that the use case is not dependent on how things are&#xD;
    done, but it is dependent on the result of the function, you can simplify the use case by extracting this behavior to&#xD;
    an inclusion use case. The inclusion use case can be included in several base use cases, which means it lets you reuse&#xD;
    behavior among use cases in the model. Consider the following step-by-step outlines to use cases for a simple phone&#xD;
    system:&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Place Call&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Caller lifts the receiver.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System presents a dial-tone.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Caller dials a digit.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System turns off dial-tone.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Caller enters remainder of number.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System analyzes the digits, and determines the network address of the Receiving Party.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System determines whether a virtual circuit can be established between the Caller and the Receiving Party.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System allocates all resources for virtual circuit and establishes connection.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System rings Receiving Party's phone.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        And so on.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h4>&#xD;
    &lt;b>Start System&lt;/b>&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Operator activates the system.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System performs diagnostic tests on all components.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System tests connections all adjacent systems. For each adjacent system, the System determines whether a virtual&#xD;
        circuit can be established between itself and the adjacent system. The System allocates all resources for the&#xD;
        virtual circuit and establishes connection.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System responds that it is ready for operation.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        And so on.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    The text listed in blue is very similar; in both cases we are performing the same behavior, although for very different&#xD;
    reasons. This similarity can be exploited, and we can extract the common behavior into a new use case, Manage Virtual&#xD;
    Circuits.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Once common behavior has been extracted, the use cases become:&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;b>Place Call&lt;/b>&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Caller lifts receiver.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System presents dial-tone.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Caller dials a digit.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System turns off dial-tone.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Caller enters remainder of number.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System analyzes digits, determines network address of the Receiving Party.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Include the Manage Virtual Circuit use case to establish connectivity within the network.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System rings the Receiving Party's phone.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        And so on.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h4>&#xD;
    &lt;b>Start System&lt;/b>&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Operator activates system.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System performs diagnostic tests on all components.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System tests connections all adjacent systems. For each adjacent system (loop), include Manage Virtual Circuit to&#xD;
        establish connectivity with the network.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System responds that it is ready for operation.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        And so on.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    In a use-case diagram, the include-relationship that is created will be illustrated as follows:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;157&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;./resources/include4.gif&quot; width=&quot;213&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The use cases Place Call and Start System both include the behavior of the abstract use case Manage Virtual Circuit.&#xD;
&lt;/p>&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
