<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-RTUHAxw2gqVjdAELxVqLZg" name="new_guideline,_lgJaUHSCEd29r_XK65u8CA" guid="-RTUHAxw2gqVjdAELxVqLZg" changeDate="2008-08-27T14:55:22.092-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Overview&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The iterative development approach is the &quot;heartbeat' or &quot;pulse&quot; of the development organization. The primary goal&#xD;
    of&amp;nbsp;this approach is to&amp;nbsp;deliver to the project stakeholders the working functionality that they can use and&#xD;
    provide feedback based on their experience.&amp;nbsp;The other artifacts are secondary to working code, because&amp;nbsp;they&#xD;
    are less representative of progress than the working code is.&amp;nbsp;However, artifacts such as requirements documents,&#xD;
    architectural models, business cases, and so on are needed to gaining agreement on what goes into each iteration. The&#xD;
    larger and more complex the project, the higher the number and the ceremony of artifacts might be necessary.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An iteration is a time-boxed milestone that is used to measure a project progress based on working software.&amp;nbsp;The&#xD;
    product development team chooses practices to be followed and sets up the needed infrastructure in such a way that the&#xD;
    team is able to deliver small subsets of functionality that are useful to the stakeholders' business purpose.&amp;nbsp;This&#xD;
    approach is new to a lot of development teams as many are used to a traditional waterfall development process, where&#xD;
    progress is measured by sign-offs of deliverables (such as documents, plans, models, etc) other than working&#xD;
    code.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Before performing an iteration, there needs to be a well defined iteration plan. This plan should provide clear&#xD;
    understanding of what needs to be accomplished during the iteration.&amp;nbsp;Prior to the assessment at the end of the&#xD;
    iteration, the functionality and other goals of the iteration have to be tested and validated.&amp;nbsp;In addition, in&#xD;
    each iteration the team has to make sure that work done during the current iteration has not broken functionality added&#xD;
    in previous iterations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In summary, the following are the key aspects of iterative development:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        An Iteration has to end with working, production-quality software that can be tested.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Each iteration should deliver new functionality and not re-work of old functionality.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Each iteration has to have an iteration plan which will specify what goes into each iteration.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Each iteration will have an iteration assessment that will highlight whether the objectives have been met or not.&#xD;
        The feedback from the assessment will be rolled into future iterations.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    How Iterations Are Planned&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    &lt;strong>Sequencing iterations&lt;/strong>: The sequencing of iterations is guided by the project lifecycle the team&#xD;
    follows. For example, on an architecture-centric process that is driven by risks, we tend to attack the higher&#xD;
    architectural risks in the early iterations.&amp;nbsp;Other processes might decide to focus on the value to the clients, so&#xD;
    the teams might perform iterations where&amp;nbsp;the highest value to the clients is provided on the early iterations.&#xD;
    Some teams will balance risks and value at the same time.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Length of iterations&lt;/strong>: There are two primary approaches on how you plan the length of an iteration, as&#xD;
    described below:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Uniform iterations&lt;/strong>:&amp;nbsp;In this approach, each iteration has the same time interval. For example,&#xD;
        you might want to have monthly iterations.&amp;nbsp;Or in other cases it might be six weeks long.&amp;nbsp;You can add and&#xD;
        de-scope functionality to fit into the time frame. For teams new to iterative development, this is a good way to&#xD;
        getting introduced to the habit of performing iterations. Another benefit is that your customers and other&#xD;
        stakeholders expect something they can use at the end of each month (or whatever the length of the iterations is).&#xD;
        Be aware that your users have an expectation&amp;nbsp;of when some functionality will be delivered.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Non-uniform iterations&lt;/strong>:&amp;nbsp;In this approach, you size the iterations length based on the&#xD;
        functionality, bug fixes and enhancements you want to deliver. Some iterations might be three weeks long and others&#xD;
        six weeks long. For this approach to be successful, you need to have a very good idea about your team's ability to&#xD;
        work in an iterative environment. You will also need some estimation experts on the team.&amp;nbsp;Typically you will&#xD;
        want to have at least a couple of projects using uniform iterations before trying the non-uniform approach.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Some Myths&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    &lt;strong>Iterative approach does not need planning:&lt;/strong> This is one of the biggest myths. Iterations are well&#xD;
    planned events. They are actually much more rigorous than the traditional approaches.&amp;nbsp;An iteration is guided by an&#xD;
    iteration plan. An iteration plan tells the team which risks and enhancement requests are being addressed, and what&#xD;
    functionality is expected at the end of the iteration.&amp;nbsp;Once the iteration is completed, you compare the iteration&#xD;
    results with the iteration plan. The results and lessons learned during an iteration help update the plan for the next&#xD;
    or future iterations as needed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>The code delivered does not need to be of good quality because we can always fix it in the next&#xD;
    iteration&lt;/strong>: This is also not true. The functionality delivered by iterations is meant to be incremental. In&#xD;
    other words, you deliver additional functionality with each subsequent iteration. The code delivered has to be&#xD;
    production quality so that the Quality Assurance organization and users can test. An iterative approach is not a&#xD;
    playpen for developers.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>You start day one of the project with the first iteration&lt;/strong>: As iterations are meant to deliver&#xD;
    production quality code, you need to do some planning on what functionality goes into an iteration. In some processes&#xD;
    where the project lifecycle is organized into phases, this planning is typically done during the first phase. This&#xD;
    planning session should involve project manager, project team and stakeholders. At the later iterations, there need to&#xD;
    be wrap-up activities like integration testing, training and turning over the software product to the operational&#xD;
    teams. When a team wants to adopt the iterative approach on a project, the team needs to have a short initial phase&#xD;
    that allows for planning out the iterations goals and a final phase that ties all the loose ends together.&amp;nbsp;The&#xD;
    iterative approach is not a sequence of iterations tied together with no room for initial planning or final close out&#xD;
    of projects.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
