<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-pFXk3FYj4vk4kWXEEThDAw" name="iteration_plan,_IfvyKHflEd-F6IfAz3d7wQ" guid="-pFXk3FYj4vk4kWXEEThDAw" changeDate="2011-03-29T15:09:41.836-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_Iteration_Plan_document__guidelines_for&quot;&#xD;
name=&quot;XE_Iteration_Plan_document__guidelines_for&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_inception_phase__iteration_patterns&quot; name=&quot;XE_inception_phase__iteration_patterns&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;XE_construction_iteration__iteration_patterns&quot; name=&quot;XE_construction_iteration__iteration_patterns&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;Iteration Patterns&quot; name=&quot;Iteration Patterns&quot;>Iteration Patterns&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The following sections describe iteration patterns&amp;nbsp;for a phase-based lifecycle. You may replace those phases by&#xD;
    equivalent phases you use.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;XE_iteration_patterns__inception_iterations&quot; name=&quot;XE_iteration_patterns__inception_iterations&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;Inception Iterations&quot; name=&quot;Inception Iterations&quot;>Inception Iterations&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In Inception, the top risks are often either business risks or technical risks. The dominant business risk early on is&#xD;
    typically ensuring project funding. Thus, a proof of concept prototype is often the result of the inception phase. The&#xD;
    proof of concept prototype either demonstrates key functionality or some essential technology.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The first iteration of a new product is usually the hardest. There are many new aspects a first iteration must achieve&#xD;
    besides producing software: For example, putting in place the process, team-building, understanding a new domain,&#xD;
    becoming familiar with new tools, and so on. Be conservative in your expectations about how much of the architecture&#xD;
    you can flesh out, or the degree of usable functionality you can achieve. If you aim too high, you risk delaying the&#xD;
    completion of the first iteration, reducing the total number of iterations, and hence decreasing the benefit of an&#xD;
    iterative approach. The first iterations should be focused on getting the architecture right. You must therefore&#xD;
    involve the software architects in the planning process of early iterations.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;XE_iteration_patterns__elaboration_iterations&quot; name=&quot;XE_iteration_patterns__elaboration_iterations&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;XE_elaboration_iteration__iteration_patterns&quot; name=&quot;XE_elaboration_iteration__iteration_patterns&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;Elaboration Iterations&quot; name=&quot;Elaboration Iterations&quot;>Elaboration Iterations&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In Elaboration, the iterations focus on defining a stable architecture, on designing and implementing the essential&#xD;
    behavior of the system and exploring the technical architectural issues through a series of architectural prototypes.&#xD;
    &quot;Architecturally significant&quot; scenarios are sub-flows which exercise the architecture of the system in defining ways.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;XE_transition_iteration__iteration_patterns&quot; name=&quot;XE_transition_iteration__iteration_patterns&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;XE_iteration_patterns__transition_iterations&quot; name=&quot;XE_iteration_patterns__transition_iterations&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;XE_iteration_patterns__construction_iterations&quot; name=&quot;XE_iteration_patterns__construction_iterations&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;Construction and Transition Iterations&quot; name=&quot;Construction and Transition Iterations&quot;>Construction and Transition&#xD;
    Iterations&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Toward the end of Elaboration, and during Construction and Transition, change requests (also known as Software Change&#xD;
    Orders or SCO's) begin to drive the iteration process. SCO's result from the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        enhancement requests&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        change requests whose scope goes beyond the individual package or class.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        changes in the iteration scope and objectives.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        changes in requirements either proposing that the requirements baseline be changed, or accommodating an accepted&#xD;
        change to the requirements baseline.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    These SCO's are balanced against the existing project plan, iteration plans, and the existing risk list. SCO's may&#xD;
    cause the priority of requirements to be re-evaluated, or may drive the re-prioritization of risk. SCO's must be&#xD;
    managed carefully, however, lest project control be lost.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    During Construction and Transition, the focus is on fleshing-out the architecture and implementing all remaining&#xD;
    requirements.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_iteration__strategies&quot; name=&quot;XE_iteration__strategies&quot;>&lt;/a>&lt;a id=&quot;Iteration Strategies&quot;&#xD;
    name=&quot;Iteration Strategies&quot;>Iteration Strategies&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Unlike the Waterfall model, where the entire system is considered at once, we only consider a portion of the&#xD;
    functionality of the system in each iteration. During each iteration, a subset of the total system is analyzed,&#xD;
    designed and implemented. The choice of what the subset should be and how deep to delve are critical to reducing risk&#xD;
    in subsequent iterations. There are two basic strategies: Wide/Shallow and Narrow/Deep.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Wide and Shallow&quot; name=&quot;Wide and Shallow&quot;>Wide and Shallow&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In the Wide/Shallow strategy, the entire problem domain is analyzed, but only the surface details are considered. All&#xD;
    Use Cases are defined and most are fleshed-out in great detail, to get a clear understanding of the problem at hand.&#xD;
    The architecture is defined broadly as well, and the key mechanisms and services offered by architectural components&#xD;
    are defined; the interfaces of subsystems are defined, but their internal details are detailed only where significant&#xD;
    risk or uncertainty must be managed. Very little is implemented until Construction, where most of the iteration occurs.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Wide/Shallow strategy is appropriate when:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The Team is inexperienced, either in the problem domain or in a technology area (including methodology or process).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Sound architecture is a key requirement for future capability, and the architecture is unprecedented.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The strategy has some potential pitfalls, however:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The team can get trapped in &lt;b>analysis paralysis&lt;/b> (the illogical feeling that unless the design is perfect, one&#xD;
        cannot implement anything).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Early results are often needed to build confidence and credibility; the longer the project team goes without&#xD;
        producing something executable, the less confident they feel about their ability to do so.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Not enough of the technical details and challenges of the architecture are exposed to get a sense of the real&#xD;
        technical risks&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Narrow and Deep&quot; name=&quot;Narrow and Deep&quot;>Narrow and Deep&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In the Narrow/Deep strategy, a &lt;i>slice&lt;/i> of the problem domain is analyzed thoroughly. The Use Cases related to this&#xD;
    narrow slice are defined and fleshed-out in great detail, to get a clear understanding of the problem at hand. The&#xD;
    architecture required to support the desired behavior is defined, and the system is designed and implemented.&#xD;
    Subsequent iterations focus on analyzing, designing and implementing additional vertical slices.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Narrow/Deep strategy is appropriate when:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Early results need to be demonstrated to overcome a dominant risk, garner support or prove viability.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Requirements are continually evolving, making it difficult to completely define all requirements before starting&#xD;
        detailed design and implementation work.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The deadline is &lt;b>mandatory&lt;/b>, such that getting an early start on development is key to successful delivery.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A high degree of re-use is possible, enabling a greater degree of incremental delivery.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The strategy is not without drawbacks:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        There is a tendency with this strategy for each iteration to develop software that is vertically integrated but&#xD;
        horizontally incompatible. This is sometimes referred to as the &lt;b>stovepipe&lt;/b> syndrome, and it makes a system&#xD;
        difficult to integrate.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It is not well-suited to developing systems in a completely new problem domain or based on an unprecedented&#xD;
        architecture, since a large part of the functionality of a system must be sampled in order to achieve a balanced&#xD;
        architecture.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Lessons Learned from Experience&quot; name=&quot;Lessons Learned from Experience&quot;>Lessons Learned from Experience&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Generally, early iterations will have more of a Wide/Shallow flavor, while later iterations (where a stable&#xD;
    architecture has been developed) tend to follow the Narrow/Deep strategy.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The first iteration is usually the hardest, since it requires the entire development environment and much if the&#xD;
    project team to be in place. Tool integration and team-building issues add to the complexity of the first iteration.&#xD;
    Focusing on the architectural issues can help to maintain focus and prevents the team from getting bogged down in&#xD;
    details too early.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Hybrid Strategies&quot; name=&quot;Hybrid Strategies&quot;>Hybrid Strategies&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Narrow/Deep strategy used in Inception &#xD;
        &lt;p>&#xD;
            Where exploitation of a new technology is essential to the fundamental viability of the project.&amp;nbsp; Many&#xD;
            e-business projects require new technologies to be explored to a much greater depth than might be done&#xD;
            traditionally.&amp;nbsp; The proof-of-concept prototype is still considered a &quot;throw-away&quot;, and merely explores the&#xD;
            viability of the project concept.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Wide/Shallow strategy used in Inception &#xD;
        &lt;p>&#xD;
            This strategy is pursued to gain an understanding of the scope of the system, and to sample the breadth of&#xD;
            functionality of the system to ensure that the architecture is capable of delivering the desired capabilities.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Wide/Shallow strategy used in Elaboration &#xD;
        &lt;p>&#xD;
            This approach can help develop a sound architecture, with selective Narrow/Deep focus to address specific&#xD;
            technical risks. In Construction, with a sound architecture established, the focus can return to Narrow/Deep,&#xD;
            where functionality is developed and delivered in a series of integrated increments.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Narrow/Deep strategy used in Construction &#xD;
        &lt;p>&#xD;
            Construction iterations are always Narrow/Deep, with teams working in parallel to develop and deliver the&#xD;
            required functionality.&amp;nbsp;&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Special Considerations for New Teams&quot; name=&quot;Special Considerations for New Teams&quot;>Special Considerations for New&#xD;
    Teams&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    New teams are typically overly optimistic at first with what they can accomplish. To counter this, and to avert&#xD;
    potential morale problems which occur when actual results fall short of optimistic expectations, be modest in the&#xD;
    amount of functionality that can be achieved in the first iteration. Try to build experience while creating a sense of&#xD;
    accomplishment and project momentum.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If the development environment and/or methods are new to the team, reduce the functionality of the first iteration to a&#xD;
    minimum. Focus on integrating and tuning the environment and becoming proficient with the tools, then ramp-up the&#xD;
    functionality content in subsequent iterations.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_rework__as_part_of_iterations&quot; name=&quot;XE_rework__as_part_of_iterations&quot;>&lt;/a>&lt;a id=&quot;Expected Rework&quot;&#xD;
    name=&quot;Expected Rework&quot;>Expected Rework&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Rework is good, up to a point. One of the major benefits of an iterative development is precisely to allow mistakes and&#xD;
    experimentation, but early enough so that corrective actions can be taken. However technical people in particular tend&#xD;
    to 'gold plate' or redo work to perfection between one iteration and the next.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    At the end of each iteration, during the iteration assessment, the team should decide what part of the current release&#xD;
    will be reworked. Expect rework to be allocated among phases in the following percentages, relative to the total&#xD;
    system:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Inception, 40%-100% - this is where you may develop throwaway, exploratory prototypes&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Elaboration, 25%-60% in early iterations; less than 25% in later iterations, or for an evolution cycle.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Construction, after the architecture baseline, 10% or less per iteration and 25% total.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Transition, less than 5%.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Rework is inevitable. When no one sees the need for rework, you should be suspicious. This may be due to:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Excessive pressure schedule.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Lack of real test or assessment.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Lack of motivation or focus.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Negative perception of rework as being bad, waste of resources, or an admission of incompetence or failure.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Too much rework is alarming. This may be due to 'gold plating' or to an unacceptable level of requirement changes. A&#xD;
    business case must be done to evaluate the necessity of some rework.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Note that we do &lt;i>not&lt;/i> include work de-scoped from the previous iteration (because of the timeboxed approach to&#xD;
    iteration management) in the category of 'rework'. The Project Manager has to include this de-scoped work in the pool&#xD;
    of functionality from which to define the next iteration's contents. Obviously, such work will normally have high&#xD;
    priority. The Project Manager should also discover and carefully consider the reasons for the failure of the previous&#xD;
    iteration to achieve its planned goals. For example, although we do not advise the arbitrary addition of staff in a&#xD;
    desperate attempt to meet a schedule, running a project chronically &lt;i>understaffed&lt;/i> - while repeatedly making&#xD;
    ambitious plans for each iteration - is not sensible either. It usually leads to poor team morale and an angry&#xD;
    customer. The right balance has to be found, and estimation models such as COCOMO II (see [&lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.mgmt.common.extend_supp-ibm/guidances/supportingmaterials/reference_mgmt.add_rup_D5C634A1.html#BOE00&quot;&#xD;
     guid=&quot;__TlZAB2ZEd--YPaIW7QkIg&quot;>BOE00&lt;/a>]) can help with this. With each iteration, a project builds a history of&#xD;
    achievement - of productivity and quality. A strong indicator for a Project Manager, in planning the next iteration, is&#xD;
    what was achieved in the previous one.&lt;br />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
