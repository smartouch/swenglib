<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:RoleDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-C6eNsIDKcBcJN8l4ve2gKQ" name="modeler,_RhfEQMvrEd-j1uJpwhl9rw" guid="-C6eNsIDKcBcJN8l4ve2gKQ" changeDate="2010-10-28T12:25:45.046-0700" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    The primary kind of software modeling is the use of UML or one of its profiles (e.g. SysML or&amp;nbsp;UPDM) to represent&#xD;
    aspects of the software to be developed. A software modeler may focus on a particular part of a model, such as use case&#xD;
    analysis, or architectural design, or may be involved in all aspects of the development. In general, the UML model&#xD;
    being developed should be precise and executable, so that it can be validated against its requirements, and so that the&#xD;
    design can generate production-quality code.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Other kinds of modeling are sometimes used, such as continuous mathematical modeling for algorithmic design.&#xD;
&lt;/p></mainDescription>
  <keyConsiderations>The software modeler needs to produce models that meet their need - this usually means that the model must be well-formed&#xD;
(syntactically and semantically correct), and precise enough to be validated via execution or formal analysis.</keyConsiderations>
  <skills>The software modeler needs to understand the UML (or its used profile) as well as the process being used, the standards and&#xD;
guidelines in use for &quot;good&quot; work products, and how their model fits into the system model structure.</skills>
</org.eclipse.epf.uma:RoleDescription>
