<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-IjUefT92pJ68SlSIGyessA" name=",_msCbYOWUEeGKRrt3T5Dstw" guid="-IjUefT92pJ68SlSIGyessA" changeDate="2012-08-13T15:20:00.010-0700" version="7.5.1">
  <mainDescription>&lt;p>&#xD;
    &lt;strong>Define test context&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The first step in performing Component Integration test is to define what will be tested, the System Under Test (SUT).&#xD;
    Since the goal of component integration testing is to confirm that all components work together correctly in the target&#xD;
    environment, the first task is to confirm that the software components integrate correctly. Perform these tests on the&#xD;
    desktop using unit testing principles. The reason for this approach is simple: it reduces the number of sources of&#xD;
    defects to the minimum set. Once the software-only components have been tested, move to testing the interactions with&#xD;
    hardware and testing the components on the target hardware.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Often, component integration testing requires that the tests run on the target device or a simulator. This environment&#xD;
    restriction requires a special software build with all required components. For example, testing the interactions of a&#xD;
    component with hardware might require the hardware, drivers, signal conditioning, and the component. If all required&#xD;
    parts are not available, it may be possible to use a simulator or build special testing components.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Define test cases&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Identify test cases by identifying the functionality you are building. Each test case defines a specific capability.&#xD;
    This functionality may be described by a use case, an activity diagram or flow chart, a state chart, or a set of&#xD;
    requirements. For each test case, define one or more test scripts so that the capability is fully exercised. It is&#xD;
    important to specify the scenario completely, including exception handling conditions.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:TaskDescription>
