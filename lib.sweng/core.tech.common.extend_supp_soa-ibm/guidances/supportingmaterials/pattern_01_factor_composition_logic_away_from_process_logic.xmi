<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-IvnjB6nSeWBTg0GkGx3wwQ" name="new_concept,_N-cVwHhYEd63Mo-f0bVh9w" guid="-IvnjB6nSeWBTg0GkGx3wwQ" changeDate="2009-08-22T16:03:53.203-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Context&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The emerging de facto standard for building business process-driven SOA solutions is to use the &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.bus.common.extend-ibm/guidances/termdefinitions/bpel_E0043DD7.html&quot; guid=&quot;_uv8g0IhaEd6oeZacNg1BdA&quot;>Business Process Execution Language&lt;/a> (WS-BPEL, henceforth simply &quot;BPEL&quot;) to implement&#xD;
    the executable process.&amp;nbsp;BPEL can be used to:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Create an executable version of a &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.bus.common.extend-ibm/guidances/termdefinitions/bpmn_F7475E84.html&quot; guid=&quot;_d8G6wIhbEd6oeZacNg1BdA&quot;>Business Process Modeling Notation&lt;/a> (BPMN) modeled business process (process flow&#xD;
        logic).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Implement a composite service by orchestrating a set of calls on atomic services (composition logic).&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    For any given executable process, both of these tasks can be achieved using a single BPEL artifact describing a&#xD;
    sequenced step of Web service invocations.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;h3>&#xD;
    Forces&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        It makes it more difficult to reuse the composition logic.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It makes it more difficult to understand the process flow by looking at the BPEL.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The resulting implementation artifact is more complex and therefore more difficult to maintain.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It makes it more difficult to split the roles of process developer and service developer.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&lt;br />&#xD;
&lt;h3>&#xD;
    Problem&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Mixing process flow logic and composition logic together in the same implementation artifact has problematic side&#xD;
    effects.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>&lt;font size=&quot;4&quot;>Solution&lt;/font>&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For each &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/participant_soaml_1A392457.html&quot; guid=&quot;_zL3kgFbAEd6MCpkuB85p5g&quot;>Participant&lt;/a>&amp;nbsp;that&amp;nbsp;realizes a&amp;nbsp;&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/termdefinitions/composite_service_2B492DE6.html&quot; guid=&quot;_Hm7qcIQnEd6pOcahJ5wBfA&quot;>composite service&lt;/a>, create owned behaviors that describe how each exposed operation&#xD;
    is implemented.&amp;nbsp; The first diagram in &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/examples/participant_soaml_DAFEB6B7.html&quot; guid=&quot;_uO9JIFbBEd6MCpkuB85p5g&quot;>Example: Participant (SoaML)&lt;/a>&amp;nbsp;illustrates an OrderProcessor Participant owning a&#xD;
    behavior for an operation, processPurchaseOrder.&amp;nbsp; The second diagram in that example illustrates the owned&#xD;
    behavior, in this case&amp;nbsp;an Activity.&amp;nbsp; For each such Participant, either generate or hand-code BPEL that can be&#xD;
    used to orchestrate the calls that realize each service operation.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Limit the BPEL that drives the business process to orchestrating the calls to the service operations that realize each&#xD;
    of the sub-processes and/or tasks that are in the first level of decomposition of the business process.&amp;nbsp;See &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.bus.common.extend-ibm/guidances/concepts/business_process_decomposition_70D1DA00.html&quot; guid=&quot;_0XDGMEozEd6D_7XK49c0nw&quot;>Concept: Business Process Decomposition&lt;/a>&amp;nbsp;for an&amp;nbsp;overview of business&#xD;
    process decomposition.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Use the BPEL that was created from the Participants' owned behaviors to&amp;nbsp;implement the composite service operations&#xD;
    that are called from the process flow BPEL.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the case of a hierarchy of composite services -- that is, we have composite service operations which are realized by&#xD;
    calling&amp;nbsp;services provided by other composite service providers -- apply the above solution pattern&#xD;
    recursively.&amp;nbsp;&amp;nbsp;The BPEL for realizing the operations for one level of composite services shall be limited to&#xD;
    invoking the operations provided by services in the next-lower level of the hierarchy.&amp;nbsp; The BPEL at one level of&#xD;
    service choreography shall contain no information that can be used to infer how its realizing operations are themselves&#xD;
    realized.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Notes:&#xD;
&lt;/h4>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The composition logic need not be implemented using BPEL. Oftentimes it is simpler to just use plain old Java, or&#xD;
        another conventional programming language. This might depend on the tools and skills of the developer assigned to&#xD;
        implementing these components.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &quot;&lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/supportingmaterials/pattern_12_represent_processes_as_service_consumers_AC87EEDA.html&quot; guid=&quot;_y0mr0H8UEd6EC8v3b_fCaQ&quot;>Pattern 12: Represent Processes as Service Consumers&lt;/a>&quot; is closely related to&#xD;
        this pattern.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        This pattern is a special case of a more general pattern&amp;nbsp;on separation of concerns. In&amp;nbsp;this pattern, we&#xD;
        talk specifically about&amp;nbsp;separating the composition logic from the process logic.&amp;nbsp;There are other concerns&#xD;
        that&amp;nbsp;need to&amp;nbsp;be separated as well, such as business logic, security logic, or connectivity logic.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Rationale&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Keeping the process logic separate from the composition logic means:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        It is easier to reuse the composition logic across multiple processes.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It is easier to understand the process flow BPEL as it only contains flow logic.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The resulting BPEL is simpler and therefore easier to maintain.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It is easier to split the roles of process developer and service developer. Process developers implement the&#xD;
        business process service consumers. Service developers implement the composite business application services (and&#xD;
        any atomic business application services they require).&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
