<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-zMLOqMfss62smn02OdoWQw" name="new_concept,_fk2kEHheEd63Mo-f0bVh9w" guid="-zMLOqMfss62smn02OdoWQw" changeDate="2009-09-23T21:03:22.546-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Context&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Today it is common for IT departments to have software reuse as a goal.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Problem&#xD;
&lt;/h3>Without a clear policy for factoring reusable logic, the chances for reuse are lower.&lt;br />&#xD;
&lt;h3>&#xD;
    Forces&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Reuse requires identifiable reusable elements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Appropriate reuse factoring does not happen by accident.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;br />&#xD;
    Solution&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Have a clear policy for factoring reusable logic across your architectural layers.&lt;br />&#xD;
    Reusable logic can be divided into the following two categories:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Logic which is strongly related to a business object (and therefore a domain type). An example would be customer&#xD;
        account setup logic which is related to the domain type CustomerAccount.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Infrastructure logic. For example, logic that allowed e-mails to be sent or documents printed.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Both of these types of logic are highly reusable and are respectively factored into the following two service&#xD;
    architecture layers:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Atomic business application services.&amp;nbsp; That is, services which do not depend upon other exposed services for&#xD;
        their realization.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Infrastructure services.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The layers that these services live in are lower in the architecture than are &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/termdefinitions/service_consumer_91384414.html&quot; guid=&quot;_HDs9YIQuEd6VVeXj3w86dA&quot;>service consumers&lt;/a> and &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/termdefinitions/composite_service_2B492DE6.html&quot; guid=&quot;_Hm7qcIQnEd6pOcahJ5wBfA&quot;>composite business application services&lt;/a>. These services are generally used&amp;nbsp;by&#xD;
    composite business application services (which explains the name).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Although the factoring rules in this pattern are for ensuring that we end up with reusable services that are&#xD;
    appropriate for plugging into composite services,&amp;nbsp;service consumers are themselves reusable (specifically across&#xD;
    multiple &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/termdefinitions/service_oriented_solution.supp_soa_B0376546.html&quot; guid=&quot;_Frp-0IROEd6jqtIeWlQI8A&quot;>service-oriented (SO) solutions&lt;/a>).&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Rationale&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Having clearly identified where the reuse points are in our architecture, we can now:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Publish these services to a repository for reusable services.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Enable&amp;nbsp;the reusable services in this repository to be categorized.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ensure that we factor reusable logic into these services when modeling service interactions (which is when logic&#xD;
        gets factored across your architecture).&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
