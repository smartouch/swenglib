<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-ji6_cqVkivK5ylRIU_wYGw" name="new_concept,_NKV2AHyPEd6buIXZTkenBw" guid="-ji6_cqVkivK5ylRIU_wYGw" changeDate="2009-10-06T22:32:40.515-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Context&#xD;
&lt;/h3>&#xD;
&lt;p align=&quot;left&quot;>&#xD;
    A software architecture defines the software in terms of a set of parts that together make up distinguishable software&#xD;
    systems.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;left&quot;>&#xD;
    It is common to have in place a standard for identifying, naming and scoping these parts to ensure a common approach is&#xD;
    followed across the organization.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;h3>&#xD;
    Problem&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Identifying, naming, and scoping the parts in your service architecture on things that are not part of the business&#xD;
    view causes problems.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Relevant examples of things outside of the business view are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Existing software applications&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Component implementation technologies (for example, EJB)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Communications &quot;plumbing&quot; between components&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Forces&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The service architecture is affected unnecessarily if parts are based on things outside of the business view and&#xD;
        these things are disappeared or changed substantially.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        In general, impacts that cause changes to architectural specifications are more serious than those that only&#xD;
        require changes to implementations (changes to one architectural element will typically affect multiple design&#xD;
        elements and an even greater number of implementation elements).&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;br />&#xD;
    Solution&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Derive parts of your service architecture on the following business relevant things:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.bus.common.extend-ibm/guidances/concepts/functional_area_analysis_9B1F96D5.html&quot; guid=&quot;_fk1woEo1Ed6D_7XK49c0nw&quot;>Functional areas&lt;/a> (these yield IT subsystems mapped from &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.bus.common.extend-ibm/guidances/concepts/business_subsystem_622C6CDE.html&quot; guid=&quot;_zfz4kGpmEd6g0_jzBUWUGg&quot;>business subsystems or business service interfaces&lt;/a>)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Business processes&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Business sub-processes&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Domain types&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Here is a simple set of factoring rules for achieving this:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        For each business process, define a &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/termdefinitions/service_consumer_91384414.html&quot; guid=&quot;_HDs9YIQuEd6VVeXj3w86dA&quot;>service consumer&lt;/a>&amp;nbsp;to serve as a proxy for the business process (see &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/supportingmaterials/pattern_12_represent_processes_as_service_consumers_AC87EEDA.html&quot; guid=&quot;_y0mr0H8UEd6EC8v3b_fCaQ&quot;>Pattern 12&lt;/a> for more discussion on this). This service consumer will consume any&#xD;
        services that support that business process. If executable business processes are being built, then the executable&#xD;
        business process will form part of the implementation of the service consumer.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        For each business sub-process, identify a &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/termdefinitions/composite_service_2B492DE6.html&quot; guid=&quot;_Hm7qcIQnEd6pOcahJ5wBfA&quot;>composite business application service&lt;/a> to provide the services that it requires.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        For each domain type, identify an &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/termdefinitions/atomic_service_1B031A6D.html&quot; guid=&quot;_RmMI4IQnEd6pOcahJ5wBfA&quot;>atomic business application service&lt;/a> (this is described further in &quot;&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/supportingmaterials/pattern_06_derive_atomic_services_from_domain_model_22D3F391.html&quot; guid=&quot;_ales0HobEd6spLUpguTNDw&quot;>Pattern 6: Derive atomic services from domain model&lt;/a>&quot;).&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    For a fully service-oriented solution, the business process could be realized by a service &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/participant_soaml_1A392457.html&quot; guid=&quot;_zL3kgFbAEd6MCpkuB85p5g&quot;>Participant&lt;/a> that assembles other Participants into a &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_architecture_soaml_22F25B9A.html&quot; guid=&quot;_wYQYkEo3Ed6D_7XK49c0nw&quot;>ServicesArchitecture&lt;/a>, and which then provides entry to the business process using an&#xD;
    exposed service.&amp;nbsp; See &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_composition_and_choreography_67057C86.html&quot; guid=&quot;_yAh28IA6Ed6H1oy6lZPykw&quot;>Concept: Service Composition and Choreography&lt;/a>&amp;nbsp;for further discussion.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>Rationale&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Deriving parts for your service architecture from business things provides a solid architecture. This means:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Your service architecture will no longer be affected greatly&amp;nbsp;by changes to non-business things (for example,&#xD;
        retiring and replacing existing applications, or choosing a new component implementation technology).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The architecture will be able to &quot;flex&quot; with changes to the business rather than changes to non-business things.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        This reduces the number of unnecessary specification changes. Changes to the non-business things listed above still&#xD;
        require software change, but such change will be to detailed design and implementation rather than to the&#xD;
        architecture. These types of changes have less overall impact.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h5>&#xD;
    Tip: Some words of warning in applying this pattern:&#xD;
&lt;/h5>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Depending on how the business entities themselves have been factored, you might end up with parts that are &quot;too&#xD;
        big&quot; if you just apply a simple 1-to-1 derivation. In these cases you&amp;nbsp;need a further subdivision to create&#xD;
        &quot;smaller&quot; parts.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A bit of creativity and experimentation might be required to create factoring rules that work for you. The&#xD;
        important point is that these rules have to be based on things in the business view.&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
