<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-K4mIQVN3wc9O9S-4eW-9Bg" name="new_concept,_X-WbEH8UEd6EC8v3b_fCaQ" guid="-K4mIQVN3wc9O9S-4eW-9Bg" changeDate="2009-09-23T21:27:57.140-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Context&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Rational Unified Process&amp;nbsp;provides the following definition for coupling:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;em>The degree to which components depend on one another. There are two types of coupling, tight and loose. Loose&#xD;
    coupling is desirable to support an extensible software architecture, but tight coupling might be necessary for maximum&#xD;
    performance. Coupling is increased when the data exchanged between components becomes larger or more complex.&lt;/em>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Component, as it is used in this definition, is a piece of software that is encapsulated and forms a unit of&#xD;
    independent deployment and versioning.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When components share artifacts it increases the coupling between them.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The specification of a component is made up of those artifacts that describe it from a black-box point of view.&lt;br />&#xD;
    Included in this are the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Service specification&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Parameter types&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Even if the implementations of a set of components are totally decoupled, if any of the components share parts of their&#xD;
    specification then this increases coupling.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Problem&#xD;
&lt;/h3>Sharing specification artifacts between &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/participant_soaml_1A392457.html&quot; guid=&quot;_zL3kgFbAEd6MCpkuB85p5g&quot;>Participants&lt;/a> has some problematic side effects.&lt;br />&#xD;
&lt;h3>&#xD;
    Forces&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Changes to these shared specification artifacts affect multiple Participants.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Where specialized versions of parameter types are required, there is a mixture of shared parameter types and&#xD;
        specialized &quot;local&quot; parameter types, which is slightly more complex than just having local parameter types.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &amp;nbsp;The size of the shared service specification artifacts library quickly grows in size. Factoring these out&#xD;
        into separate libraries based on some factoring rule itself becomes quite complex.&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Solution&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Each&amp;nbsp;Participant&amp;nbsp;needs to&amp;nbsp;own its:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/termdefinitions/parameter_type_8B026E69.html&quot; guid=&quot;_vZhEkJf4Ed6l6vBsNJSPDA&quot;>Parameter types&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Enumerations&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/termdefinitions/message_F04CD4DA.html&quot; guid=&quot;_-1aDcJf7Ed6l6vBsNJSPDA&quot;>Messages&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Provided &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_interface_soaml_CA95983A.html&quot; guid=&quot;_N5e2oFbBEd6MCpkuB85p5g&quot;>service specifications&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Each&amp;nbsp;Participant&amp;nbsp;also needs to&amp;nbsp;own its &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/termdefinitions/information_type_4B464FEE.html&quot; guid=&quot;_eKae0Jf5Ed6l6vBsNJSPDA&quot;>info types&lt;/a> as well, but this is by definition as info types are used to model data&#xD;
    ownership (see &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/supportingmaterials/pattern_08_model_data_control_points_8D5026CE.html&quot; guid=&quot;_mCnegHobEd6spLUpguTNDw&quot;>Pattern 08: Model Data Control Points&lt;/a>).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In this way the specification of the&amp;nbsp;Participant is totally decoupled from other specifications. The only&#xD;
    resources shared between Participants are primitive types.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/termdefinitions/composite_service_2B492DE6.html&quot; guid=&quot;_Hm7qcIQnEd6pOcahJ5wBfA&quot;>composite business application services&lt;/a>, where a Participant both provides and&#xD;
    requests services, there is some coupling between the composite business application service and the Participant&#xD;
    providing the services that it requires. You can break this coupling by introducing a local copy of the required&#xD;
    service specification.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Although it&amp;nbsp;seems like substantial additional work to maintain separate copies of certain specification artifacts&#xD;
    (where they look the same across multiple service providers), this can be reduced (or even negated in some cases) by&#xD;
    using Rational Software Architect transformations-for example from domain types to parameter types.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Rationale&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Not sharing specification artifacts prevents dependency issues as follows:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Changes to the specification artifacts mentioned above have only localized impact.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It is&amp;nbsp;more clear as to where specification artifacts come from when they are used, as they are all local-in&#xD;
        other words, there is no combination of local and shared specification artifacts in use in a Participant&#xD;
        specification.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        No rules are required for when to factor a specification artifact out as a shared artifact.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Note&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In this pattern, we talk about keeping &lt;em>architectural elements&lt;/em> decoupled, where the architectural elements are&#xD;
    the specification-level modeling elements from the service model. Keeping these architectural elements decoupled does&#xD;
    not imply that the realization or implementation of these elements (for example, the code) will be decoupled as well.&#xD;
&lt;/p>&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
