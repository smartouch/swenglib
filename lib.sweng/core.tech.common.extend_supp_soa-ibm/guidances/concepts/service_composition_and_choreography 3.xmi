<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-3-3-1TwxfnLWQI2PA-HamA" name="new_concept,_yAh28IA6Ed6H1oy6lZPykw" guid="-3-3-1TwxfnLWQI2PA-HamA" changeDate="2009-10-29T08:16:30.093-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>Introduction&lt;/strong>&lt;/font>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    One key aspect of Service-Oriented Architecture (SOA) is that services be composable, which means that a new service is&#xD;
    often composed as a collaboration between a set of existing services. In many respects this is true of existing&#xD;
    component-based and object-oriented techniques, except that certain capabilities in the middleware being used to&#xD;
    develop service-oriented solutions allows the direct execution of these collaborations through standards such as&#xD;
    &lt;i>Business Process Execution Language for Web Services&lt;/i> (BPEL4WS, WS-BPEL or just BPEL). It is this ability to&#xD;
    compose services structurally, that is to define the usage dependencies between services, and also to compose services&#xD;
    behaviorally that makes a services-based architecture and IT strategy attractive to so many organizations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    More and more organizations are realizing the need for increased agility in their ability to respond to changing&#xD;
    business environments, whether it's the pressure of globalization, new markets and channels, or simply new competitors&#xD;
    using technology more efficiently. These organizations are looking towards service-oriented development and&#xD;
    service-oriented solutions as a way to organize their IT assets to address current requirements and provide an&#xD;
    infrastructure of business-aligned functions that can be reused, reconfigured, and recombined efficiently and&#xD;
    effectively to address future requirements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Another aspect of the ability to compose services in this manner is that it provides a flexible way to incorporate&#xD;
    existing IT assets into new solutions in the same manner as newer assets. For example, existing assets, even those&#xD;
    developed for mainframe platforms and similar, can be exposed as services with some middleware products and integrated&#xD;
    in the same way as new services developed using JEE, IBM WebSphere or Microsoft .NET. Unfortunately, most existing&#xD;
    assets tend not to be developed with interfaces that adhere to much of the guidance we would use for new services. As&#xD;
    such, it is useful to create composite services that do not just wrap these existing services, but rather provide&#xD;
    different, more business-aligned interfaces that leverage the existing functions by aggregating and choreographing them&#xD;
    to provide the higher-level capability.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;font size=&quot;4&quot;>Service Choreography&lt;/font>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The term, &lt;i>Choreography,&lt;/i> is&amp;nbsp;used in many middleware products to denote the managed execution of some script&#xD;
    denoting a process flow, where the participants are services and the tasks are message exchanges. In some products, the&#xD;
    term &lt;i>Orchestration&lt;/i> is used. While some industry analysts and technologists describe differences in the meaning&#xD;
    of the words and how these terms are used in standards, for most users the differences are much less interesting than&#xD;
    the similarities.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In terms of standards, a common way to represent the choreography of Web Services was late in coming, after most of the&#xD;
    leading middleware vendors introduced proprietary solutions. The current industry standard is the Business Process&#xD;
    Execution Language for Web Services (WS-BPEL, BPEL4WS, or simply BPEL). For more information on WS-BPEL, see&#xD;
    the&amp;nbsp;Wikipedia article on &lt;a href=&quot;http://en.wikipedia.org/wiki/Business_Process_Execution_Language&quot; target=&quot;_blank&quot;>Business Process Execution Language&lt;/a> or the &lt;a href=&quot;http://www.ibm.com/developerworks/library/specification/ws-bpel/&quot; target=&quot;_blank&quot;>IBM BPEL site&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>Services as Composite Structures&lt;/strong>&lt;/font>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Services can easily be developed upon the functions provided by other services in a recursive manner, as shown in the&#xD;
    diagram below, where services can identify those services they rely upon. In this case, an instance of the&#xD;
    OrderProcessor &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/participant_soaml_1A392457.html&quot; guid=&quot;_zL3kgFbAEd6MCpkuB85p5g&quot;>Participant&lt;/a> is using services provided by instances of the Invoicer, Productions,&#xD;
    and Shipper Participants to implement the&amp;nbsp;operations provided by its Purchasing service.&amp;nbsp; These four&#xD;
    instances are assembled by the Manufacturer Participant, which delegates its implementation of Purchasing to the&#xD;
    OrderProcessor instance.&amp;nbsp;&amp;nbsp; As a hidden detail, the processPurchaseOrder operation of the Purchasing service&#xD;
    provides entry to the realization of a Purchase Order processing business process.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Composite services&amp;nbsp;often are used where the usual factoring of service capabilities identifies common functions&#xD;
    that&amp;nbsp;can be provided in more than one circumstance. For some services, where the role is more to provide&#xD;
    infrastructure capabilities, this is relatively easy to identify. In other cases, detailed service collaborations will&#xD;
    identify the need to split a candidate service into more than one actual service.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Figure 1.&amp;nbsp; Example of a composite service&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;197&quot; alt=&quot;&quot; src=&quot;./resources/participant_example_3a.gif&quot; width=&quot;576&quot; />&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    One important use of composite services is to provision&amp;nbsp;functions realized by existing (legacy) assets. In many&#xD;
    cases, such functions are accessed using connectors or APIs provided by the asset itself, and a new service is&#xD;
    developed which relies on these assets for some logic. In some cases, an alternative strategy can be used&#xD;
    to&amp;nbsp;enable the aggregate component to evolve more flexibly and to&amp;nbsp;permit the existing asset to be swapped out&#xD;
    in the future for a different implementation.&amp;nbsp; In this alternative approach, each existing function is exposed as&#xD;
    an independent service.&amp;nbsp; These services are then used by the composite service.&amp;nbsp; This strategy enables both&#xD;
    the existing assets and the composite services to evolve independently.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This latter approach can have&amp;nbsp;some&amp;nbsp;drawbacks. If the low-level services that realize the composite&amp;nbsp;can&#xD;
    be exposed&amp;nbsp;only&amp;nbsp;by using Internet protocols such as SOAP/HTTP, they are likely to be less reliable and have&#xD;
    poorer performance than if they are accessed&amp;nbsp;using a native API or connector. These tradeoffs have to be a part of&#xD;
    the general set of architectural decisions made and documented as part of any service design.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A composite service also can be used when the set of&amp;nbsp;services to be leveraged by the composite&amp;nbsp;is not known&#xD;
    completely. For example, consider an order management service.&amp;nbsp; We might identify the need to separate&#xD;
    out&amp;nbsp;order validation as a separate set of independent business rule services, such that new rules can be added&#xD;
    later. This is related to the topic of service mediation (see &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_mediation_203F5FA1.html&quot; guid=&quot;_iEqOcGtlEd6dX9uDBR7y4Q&quot;>Concept: Service Mediation&lt;/a>).&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>Service Collaborations&lt;/strong>&lt;/font>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    We use the notions of &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/termdefinitions/service_collaboration_35276470.html&quot; guid=&quot;_V4z3YJgtEd6l6vBsNJSPDA&quot;>service collaborations&lt;/a>, &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_contract_soaml_E57B30D4.html&quot; guid=&quot;_IhtgsFbBEd6MCpkuB85p5g&quot;>ServiceContracts&lt;/a>, and&amp;nbsp;&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_architecture_soaml_22F25B9A.html&quot; guid=&quot;_wYQYkEo3Ed6D_7XK49c0nw&quot;>ServicesArchitectures&lt;/a> to support&amp;nbsp;modeling the behavior of composite services.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        During &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../practice.tech.soma.service_identification.base-ibm/guidances/practices/service_identification_4932DF0E.html&quot; guid=&quot;_GdFlkK9UEd2qXOsgZ_h9PA&quot;>Service Identification&lt;/a>&amp;nbsp;and early in &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../practice.tech.soma.service_specification.base-ibm/guidances/practices/service_specification_E8335628.html&quot; guid=&quot;_S80AALaDEd2n36KPip6Xng&quot;>Service Specification&lt;/a>, we use&amp;nbsp;collaboration&amp;nbsp;between Interfaces, &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_interface_soaml_CA95983A.html&quot; guid=&quot;_N5e2oFbBEd6MCpkuB85p5g&quot;>ServiceInterfaces&lt;/a>, and/or&amp;nbsp;&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/capability_soaml_56747F9.html&quot; guid=&quot;_A5_hYFbBEd6MCpkuB85p5g&quot;>Capabilities&lt;/a> as an analysis-level tool to describe the roles, high-level&#xD;
        responsibilities, and communication patterns&amp;nbsp;of services.&amp;nbsp;&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        We continue using collaborations during Service Specification to help derive the detailed specifications of&#xD;
        ServiceInterfaces, including the operation signatures and the messaging protocols that providing and consuming&#xD;
        Participants must follow during their interactions.&amp;nbsp;&amp;nbsp;If the collaboration involves a single provider and&#xD;
        a single consumer, it is straightforward to have it be an owned behavior of the ServiceInterface, itself.&amp;nbsp;&#xD;
        &amp;nbsp;If the collaboration involves a provider and multiple consumers, it is best to represent this as a formal&#xD;
        ServiceContract.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The collaboration of the community of&amp;nbsp;Participants that is involved in realizing the composite's service&#xD;
        operations&amp;nbsp;can be described using a ServicesArchitecture.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The ServicesArchitecture&amp;nbsp;includes a composite structure, as well as a behavior denoting the messages exchanged and&#xD;
    their sequencing.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The composite structure can be used to show the following types of information:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The instances of the Participants that are involved in the collaboration;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The run-time connections between the instances,&amp;nbsp;described using&amp;nbsp;&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_channel_soaml_11F0BAA8.html&quot; guid=&quot;_pOTTMGaaEd65K8S2sWS35w&quot;>ServiceChannels&lt;/a>;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The ServiceContracts between each sub-community of interacting instances.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The earlier composite structure diagram for the Manufacturer Participant provided a view of the collaborating&#xD;
    instances&amp;nbsp;and their run-time connections,&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following composite structure diagram, Figure 2,&amp;nbsp;shows an alternative rendering for&#xD;
    Manufacturer.&amp;nbsp;&amp;nbsp;This&amp;nbsp;is a structure diagram for&amp;nbsp;the ServicesArchitecture for Purchase Order Process,&#xD;
    which the constituent parts of Manufacturer collectively realize.&amp;nbsp;&amp;nbsp;Here, we see the Participant instances&#xD;
    involved in the process&amp;nbsp;and the ServiceContracts that they must abide by.&amp;nbsp; The larger rectangular parts&#xD;
    within the ServicesArchitecture represent the instances of the&amp;nbsp;Participants that collaborate to realize the&#xD;
    business process.&amp;nbsp; The dashed ovals represent the ServiceContracts that govern the interactions between&#xD;
    Participants.&amp;nbsp; The dashed lines between the ovals and the &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_point_soaml_E250D92A.html&quot; guid=&quot;_9jRdMFbAEd6MCpkuB85p5g&quot;>ServicePoints&lt;/a>/&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/request_point_soaml_DD83CF2.html&quot; guid=&quot;_5DYKcFbAEd6MCpkuB85p5g&quot;>RequestPoints&lt;/a>&amp;nbsp;that are on each Participant define the roles that each&#xD;
    Participant plays in a ServiceContract.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Figure 2.&amp;nbsp; Composite structure for Manufacturer ServicesArchitecture&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &amp;nbsp;&amp;nbsp; &lt;img height=&quot;443&quot; alt=&quot;&quot; src=&quot;./resources/pop_serv_arch.gif&quot; width=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the context of service solution design,&amp;nbsp;the notion of&amp;nbsp;Service Collaboration is analogous to the notion of&#xD;
    choreography in web services terms. It represents a configurable, externalized flow description sequencing a set of&#xD;
    message exchanges between services. In most middleware implementing choreography, the flow is described in an XML&#xD;
    language such as BPEL. Such a language could be generated from the service collaboration described in the&amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/workproducts/service_model_B9A1BF81.html&quot; guid=&quot;_IgcA4Eo1Ed6D_7XK49c0nw&quot;>Artifact: Service Model&lt;/a> when the flow itself is described with UML 2 Activities or&#xD;
    Interactions.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>Specifying Service Behavior&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As was stated above, a Collaboration -- be it a UML Collaboration, a ServiceContract, or a ServicesArchitecture&#xD;
    --&amp;nbsp;shows both the structure&amp;nbsp;and the behavior of the&amp;nbsp;interacting instances.&amp;nbsp;&amp;nbsp;It is most common&#xD;
    to use either UML 2 Activities or Interactions, specifically Sequence Diagrams, to describe the flow of messages&#xD;
    between&amp;nbsp;instances in a collaboration. The diagram below is a UML 2 Activity Diagram demonstrating the behaviors of&#xD;
    the four Participant instances that are involved in realizing the Purchase Order Process.&amp;nbsp; This specific diagram&#xD;
    is owned by the Purchase Order Process ServicesArchitecture.&amp;nbsp; It is usual to build a similar behavioral diagram&#xD;
    for each&amp;nbsp;service operation that is realized. These behaviors are owned by the Participant that realizes the&#xD;
    pertinent service operation.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Figure 3.&amp;nbsp; Activity diagram for Purchase Order Process&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &amp;nbsp;&lt;img height=&quot;367&quot; alt=&quot;&quot; src=&quot;./resources/pop_process_serv_arch.gif&quot; width=&quot;596&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>Specifying Service Bindings&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The bindings (actual physical protocols and message encodings) used to communicate between services are properties of&#xD;
    the service channel itself.&amp;nbsp;&amp;nbsp;The bindings&amp;nbsp;used between services have significant impact on&#xD;
    non-functional requirements such as performance, reliability, and security. So, the available choices&amp;nbsp;need&#xD;
    to&amp;nbsp;be documented with the consequences of each identified within the overall system architecture. For example, it&#xD;
    might be that one use of service partitions (described using &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/participant_soaml_1A392457.html&quot; guid=&quot;_zL3kgFbAEd6MCpkuB85p5g&quot;>Participan&lt;/a>t notation) is to represent allowable or required binding between services&#xD;
    within the partition.&amp;nbsp; A&amp;nbsp;common requirement is&amp;nbsp;that services within some logical &lt;i>zone&lt;/i> communicate&#xD;
    using a high-performance,&amp;nbsp;proprietary binding, whereas communication with services outside of the &lt;i>zone&lt;/i> uses&#xD;
    lower-performing, but standardized, bindings.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Kind in mind&amp;nbsp;that, even though Web services present a simple model and a set of simple, flexible protocols, you&#xD;
    are not restricted to these choices. Just as WSDL already has bindings for both SOAP and HTTP GET/PUT, it is important&#xD;
    to provide requesters with additional choices. For example, a single service&amp;nbsp;can expose a message using a&#xD;
    message-queue binding and a SOAP binding, so the requester can choose the more appropriate binding to use. In this&#xD;
    case, the provider&amp;nbsp;might also provide incentives, such as a guaranteed service level if the message queue is used,&#xD;
    but no service guarantees for an HTTP conversation.&amp;nbsp;&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
