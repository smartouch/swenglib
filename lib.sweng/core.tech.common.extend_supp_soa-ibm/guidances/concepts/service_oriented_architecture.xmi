<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-TRSoZ8au6FtgQUZcB6SKpw" name="service_oriented_architecture,_xvH6UEo2Ed6D_7XK49c0nw" guid="-TRSoZ8au6FtgQUZcB6SKpw" changeDate="2009-10-06T21:16:40.234-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>Introduction&lt;/strong>&lt;/font>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;2&quot;>Service Oriented Architecture (SOA) is a way of organizing and understanding organizations, communities,&#xD;
    and systems to maximize agility, scale, and interoperability. The SOA approach is simple - people, organizations, and&#xD;
    systems provide services to each other. These services&amp;nbsp;enable us to get something done without doing it ourselves&#xD;
    or even without knowing how to do it, enabling us to be more efficient and agile. Services also enable us to offer our&#xD;
    capabilities to others in exchange for some value, thus establishing a community, process, or marketplace. The SOA&#xD;
    paradigm works equally well for integrating existing capabilities, as well as creating and integrating new&#xD;
    capabilities.&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;2&quot;>A service is an offer of value to another through a well-defined interface.&amp;nbsp; It is available to a&#xD;
    community (which might be the general public). A service results in work provided to one by another. SOA, then, is an&#xD;
    architectural paradigm for defining how people, organizations, and systems provide and use services to achieve&#xD;
    results.&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;2&quot;>SOA has been associated with a variety of approaches and technologies. The view expressed here is that&#xD;
    SOA is foremost an approach to systems architecture, where architecture is a way to understand and specify how things&#xD;
    can best work together to meet a set of goals and objectives. Systems, in this context, include organizations,&#xD;
    communities, and processes as well as information technology systems. The architectures described with SOA&amp;nbsp;can be&#xD;
    business architectures, mission architectures, community architectures, or information technology systems architectures&#xD;
    - all can be equally service oriented. The SOA approach to architecture helps with separating the concerns of what&#xD;
    needs to get done from how it gets done, where it gets done, or who or what does it.&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;2&quot;>&lt;font size=&quot;4&quot;>&lt;strong>SOA in the IT Realm&lt;/strong>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The difficulties in building enterprise-scale software solutions arise from at least four primary sources of&#xD;
    challenges:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Understanding highly complex business domains.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Assessing the most efficient use of IT resources to meet the needs of the business.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Managing a development effort involving large teams of engineers over multiple phases of a project spanning many&#xD;
        months.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Deploying solutions to a complicated assortment of infrastructure technologies that have evolved over multiple&#xD;
        years, consist of a variety of middleware software acquired from many vendors, and were assembled through poorly&#xD;
        documented integration efforts of varied quality.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    To develop solutions in this context requires an approach to software architecture that helps architects evolve their&#xD;
    solutions in flexible ways and reuse existing efforts in the context of new capabilities that quickly implement&#xD;
    business functionality even as the target infrastructure itself is evolving. The SOA paradigm can be used effectively&#xD;
    to create the loosely-coupled IT systems that offer the flexibility and potential for reuse that are desirable.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    However, moving toward SOA provides many challenges to an organization. Service-oriented concepts, for example,&#xD;
    introduce new terms and models and promote interoperability and process integration. Additionally, integrating the many&#xD;
    underlying technology layers that constitute a SOA can be a&amp;nbsp;complex task. IT organizations often find that they&#xD;
    require changes in approach, upgrades to their skill set, new capabilities in their development environments, and&#xD;
    changes to solutions-design processes. To compound this, the concept of SOA is a recent phenomena and its&#xD;
    characteristics are continuing to evolve. However, there are several clear perspectives on what is an SOA and the role&#xD;
    of a SOA in addressing key concerns in building enterprise software solutions.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>SOA as a Technology Infrastructure&lt;/strong>&lt;/font>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Systems are composed of collections of services making calls on operations defined through their service interfaces.&#xD;
    Many organizations now express their solutions in terms of services and their interconnections. The ultimate goal of&#xD;
    adapting a SOA is to achieve flexibility for the business and within IT. A number of important technologies have been&#xD;
    defined to support an SOA approach, most notably when the services are distributed across multiple machines and&#xD;
    connected over the Internet or an intranet. These web-service approaches rely on intra-service communication protocols&#xD;
    such as SOAP;&amp;nbsp;enable web service interfaces (expressed in the Web Services Definition Language - WSDL) to be&#xD;
    registered in public directories and searched in Universal Description, Discovery and Integration (UDDI) repositories;&#xD;
    and share information in documents defined in the XML and described in standard schemas. Additionally, standards are&#xD;
    being developed to address additional areas of policy, security, reliability, discovery, and more; this family of&#xD;
    standards is commonly known as the &quot;WS-* family&quot;.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    But SOA is no more simply a set of standards and service descriptions than object-orientation is simply a set of class&#xD;
    hierarchies. Indeed, it is possible to create a SOA that does not use Web services technology, and it is possible to&#xD;
    use web services technology in a way that would not be considered service-oriented. There is a great deal more that&#xD;
    needs to be explored to understand why a service-oriented viewpoint adds value to the business, and how&#xD;
    service-oriented solutions are designed, implemented, deployed, and managed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>SOA as a Conceptual Framework for Design&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Creating solutions for SOA means rethinking the kinds of systems being built today, reconsidering the skills in an&#xD;
    organization, and redefining the ways in which members of teams collaborate. Most importantly, adopting a services&#xD;
    orientation to development of solutions requires a broader review of its impact on how solutions are designed, what it&#xD;
    means to assemble them from disparate services, and how deployed services-oriented solutions are managed and evolved.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    One key change in this move is that the term &quot;application&quot; as we have known it is becoming problematic as we move from&#xD;
    the application as being the center of all projects to the focus being on the portfolio of services a business relies&#xD;
    on. In this regard, we can think of this move from application-oriented projects to service-oriented projects as a move&#xD;
    from the design of a vertically integrated set of components that make an application toward the design of a horizontal&#xD;
    set of services. In the future, we see the term application being relegated to the description of a small layer of&#xD;
    specific business logic close to the user interaction services that choreographs the set of business and infrastructure&#xD;
    services that provide the bulk of the value.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;a href=&quot;http://www.gartner.com/&quot;>Gartner&lt;/a> refers to this broader context of service-orientation as Service-Oriented&#xD;
    Development of Applications (SODA). Gartner considers the five key tenets of SODA to be composition, adaptive process&#xD;
    management, services-based interoperability and integration, discovery and description, and rapid application&#xD;
    maintenance. From a tool vendor perspective, these areas relate to technology support offered in three areas:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>SOA Life Cycle&lt;/b>. The &quot;Discovery and Description&quot; and &quot;Rapid Application Maintenance&quot; tenets refer to the life&#xD;
    cycle of services and how they are found, applied, evolved, and maintained. Tool vendors are increasingly offering ways&#xD;
    to store, catalog, search, and retrieve services. Support for the ongoing evolution of services is a critical aspect of&#xD;
    this, leading to multiple versions of services.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>SOA Platform and Programming Model&lt;/b>. The Service-Based Interoperability and Integration tenet refers to the way&#xD;
    services can be connected, deployed, and managed within a specific runtime platform. The major platform vendors are&#xD;
    supporting services-oriented capabilities directly as part of the middleware runtimes, and evolving their runtime&#xD;
    programming models to surface service concepts as first class elements. As a result, solutions&amp;nbsp;can be conceived,&#xD;
    designed, implemented, and managed from a single service-based perspective.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>SOA Practices and Tools&lt;/b>. The Composition and Adaptive Process management tenets refer to how services are&#xD;
    created and assembled in the context of solving changing business needs. Tool vendors support mining existing&#xD;
    applications to discover potential services, wrapping existing functionality to make those capabilities accessible as&#xD;
    services, creation of new services, and connecting services by connecting behavior exposed through their interfaces.&#xD;
    Fundamental to this is the availability of clear guidance and best practices for architecting services-oriented&#xD;
    solutions in repeatable, predictable ways.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    All three of these areas are important to success in developing services-oriented solutions. They must all be addressed&#xD;
    to meet an organization's needs for efficiently creating more flexible solutions that better align with the goals of&#xD;
    the business.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>SOA as an Holistic Approach to Solutions that Bridge Business and IT&lt;/strong>&lt;/font>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    One of the primary challenges to be addressed in developing enterprise-scale solutions is to connect the&#xD;
    domain-specific requirements expressed by business analysts with the technology-specific solutions designed by the IT&#xD;
    organization. Typically, the connection between these two disparate worlds is not good. The two communities have very&#xD;
    different skills, use different modeling concepts and notations (if at all), and rarely understand the mapping between&#xD;
    those concepts. The use of a service-oriented approach is intended to help bridge this gap between the business&#xD;
    analysts and line-of-business specialists and IT specialists such as architects, system analysts, integrators,&#xD;
    designers and developers. In particular, the integration of process, assets, and deliverables around a core set of&#xD;
    services is intended to connect these two different aspects of the system in a clear, precise way.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    SOA offers a service-focused view to help overcome these challenges:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Bridging the Business-to-IT gap&lt;/b>. It is essential to align the business view of activities and processes with the&#xD;
    technology that is used to realize parts of these activities. This alignment includes the ability for business models&#xD;
    to drive downstream development and to evolve the business models and IT solutions in combination. The service concept&#xD;
    is critical to this alignment. Services and service-based thinking form the common ground that ties together business&#xD;
    analysts, IT architects, integrators, and developers. The very nature of services, the level of granularity and level&#xD;
    of encapsulation that they promote,&amp;nbsp;enables them to be much closer aligned to the business process models that&#xD;
    drive the business. Common design practices are essential to this to ensure that the concepts, work products, and tasks&#xD;
    are synchronized across these different perspectives. Finally, having tools which can efficiently transform models&#xD;
    representing the business intent into efficient implementations&amp;nbsp;are very important for bridging the Business-to-IT&#xD;
    gap.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Supporting the changing roles in the IT organization&lt;/b>. The move to services thinking changes the skills and&#xD;
    composition of teams in an organization. The focus of development is on finding, defining, managing, and assembling&#xD;
    services, with architectural descriptions highlighting service level agreements (SLAs) and inter-service protocols. The&#xD;
    traditional breakdown of tool functions into today's line-up of products is not appropriate to this approach. There&#xD;
    will be a different blend of capabilities required by the different members in IT organizations. For example, the&#xD;
    skills required by existing roles such as software architect are changing to include greater emphasis on assembly and&#xD;
    management of services across a diverse set of service providers. Similarly, new roles such as integration specialists&#xD;
    are emerging, with a focus&amp;nbsp;on assembling a services-based value chain in support of an organization's key business&#xD;
    goals.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Focusing on assets and reuse&lt;/b>. Considering services as key assets in the design of systems changes an&#xD;
    organization's view of the value of reusing these services. Earlier, we discussed the move from vertical development of&#xD;
    a set of application components to the horizontal integration of components. One valuable aspect of this is that the&#xD;
    services themselves become much more available for reuse. In fact, their combination into new capabilities, their&#xD;
    composition into new services, is a fundamental driver for change. In many businesses, this promise of greater reuse&#xD;
    from a SOA justifies the cost associated with the design and development of a portfolio of services. As a result,&#xD;
    technologies and techniques for managing and governing assets and repeatable ways to capture patterns for combining&#xD;
    assets become much more important. In an asset-based development approach, these assets hold critical value to the&#xD;
    organization and must be carefully managed and administered. The team infrastructure for managing assets takes on a&#xD;
    key role in this approach.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Increasing the levels of collaboration within and across practitioner roles&lt;/b>. Successful Enterprise-scale&#xD;
    application development has always depended upon the ability of people to&amp;nbsp;people work together and&amp;nbsp;focus&#xD;
    their attention across the life-cycle on managing shared assets, establishing work product traceability, and sharing&#xD;
    practices and processes. As organizations become&amp;nbsp;more geographically distributed and&amp;nbsp;software&#xD;
    becomes&amp;nbsp;embedded as one part of broader systems development initiatives, the importance of effective collaboration&#xD;
    among and between teams increases.&amp;nbsp;To support these evolving organizations and missions, software development&#xD;
    infrastructures must become effective collaborative development environments that encourage sharing and reusing&#xD;
    services across teams.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>SOA as an evolution of Component-Based and Object Oriented Techniques&lt;/strong>&lt;/font>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In any new development in software engineering, it is very easy to assume that one can apply the same techniques and&#xD;
    tools that have worked in previous projects. This tendency to solve new problems with outdated solutions is not new. In&#xD;
    a similar way, as developers began to create component-based applications, they tried to address problems by using&#xD;
    their experience with object-oriented development. With more experience, it was understood that object-oriented&#xD;
    technology and languages are great ways to implement components, though one has to understand the trade-offs made&#xD;
    through decisions and implementation. Trade-offs include choices such as&amp;nbsp;using inheritance versus aggregation for&#xD;
    implementing polymorphic behavior, and redesigning class libraries to be able to use sets of components, rather than&#xD;
    objects, as the base for a monolithic C++ application.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In a similar way, we see components as the best way to implement services, though one has to understand that an&#xD;
    exemplary component-based application does not necessarily make an exemplary SOA. We see a great opportunity to&#xD;
    leverage your company's component developers and existing components, once the role played by services in application&#xD;
    architecture is understood. The key to making this transition is to realize that a service-oriented approach implies an&#xD;
    additional application architecture layer. The picture below demonstrates how technology layers can be applied to&#xD;
    application architecture to provide more coarse-grained implementations as one gets closer to the consumers of the&#xD;
    solution. The term coined to refer to this part of the system is &quot;the application edge&quot;, reflecting the fact that a&#xD;
    service is a great way to expose an external view of a system, with internal reuse and composition using traditional&#xD;
    component design. One way to look at the differences between objects, components and services is the way they are&#xD;
    coupled to their implementation;&amp;nbsp;objects are tightly coupled to their programming language, and components are&#xD;
    coupled to some runtime or platform (COM, CORBA, J2EE, and such), whereas services are really only coupled to the set&#xD;
    of standards used to describe their specification.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;241&quot; alt=&quot;&quot; src=&quot;./resources/co_soa_soa-01.gif&quot; width=&quot;241&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In general, the move from object-oriented to component-based thinking took between 6 and 18 months, as developers&#xD;
    learned about this new technology and its requirements. Hopefully, the move to service-oriented solutions can happen&#xD;
    more quickly. Developers will have to understand the challenges, trade-offs, and design decisions&#xD;
    that come into play during&amp;nbsp;the development and reuse of components to support&amp;nbsp;service-oriented solutions&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
