<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:GuidanceDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-ljsUWPy0FqstZ2YFvRgzlg" name="variability_analysis,_f_0xkEo3Ed6D_7XK49c0nw" guid="-ljsUWPy0FqstZ2YFvRgzlg" changeDate="2009-10-29T09:07:58.906-0700" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    In the following class diagram,&amp;nbsp;we see the elements of a legal contract, identifying that the contract is between&#xD;
    two or more parties. In identifying the common elements we see that the core elements are the structure of the contract&#xD;
    itself and the different relations to the parties.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Figure 1.&amp;nbsp; Initial structural model of a legal contract&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img src=&quot;./resources/candv_contract.gif&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    However, a legal contract&amp;nbsp;can be between different people, organizations or government&amp;nbsp;agencies, and so we&#xD;
    note that Party is a variable element &lt;strong>by type&lt;/strong>. In documenting this we define a type hierarchy for&#xD;
    Party and also denote Party as an abstract class so that concrete types must be used in an actual design. This is shown&#xD;
    in Figure 2.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Figure 2.&amp;nbsp; Identifying variability in the Party component of the contract&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &amp;nbsp;&lt;img src=&quot;./resources/candv_party.gif&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The&amp;nbsp;type&amp;nbsp;hierarchy in the example above is referred to as an inheritance&amp;nbsp;hierarchy.&amp;nbsp;&amp;nbsp;The&#xD;
    following are examples of&amp;nbsp;kinds of type hierarchies.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Figure 3.&amp;nbsp; Inheritance hierarchy -- classes organized using generalization-specialization&#xD;
    concepts&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img src=&quot;./resources/inheritance.gif&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Figure 4 illustrates an aggregation hierarchy.&amp;nbsp; An aggregate is a class that&amp;nbsp;contains one or more other&#xD;
    classes, related using aggregation/composition relationships&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Figure 4.&amp;nbsp; Aggregation hierarchy&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img src=&quot;./resources/aggregation.gif&quot; />&#xD;
&lt;/p>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    Figure 5 represents a cluster hierachy.&amp;nbsp; This is a&amp;nbsp;community of collaborating classes that typically have a&#xD;
    facade, at least one mediator, and a composite which would typically have an abstract factory to produce objects within&#xD;
    the cluster.&#xD;
&lt;/p>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    &lt;strong>Figure 5.&amp;nbsp; Cluster hierarchy&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    &lt;img src=&quot;./resources/cluster.gif&quot; />&#xD;
&lt;/p>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    As the final example, Figure 6 illustrates a Framework.&amp;nbsp; This is a set of classes related by a combination of&#xD;
    inheritance and aggregation which have an interface -- abstract classes with default implementations -- that can be&#xD;
    customized for a given context.&#xD;
&lt;/p>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    &lt;strong>Figure 6. Framework&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    &lt;img src=&quot;./resources/framework.gif&quot; />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:GuidanceDescription>
