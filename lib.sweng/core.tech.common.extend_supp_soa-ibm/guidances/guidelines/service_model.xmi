<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-T4TFb_B0kt2YDfOzp142ew" name="new_guideline,_lc5vgGsLEd6dX9uDBR7y4Q" guid="-T4TFb_B0kt2YDfOzp142ew" changeDate="2009-10-06T22:10:15.359-0700" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_model_FC39652E.html&quot; guid=&quot;_T-AiUEozEd6D_7XK49c0nw&quot;>Concept: Service Model&lt;/a>&amp;nbsp;describes the overall purpose of the Service Model and&#xD;
    describes, at a high level, its contents.&amp;nbsp; This Guideline gives advice as to how the Service Model can be evolved&#xD;
    over time.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In summary from the Concept, the Service Model is used for the following;&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Identifying candidate services and capture decisions about which services will actually be exposed&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Specifying the contract between the service provider and the consumer of the services&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Associating Services with the components needed to realize these services&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The Service Model often is a heterogeneous collection of physical assets, including UML models, documents and possibly&#xD;
    entries in a requirements management tool. However, the service model has to contain the following logical elements:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Candidate Service and Service Portfolios&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Candidate Service Hierarchy&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Service Exposure&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Service Dependencies&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Service Composition &amp;amp; Flow&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Service Non-Functional Requirements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Service Messages&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        State Management Decisions&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Realization Decisions&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;strong>&lt;font size=&quot;3&quot;>Lifecycle of a Service Model&lt;/font>&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The service model can be evolved in the course of a single project.&amp;nbsp; More often, some portions -- particularly the&#xD;
    Candidate Service and Service Portfolios and Hierarchies&amp;nbsp;-- are evolved and/or maintained at a level above that of&#xD;
    a single project.&amp;nbsp; These portions of the overall Service Model&amp;nbsp;can be&amp;nbsp;used as inputs to individual&#xD;
    projects.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For the purposes of this Guideline, we will assume that a given project includes some services discovery activities&#xD;
    that result in the definition of additional candidate services.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>&lt;font size=&quot;3&quot;>Identification Elements&lt;/font>&lt;/b>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A services design project generally begins by analyzing business-oriented inputs or existing assets to identify&#xD;
    Capabilities that are useful for realizing a business process or a set of application requirements.&amp;nbsp;&amp;nbsp;At the&#xD;
    time of identification, each Capability becomes a candidate for service-enablement.&amp;nbsp; Candidate services identified&#xD;
    at this stage are often only provided as a name and possible functional description. A simple document containing this&#xD;
    list of candidate services&amp;nbsp;often might suffice, however if the UML approach is used, then the portfolio is&#xD;
    maintained as a collection of&amp;nbsp; SoaML Capabilities.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As soon as possible, candidate&amp;nbsp;services in the list are organized into a &lt;b>Hierarchy&lt;/b> using a functional&#xD;
    classification scheme (typically based on functional areas identified using functional area analysis or a similar&#xD;
    technique. Such a hierarchy demonstrates a primary classification scheme for services - that of a process invocation&#xD;
    dependency and as such is valuable in understanding the relationships between services identified during decomposition&#xD;
    activities. Again, the representation of the hierarchy can be either in a document, spreadsheet or UML model.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As has been mentioned,&amp;nbsp;the Candidate Service Portfolio and the Service Portfolio can be maintained&#xD;
    as&amp;nbsp;organization-level assets which have lifespans beyond that of any specific project. Indeed there is a&#xD;
    relationship between the enterprise and project portfolios as show in the figure below.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xD;
    &lt;img height=&quot;139&quot; alt=&quot;&quot; src=&quot;resources/portfolio_lifecycle.gif&quot; width=&quot;343&quot; />&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;font size=&quot;3&quot;>&lt;strong>Specification Elements&lt;/strong>&lt;/font>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Once candidate services are identified, exposure decisions must be made:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        which services will be implemented and exposed for external discovery and use?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        which services will be implemented but will not be exposed externally?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        which services will not be implemented at this time?&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;strong>Service litmus testing&lt;/strong> is one approach for making these decisions.&amp;nbsp; In terms of the UML&#xD;
    representation of the service model, SoaML ServiceInterfaces are created from the&amp;nbsp;Capabilities that are&#xD;
    selected&amp;nbsp;for exposure.&amp;nbsp; The exposure decision can be marked by&amp;nbsp;creating an &amp;lt;&amp;lt;Expose&amp;gt;&amp;gt;&#xD;
    dependency from the ServiceInterface to the appropriate Capability.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Specifying the ServiceInterfaces involves documenting their operations, the operation signatures, and any&amp;nbsp;service&#xD;
    contracts that providers and consumers of the service must adhere to.&amp;nbsp; Each ServiceInterface's provided and&#xD;
    required operations can be determined using behavioral modeling techniques, such as sequence diagramming or activity&#xD;
    modeling.&amp;nbsp; Any&amp;nbsp;mandatory sequencing in these operations (the usage contracts) can be documented&amp;nbsp;using&#xD;
    either protocols that are directly owned by the ServiceInterface, or by SoaML ServiceContracts.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Service Messages&lt;/b> -- which define the structure of the service operation inputs and outputs -- must be&#xD;
    described.&amp;nbsp;&amp;nbsp;These messages&amp;nbsp;can be derived from high-level models or&amp;nbsp;can be directly expressed in&#xD;
    some technology-specific form (such as XML Schema).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The service model includes SoaML Participants, which are the components of the system that offer the services for&#xD;
    use.&amp;nbsp; A Participant provides one or more services via&amp;nbsp;ServicePoints, and it consumes services via&#xD;
    RequestPoints.&amp;nbsp; Each ServicePoint or RequestPoint is typed by an appropriate ServiceInterface.&amp;nbsp; A complete&#xD;
    description of a&amp;nbsp;Participant will include a set of&amp;nbsp;owned behaviors (Interactions, Activities, etc.)&amp;nbsp;that&#xD;
    specify the realizations of the Participant's provided operations.&amp;nbsp; An owned behavior can&amp;nbsp;use the&#xD;
    capabilities that are provided by the services which the Participant consumes.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is well and good to define ServiceInterfaces and the Participants that provide and consume services,&#xD;
    but&amp;nbsp;realizing a business process often requires that instances of specific Participants collaborate with each&#xD;
    other.&amp;nbsp; These &lt;strong>Compositions and Flows&lt;/strong> are defined using:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &quot;assembler&quot; SoaML Participants to assemble the interacting instances, and&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        SoaML ServicesArchitectures to document the contract that the interacting instances must adhere to during their&#xD;
        interaction.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    See &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/examples/participant_soaml_DAFEB6B7.html&quot; guid=&quot;_uO9JIFbBEd6MCpkuB85p5g&quot;>Example: Participant (SoaML)&lt;/a>&amp;nbsp;and &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/examples/services_architecture_soaml_BF38A4B3.html&quot; guid=&quot;_mOf5sFbBEd6MCpkuB85p5g&quot;>Example: ServicesArchitecture (SoaML)&lt;/a>&amp;nbsp;for more information on these two&#xD;
    constructs.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Many of the above aspects of design focus more on satisfying functional requirements.&amp;nbsp; It is essential&amp;nbsp;to&#xD;
    also capture the &lt;strong>Non-Functional Requirements&lt;/strong> for services and capture as much detail as possible on&#xD;
    Quality of Service, Policy and so forth. In this area it is possible to express the requirements in a textual document,&#xD;
    rather more difficult to express directly in UML, but might be more easily expressed using a requirements management&#xD;
    product. One aspect of the non-functional solution architecture concerns the &lt;strong>Distribution and&#xD;
    Availability&lt;/strong> of services, which can be documented using the UML model.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    While it is true that in an SOA we strive to make services stateless, it is not always possible or even preferable to&#xD;
    make this a fixed goal.&amp;nbsp; The topic of &lt;strong>State Management Decisions&lt;/strong> is provided to enable the&#xD;
    designer time to reflect on the trade-offs,&amp;nbsp;costs, and benefits of state management in services. In support of&#xD;
    these decisions the topic &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/guidelines/state_management_for_services_3A872034.html&quot; guid=&quot;_SfOYMGtFEd6dX9uDBR7y4Q&quot;>Guideline: State Management for Services&lt;/a>&amp;nbsp;&amp;nbsp;provides examples of kinds of&#xD;
    state that often do have to be maintained by a service.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>&lt;font size=&quot;3&quot;>Realization Elements&lt;/font>&lt;/b>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The realization of services concerns itself primarily with three areas, those being the decisions concerning the actual&#xD;
    realization of services, the identification of subsystems and components to realize the service specifications, and&#xD;
    finally the development of these components.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In documenting &lt;b>Realization Decisions&lt;/b> it is important to have a reasoned and detailed rationale for the choice of&#xD;
    sourcing and development approach. &amp;nbsp;Again, in a similar way to the Non-Functional Requirements above, it is often&#xD;
    hard to express these decisions (certainly in detail) in the UML representation, and so we expect that the choices made&#xD;
    for each service might be documented outside of a UML-based model.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
