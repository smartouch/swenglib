<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-k9iGJIRWSWrg32XjeJiClA" name="service_model_structure,_qHU5sFIREd6lNtylJFsPIg" guid="-k9iGJIRWSWrg32XjeJiClA" changeDate="2009-09-23T20:28:46.093-0700" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    In this guideline, we provide&amp;nbsp;advice for structuring a UML model created to support an SOA service discovery,&#xD;
    specification, realization, and implementation effort.&amp;nbsp; In the rest of this guideline, such a model will be&#xD;
    referred to as a &quot;&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_model_FC39652E.html&quot; guid=&quot;_T-AiUEozEd6D_7XK49c0nw&quot;>service model&lt;/a>&quot;.&amp;nbsp; The specific modeling product addressed here is Rational&#xD;
    Software Architect for WebSphere Software, Version 7.5.4 or higher.&amp;nbsp; This product&amp;nbsp;will be referred to as&#xD;
    &quot;Rational Software Architect&quot; in the rest of this guideline.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Service models need to be structured for at least three purposes:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        To enable a team of designers, rather than just a single designer, to evolve the model effectively.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To enable the model to scale well, conceptually, as the size of the service modeling effort increases.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To support the automatic generation of downstream service artifacts, such as XSDs, WSDLs, and BPEL.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    We will address each of these issues in this guideline.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;3&quot;>&lt;strong>Structure the model to support team development&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    UML models can be considered from at least two perspectives, those being:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The logical content (packages, classes, relationships, etc.) of the model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The physical elements (flat files, databases, etc.) that are used to persist the model.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Rational Software Architect persists the logical content of models into one or more physical files.&amp;nbsp; The question&#xD;
    naturally arises -- what is the best way to organize the logical content, and to persist the logical content into&#xD;
    files, so that there is minimal conflict when designers/developers work on different parts of the logical model?&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There is no universally right answer.&amp;nbsp; However, this subject has been addressed in&amp;nbsp;great detail&amp;nbsp;in IBM&#xD;
    developerWorks papers authored by Kim Letkeman and by William T. Smith.&amp;nbsp; Please refer to the references at the&#xD;
    bottom of this guideline for further information.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;3&quot;>&lt;strong>Structure the model to support large-scale models&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As time goes on, the service model will grow.&amp;nbsp; If this growth is not&amp;nbsp;disciplined, it will become increasingly&#xD;
    difficult to navigate the model, and model maintenance can become more difficult.&amp;nbsp; Further, if there is no&#xD;
    consistent growth plan, it will become difficult to partition the model for effective team development.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    With these concerns in mind, we suggest a few rules, which are based in part upon 12 proven&amp;nbsp;&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/soa_architectural_patterns_8FB91276.html&quot; guid=&quot;_-Ne-cHhXEd63Mo-f0bVh9w&quot;>SOA Architectural Patterns. &amp;nbsp;&lt;/a>Our rules are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Manage complexity using architectural constructs larger than simple&amp;nbsp;&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_interface_soaml_CA95983A.html&quot; guid=&quot;_N5e2oFbBEd6MCpkuB85p5g&quot;>ServiceInterfaces&lt;/a> and &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/participant_soaml_1A392457.html&quot; guid=&quot;_zL3kgFbAEd6MCpkuB85p5g&quot;>Participants&lt;/a>.&amp;nbsp; Larger-scale constructs help lift the level of abstraction&#xD;
        in the model and promote understanding.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Provide &quot;homes&quot; in your model for meaningful architectural viewpoints.&amp;nbsp; These viewpoints help summarize&#xD;
        similar information (such as the messages which have been defined) which might be scattered throughout the model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Package together the model elements that are used to describe a given concept.&amp;nbsp; Effective packaging helps&#xD;
        reduce the clutter of model elements that might otherwise appear in the Rational Software Architect Project&#xD;
        Explorer -- and it also assists in model partitioning for team development.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Make it easy to support either (1) shared messages and data types -- which supports reuse but which adds coupling&#xD;
        into the system, or (2) locally owned messages and data types -- which supports decoupling, but which increases&#xD;
        maintenance.&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Executing these rules is supported by using the &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/templates/service_solution_design_model_9242B811.html&quot; guid=&quot;_3yebEFIREd6lNtylJFsPIg&quot;>SoaML design template model&lt;/a>.&amp;nbsp; This template model includes the following&#xD;
    features:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A series of &amp;lt;&amp;lt;perspective&amp;gt;&amp;gt; packages to serve as the home for architectural viewpoints and for&#xD;
        architecturally-significant model constructs.&amp;nbsp; As an example of the former, the template provides&#xD;
        &amp;lt;&amp;lt;perspective&amp;gt;&amp;gt; packages for cross-cutting views of services and messages.&amp;nbsp; As examples of the&#xD;
        latter, the template&amp;nbsp;provides &amp;lt;&amp;lt;perspective&amp;gt;&amp;gt; packages for &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_architecture_soaml_22F25B9A.html&quot; guid=&quot;_wYQYkEo3Ed6D_7XK49c0nw&quot;>ServicesArchitectures&lt;/a>, &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_contract_soaml_E57B30D4.html&quot; guid=&quot;_IhtgsFbBEd6MCpkuB85p5g&quot;>ServiceContracts&lt;/a>, and &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/termdefinitions/service_collaboration_35276470.html&quot; guid=&quot;_V4z3YJgtEd6l6vBsNJSPDA&quot;>Service Collaborations&lt;/a>, which describe the&amp;nbsp;relationships and dynamic&#xD;
        interactions between&amp;nbsp;ServiceInterfaces and/or&amp;nbsp;Participants that might&amp;nbsp;be owned by packages which are&#xD;
        located in widely varying locations within the model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Pre-defined package structures to logically group model elements, diagrams, and relationships that describe a given&#xD;
        concept.&amp;nbsp; For example, well-defined package structures are provided for, among other items,&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;div style=&quot;MARGIN-LEFT: 2em&quot;>&#xD;
    &lt;ol>&#xD;
        &lt;li>&#xD;
            Organizing the business-related and system elements that are commonly examined to identify candidate services.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Elements used to describe ServiceInterfaces.&amp;nbsp; We recommend that each ServiceInterface, plus all supporting&#xD;
            elements such as diagrams, be packaged together.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Elements used to describe service Participants.&amp;nbsp; We recommend that each Participant, plus all supporting&#xD;
            elements such as diagrams, be packaged together.&#xD;
        &lt;/li>&#xD;
    &lt;/ol>&#xD;
&lt;/div>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Reusable package structures for describing data elements that are used to define either data that is passed between&#xD;
        service operations or data that is internally managed by service implementations.&amp;nbsp; These package structures&#xD;
        can be used to define either local data or shared data.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;3&quot;>&lt;strong>Structure the model to&amp;nbsp;support the automatic generation of downstream artifacts (XSDs,&#xD;
    WSDLs, etc.)&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Rational Software Architect provides several transforms to automate the generation of relevant SOA artifacts, such as&#xD;
    XSDs, WSDLs,&amp;nbsp;&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.bus.common.extend-ibm/guidances/termdefinitions/bpel_E0043DD7.html&quot; guid=&quot;_uv8g0IhaEd6oeZacNg1BdA&quot;>BPEL&lt;/a>, and &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/termdefinitions/service_component_architecture_912A0AB7.html&quot; guid=&quot;_vbsVUJZ4Ed6Ix90EO0mdwQ&quot;>SCA components&lt;/a>,&amp;nbsp;from UML models.&amp;nbsp;&amp;nbsp;The transforms are documented&#xD;
    within Rational Software Architect Help.&amp;nbsp; Their use is further described in:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/toolmentors/rsa_transform_uml_to_xsd_6D3593A8.html&quot; guid=&quot;_CAZm8HLoEd6sAIXj8wzebg&quot;>Tool Mentor: Configure and Run the UML-to-XSD Transform&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/toolmentors/rsa_transform_uml_to_wsdl_A253A936.html&quot; guid=&quot;_R5GlAHLoEd6sAIXj8wzebg&quot;>Tool Mentor: Configure and Run the UML-to-WSDL Transform&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/toolmentors/rsa_transform_uml_to_soa_64039779.html&quot; guid=&quot;_XXFJQHLrEd6dsJb1-FWFSQ&quot;>Tool Mentor: Configure and Run the UML-to-SOA Transform&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/toolmentors/rsa_transform_uml_to_sca_FBBC70F8.html&quot; guid=&quot;_iXrHQIlEEd65XMCQ7LtxNw&quot;>Tool Mentor: Configure and Run the UML-to-SCA Transform&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The transforms&amp;nbsp;mainly touch the following types of model elements:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        UML-to-XSD:&amp;nbsp; Packages, Classes, Signals,&amp;nbsp;Enumerations, Data Types, and the relationships between them.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        UML-to-WSDL:&amp;nbsp;&amp;nbsp;UML-to-XSD content; Components stereotyped as &amp;lt;&amp;lt;Participant&amp;gt;&amp;gt; or which offer a&#xD;
        provided interface; Interfaces;&amp;nbsp;Classes stereotyped as&amp;nbsp;&amp;lt;&amp;lt;ServiceInterface&amp;gt;&amp;gt;.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        UML-to-SOA:&amp;nbsp; UML-to-WSDL content, plus structured Activities that are owned by a component and which model the&#xD;
        implementation of a service operation.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        UML-to-SCA:&amp;nbsp; UML-to-WSDL content plus SCA-specific model markup.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    We provide these guidelines to facilitate&amp;nbsp;meaningful execution of these transforms.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        In addition to the &amp;lt;&amp;lt;perspective&amp;gt;&amp;gt; packages in the SoaML template model, create additional package&#xD;
        structures that model the directory structures into which&amp;nbsp;you want your artifacts to be generated.&amp;nbsp; For&#xD;
        example, create root level packages named &quot;com&quot;, &quot;org&quot;, etc., build package structures under these, and create the&#xD;
        UML source elements that are to be transformed within this package structure.&amp;nbsp; We often refer to this package&#xD;
        structure as the &quot;implementation&quot; package structure.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ensure that appropriate package import relationships are defined, so as to support necessary visibility.&amp;nbsp; For&#xD;
        example, if you are using shared messages, the package that owns a ServiceInterface needs to import the package&#xD;
        that owns the message types the ServiceInterface operations reference.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ensure that SoaML Participants own the structured Activities that model the implementations of the service&#xD;
        operations that the Participant provides.&amp;nbsp; It is necessary to follow this rule in order to generate &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.bus.common.extend-ibm/guidances/termdefinitions/bpel_E0043DD7.html&quot; guid=&quot;_uv8g0IhaEd6oeZacNg1BdA&quot;>BPEL&lt;/a> (Business Process Execution Language) code during execution of the&#xD;
        UML-to-SOA transform.&amp;nbsp; This BPEL can be consumed by process choreography tools, such as WebSphere Integration&#xD;
        Developer.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/examples/soaml_design_model_sample_83612289.html&quot; guid=&quot;_AfQisHNIEd6va-EJWoOsvg&quot;>SoaML sample model&lt;/a>, usable with Rational Software Architect 7.5.4 and&#xD;
    higher,&amp;nbsp;is an exemplar that illustrates the use of these best practices.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;3&quot;>&lt;strong>References&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Kim Letkeman's IBM developerWorks series on &quot;Comparing and Merging UML Models in Rational Software Architect&quot; is the&#xD;
    most in-depth set of references on using the model management capabilities that are built into Rational Software&#xD;
    Architect.&amp;nbsp; Parts 3 and 5 provide excellent guidance regarding model partitioning schemes.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;http://www.ibm.com/developerworks/rational/library/05/712_comp/&quot; target=&quot;_blank&quot;>Part 1: Comparing models&#xD;
        with local history&lt;/a>, July 2005&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;http://www.ibm.com/developerworks/rational/library/05/712_comp2/&quot; target=&quot;_blank&quot;>Part 2: Merging models&#xD;
        using &quot;compare with each other&quot;,&lt;/a> July 2005&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;http://www.ibm.com/developerworks/rational/library/05/802_comp3/&quot; target=&quot;_blank&quot;>Part 3: A deeper&#xD;
        understanding of model merging&lt;/a>, August 2005&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;http://www.ibm.com/developerworks/rational/library/05/0809_CVS4/&quot; target=&quot;_blank&quot;>Part 4: Parallel model&#xD;
        development with CVS&lt;/a>, August 2005&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;http://www.ibm.com/developerworks/rational/library/07/0703_letkeman/?S_TACT=105AGX15&amp;amp;S_CMP=LP&quot; target=&quot;_blank&quot;>Part 5: Model management with IBM Rational ClearCase and IBM Rational Software Architect Version 7&#xD;
        and later&lt;/a>, July 2007&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;http://www.ibm.com/developerworks/rational/library/05/0823_Letkeman/&quot; target=&quot;_blank&quot;>Part 6: Parallel&#xD;
        model development with custom profiles&lt;/a>, August 2005&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;http://www.ibm.com/developerworks/rational/library/07/0410_letkeman/?S_TACT=105AGX15&amp;amp;S_CMP=LP&quot; target=&quot;_blank&quot;>Ad-hoc modeling -- Fusing two models with diagrams&lt;/a>, March 2007&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    William T.&amp;nbsp;Smith's IBM developerWorks series on &quot;IBM Rational Architecture Management Software model structure&#xD;
    guidelines&quot; provides excellent conceptual information on the definitions of, and the relationships between, logical&#xD;
    models and physical models.&amp;nbsp;&amp;nbsp;Smith also talks the reader through several issues that&amp;nbsp;need to&amp;nbsp;be&#xD;
    considered when developing a model structuring scheme.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;http://www.ibm.com/developerworks/rational/library/08/0122_smith1/&quot; target=&quot;_blank&quot;>Part 1:&#xD;
        Fundamentals&lt;/a>, January 2008&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;http://www.ibm.com/developerworks/rational/library/08/0122_smith2/&quot; target=&quot;_blank&quot;>Part 2: Classic&#xD;
        Rational Unified Process&lt;/a>, January 2008&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;br />&#xD;
    &lt;br />&#xD;
    &amp;nbsp;&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
