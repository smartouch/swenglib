<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-A1ZqpwqojK1UExhJbTv_Ng" name="allocating_soa_elements_to_architectural_layers,_T-Ng8GWuEd6Zd-lbA790BQ" guid="-A1ZqpwqojK1UExhJbTv_Ng" changeDate="2009-08-01T22:00:32.859-0700" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    Here, we describe where to logically allocate services artifacts across IBM's &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/soa_solution_stack_1DD21069.html&quot; guid=&quot;_PlxhEGWuEd6Zd-lbA790BQ&quot;>SOA Solution Stack&lt;/a>&amp;nbsp;reference architecture.&amp;nbsp; We focus more specifically on&#xD;
    allocations across the five functional layers, those being:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Consumers&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Business processes&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Services&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Service components&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Operational systems&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    This reference architecture is illustrated below:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;img      height=&quot;276&quot; alt=&quot;&quot; src=&quot;resources/soa_sol_stack.gif&quot; width=&quot;572&quot; />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Per the SOA Solution Stack concept, this is not a strongly-layered architecture.&amp;nbsp; For example, every layer does&#xD;
    not need to be populated.&amp;nbsp; Further, elements in one layer can communicate with&amp;nbsp;elements in non-adjacent&#xD;
    layers.&amp;nbsp; For example, an exposed service can communicate directly with an implementing operational system, rather&#xD;
    than communicate with that system&amp;nbsp;using an intermediate facade which serves as a service component.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;3&quot;>&lt;strong>Consumers&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Although the contents of this layer are not limited to such, presentation layer components&amp;nbsp;(and supporting&#xD;
    infrastructure) for business applications generally are positioned here.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Other components that might be allocated to this layer in a logical sense include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Non-service-based applications and systems that are known to make use of services from this SOA.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Service components which are part of another SOA solution, but which are known to make use of services from this&#xD;
        SOA for their realization.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;3&quot;>&lt;strong>Business Process&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;2&quot;>The business process layer handles all business logic regarding service composition.&amp;nbsp; This includes&#xD;
    run-times responsible for&amp;nbsp;executing the choreography of services to realize a business process, components for&#xD;
    managing access control, components for managing the state of long-lived processes, etc.&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/supportingmaterials/pattern_01_factor_composition_logic_away_from_process_logic_1D858B2C.html&quot; guid=&quot;_N-cVwHhYEd63Mo-f0bVh9w&quot;>Pattern 1: Factor composition logic away from process logic&lt;/a>&amp;nbsp;provides a best&#xD;
    practice that applies for this layer.&amp;nbsp; Briefly, it is feasible to contain all the choreography logic for a given&#xD;
    business process within a single choreography artifact (such as a single &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_composition_and_choreography_67057C86.html&quot; guid=&quot;_yAh28IA6Ed6H1oy6lZPykw&quot;>BPEL4WS&lt;/a> file).&amp;nbsp; However, doing this reduces flexibility with respect to the&#xD;
    future re-implementation of the realization of sub-processes of the process.&amp;nbsp; Refer to the pattern documentation&#xD;
    for a discussion of alternative approaches that improve business agility.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>&lt;font size=&quot;3&quot;>Services&lt;/font>&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The services layer includes all the &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp-ibm/guidances/concepts/service_2D3C4FFE.html&quot; guid=&quot;_OMw8cEozEd6D_7XK49c0nw&quot;>services&lt;/a> in an SOA&amp;nbsp;solution.&amp;nbsp; These include both atomic services (those&#xD;
    which do not depend upon other services for their implementation) and composite services (those which depend upon more&#xD;
    than one other service for their implementation).&amp;nbsp; Service &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/participant_soaml_1A392457.html&quot; guid=&quot;_zL3kgFbAEd6MCpkuB85p5g&quot;>Participants&lt;/a> (service providers and consumers) also are found here.&amp;nbsp;The service&#xD;
    layer also contains run-time components that manage service discovery and run-time binding.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;3&quot;>&lt;strong>Service Components&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The service components layer includes code containers&amp;nbsp;that implement service operations.&amp;nbsp; In addition to&#xD;
    using code (functional and technical components)&amp;nbsp;that is&amp;nbsp;also allocated to&amp;nbsp;this layer, a service&#xD;
    component can use functionality from the Operational Systems layer, the Services layer, or the Business Process layer.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This layer also contains supporting components, such as (1) adapters to mediate between operational systems and service&#xD;
    components and (2) converters to ensure compatibility of data as it moves through a component chain.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;3&quot;>&lt;strong>Operational Systems&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This layer contains existing operational assets, such as packaged applications and custom (in-house) systems.&amp;nbsp;&#xD;
    This layer also includes the run-time components, such as application servers, process servers, and database servers&#xD;
    that are required to deploy an SOA.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
