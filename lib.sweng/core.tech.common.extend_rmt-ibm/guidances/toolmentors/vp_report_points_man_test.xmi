<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-D3Fsf23_SsSLjNRBaTw0Og" name="new_toolmentor,_ZkS44Hj2EdyhRNciHt44hg" guid="-D3Fsf23_SsSLjNRBaTw0Og" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    Overview&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    IBM&amp;reg; Rational&amp;reg; Manual Tester supports four types of statements for writing a test script: steps, verification points,&#xD;
    reporting points, and groups. The question often arises: What is the difference between a verification point (VP) and a&#xD;
    reporting point (RP)? This tool mentor describes the difference, and provides some guidance on when to use verification&#xD;
    points and when to use reporting points.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    How are verification points and reporting points different?&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    &lt;i>Verification points&lt;/i> are steps inside a script that are meant to provide the tester with a way of asking&#xD;
    questions about the application under test. When a tester has followed a series of steps that change the appearance of&#xD;
    the application, a VP can be used to indicate that the application responded correctly. In this way, if a VP fails, the&#xD;
    tester knows immediately that one of the following is true:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The tester did not follow the steps correctly.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The application is not behaving correctly. In this case, the application could have changed since the time when the&#xD;
        test was written. As a result, the test itself could be out-of-date, or the application could have a new defect in&#xD;
        it.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For example, a VP could ask &quot;Did the application open a new window?&quot; after the tester clicked the &lt;strong>File &amp;gt; New&#xD;
    Window&lt;/strong> menu option, or &quot;Is the error message displayed in a red font?&quot; after the test has deliberately created&#xD;
    an error condition.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When a tester runs a script, VPs allow the tester to communicate that the application behaved in one of the following&#xD;
    ways:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        As expected (via the &lt;i>pass&lt;/i> result)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Not as expected (via &lt;i>fail&lt;/i> when the result is clearly incorrect, or via &lt;i>error&lt;/i> when something&#xD;
        completely unexpected happens, like an unexpected error dialog popping up)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Neither obviously as expected or not as expected (via the &lt;i>inconclusive&lt;/i> result).&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;i>Reporting points&lt;/i> are also steps in a script, but they are meant to allow the tester to report on the state of&#xD;
    the test itself. Suppose a test is intended to prove that the tester can create a new order in an online ordering&#xD;
    system. The tester may navigate the application correctly, following all the steps of the script and therefore giving&#xD;
    all the VPs a &lt;i>pass&lt;/i> result. However, when the tester goes to the order status screen, the order cannot be found.&#xD;
    In this case, the tester could use the RP to indicate that the test failed, even though all the VPs passed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As with verification points, the tester would use the &lt;i>pass&lt;/i> result if the test obviously achieved the overall&#xD;
    objective. The tester would use the &lt;i>fail&lt;/i> result if the test obviously did not achieve its objective. The&#xD;
    &lt;i>error&lt;/i> result would indicate that the test result was both wrong and unexpected, and the &lt;i>inconclusive&lt;/i>&#xD;
    result would indicate that the tester could not determine if the test passed or failed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Tests will typically have many VPs, and at least one but usually very few RPs.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This tool mentor provides an example of how you can structure a test script to use VPs and RPs in an optimal way.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Tool Steps&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    To create a summary report of VPs in a test script using RPs, perform the following steps:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Create a series of steps to perform some task in the application being tested&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        At the end of that series of steps, include a VP that asks if the application (or some portion of the application)&#xD;
        now has a particular appearance&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If it would help the tester to run the test, include an image of your application in the VP&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If it helps with readability, put the steps and their VP in a group&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Repeat the above four steps for each task in the test&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        At the end of the test, include one RP that asks if some overall result has been achieved by performing all the&#xD;
        steps in the test&#xD;
    &lt;/li>&#xD;
&lt;/ol></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
