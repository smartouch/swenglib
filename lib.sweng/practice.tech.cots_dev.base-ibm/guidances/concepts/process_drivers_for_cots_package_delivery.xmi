<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-gp33fG8_xI8AVpOKt8Z6PQ" name="process_drivers_for_cots_package_delivery,1.4106163930012463E-305" guid="-gp33fG8_xI8AVpOKt8Z6PQ" changeDate="2005-11-30T18:18:19.712-0800" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_Index_Entry_Category___New_Concept&quot; name=&quot;XE_Index_Entry_Category___New_Concept&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    The Four Spheres of Influence&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Building solutions based on pre-existing COTS packages is different from typical custom development in that the COTS&#xD;
    packages are not designed to meet the project's specification. COTS packages are built to satisfy the needs of a market&#xD;
    segment. Therefore, an understanding of the COTS package functionalities and how they are likely to change over time&#xD;
    must be used to modify the requirements and user business processes as appropriate, and to drive the resulting&#xD;
    architecture.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When building solutions based on COTS packages, it is important to simultaneously define and trade off among the four&#xD;
    spheres of influence defined by EPIC &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.tech.common.extend_cots-ibm/guidances/supportingmaterials/references.tech_38304F32.html&quot;&#xD;
    guid=&quot;_1_bt0QiNEeCt4-FxrVeQpQ&quot;>[ALB0702,ALB1102]&lt;/a>]. Tradeoffs in this case are driven by the desire to leverage COTS&#xD;
    packages from the marketplace. This is a fundamental change from traditional process models. Numerous projects have&#xD;
    unsuccessfully tried to integrate pre-existing COTS packages by defining the requirements, then formulating an&#xD;
    architecture to meet those requirements, and then trying to fit COTS packages into that architecture. Instead, an&#xD;
    emphasis on the balance between the four spheres of influence is critical throughout the life of a project. The four&#xD;
    spheres represent competing interests that must be considered in forming a viable solution that effectively leverages&#xD;
    pre-existing COTS packages.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The four spheres of influence are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;b>Sphere 1 - Stakeholder Needs and Business Processes:&lt;/b> This sphere denotes requirements (including quality&#xD;
            attributes such as performance, security and reliability), user business processes, business drivers and&#xD;
            operational environment.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;b>Sphere 2 - Architecture and Design:&lt;/b> This sphere denotes the essential elements of the system, the&#xD;
            relationships between them, and how they fit with the enterprise system. The elements include structure,&#xD;
            behavior, usage, functionality, performance, resilience, reuse, comprehensibility, economic and technological&#xD;
            constraints and tradeoffs.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;b>Sphere 3 - Marketplace:&lt;/b> This sphere denotes available and emerging COTS technology and products,&#xD;
            non-development items and relevant standards.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;b>Sphere 4 - Programmatics and Risk:&lt;/b> This sphere denotes the management aspects of the project. These&#xD;
            aspects consider the cost, schedule and risk of building, fielding and supporting the solution. Key to these&#xD;
            management aspects are the cost, schedule and risk of changing the necessary business processes.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    These four spheres are simultaneously defined and traded through the life of the project because a decision in one&#xD;
    sphere will inform and likely constrain the decisions that can be made in another sphere. For example, a stakeholder&#xD;
    need may be stated in a way that it cannot be satisfied by any known pre-existing COTS package.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Topic2&quot; name=&quot;Topic2&quot;>&lt;/a>Commercial Marketplace-Imposed Constraints&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The unique characteristics of COTS packages introduce dynamics and specific constraints that must be accommodated.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A COTS Package is a software product that:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        is supplied by a vendor;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        is sold, leased, or licensed to an acquirer;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        is used without modification of its code;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        may be tailored to be integrated into the acquirer environment;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        is supported and evolved by the vendor, who retains the intellectual property rights.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Based on these characteristics, Oberndorf, Brownsword, and Sledge identified the following attributes of COTS packages&#xD;
    in &lt;a href=&quot;http://www.sei.cmu.edu/publications/documents/00.reports/00tr010.html&quot;>An Activity Framework for COTS-Based&#xD;
    Systems&lt;/a>:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The marketplace, &lt;em>not&lt;/em> one system's needs, drives COTS package development and evolution.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        COTS packages and the marketplace undergo frequent, almost continuous, change.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Frequency and context of COTS package releases are determined at the discretion of the vendor.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        COTS packages are built based on unique architectural assumptions that may not be applicable to the target&#xD;
        organization.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        There is limited visibility into COTS package internals and behavior.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        COTS package assumptions about user processes may not match those of a specific organization.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &quot;Vendor&quot; is &lt;em>not&lt;/em> a new name for subcontractor. Different relationships are required to have insight and to&#xD;
        influence package changes.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        COTS package components often have unsuspected dependencies on other COTS package components.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Topic3&quot; name=&quot;Topic3&quot;>&lt;/a>Derived Process Requirements&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Any process that builds, fields, and supports solutions based on COTS packages must do the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;b>Create an environment where COTS packages (and therefore the marketplace) drive the evolving definition of&#xD;
            the solution.&lt;/b> The ultimate control of critical COTS packages has passed from the hands of the project to&#xD;
            those of the COTS package vendors. It is important to reconcile the diverse expectations of stakeholders with&#xD;
            an evolving understanding of the capabilities of available COTS packages. Therefore, an environment that&#xD;
            facilitates hands-on analysis of the COTS packages and continuous negotiation with stakeholders will be&#xD;
            required for the life of the project. This will allow the evaluation of new and changed COTS packages and their&#xD;
            impacts on evolving solutions.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;b>Compose solutions from a diverse range of components.&lt;/b> Solutions are built from a combination of&#xD;
            components (e.g. COTS package components)--both hardware and software--and many components are themselves built&#xD;
            from components. Insight into the inner workings of these components will vary (e.g., black, white and gray&#xD;
            box) depending on the source and the intended use of the component. Engineers must infer the behaviors of&#xD;
            various component combinations as they integrate the components they buy or otherwise procure. Hands-on&#xD;
            experience is essential with any component critical to the success of the solution. This experience should be&#xD;
            in an environment that closely represents the operational use of the component.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;b>Implement disciplined iterative systems engineering practices.&lt;/b> Iterative development allows the&#xD;
            discovery of the critical attributes of the solution through an evolutionary exploration of the highest risk&#xD;
            elements of the system and the COTS packages available to address them. Iterative development also encourages&#xD;
            frequent and direct feedback from all of the affected stakeholders through evolving prototypes that&#xD;
            characterize and mature the architecture while reducing risk in the solution.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;b>Support concurrent and integrated implementation of engineering, business and procurement tasks.&lt;/b> The&#xD;
            volatility of the COTS marketplace means that decisions about the COTS packages used; the structure that&#xD;
            accommodates them; and the associated cost, schedule, and risk of the project are made continuously through the&#xD;
            life of the solution. In addition, an engineering decision to include a new COTS package is also a decision to&#xD;
            acquire the package from its vendor. The engineering processes, management processes, oversight processes and&#xD;
            procurement processes of the project must be coordinated to support the flexibility and negotiation of&#xD;
            requirements and iterative definition of the solution.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;b>Balance component obsolescence and solution stability.&lt;/b> Due to the volatility of the marketplace, a new&#xD;
            COTS package or a new release of a COTS package being used can be introduced at any time during building,&#xD;
            fielding, or support of the solution. Engineers must continuously monitor the marketplace through the life of&#xD;
            the project to anticipate the changes being made. An environment is required where new COTS packages and&#xD;
            releases can be evaluated and their potential impacts assessed.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;b>Develop and maintain a flexible system architecture as a centrally managed asset.&lt;/b> Since the COTS&#xD;
            packages are &quot;owned&quot; by the vendors, the framework by which the components are linked to support the&#xD;
            organization's needs--the architecture--becomes a key organization asset. With COTS-based systems, continuous,&#xD;
            rapid changes driven by new mission needs, component upgrades and technology advances are facts of life. An&#xD;
            architecture that can retain its structure and cohesiveness yet allow the system to respond easily to these&#xD;
            changes--an evolvable architecture--becomes an important strategic asset to an organization.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;b>Design &lt;i>with&lt;/i> components versus design &lt;i>for&lt;/i> reuse.&lt;/b> Building a solution is an act of&#xD;
            composition and reconciliation. Designers start with a general set of needs and explore the offerings of the&#xD;
            marketplace to see how closely they match the needs. They then design an architecture around the pre-existing&#xD;
            components. Building systems for reuse, on the other hand, has come to mean designing and building structures&#xD;
            and components that can be used again in related systems. In this case, the designers have direct visibility&#xD;
            and control of the components. The nature, timing and order of the tasks and the processes used differ&#xD;
            accordingly.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;b>Incorporate tasks for changing the user's business processes.&lt;/b> Using COTS packages in solutions is not&#xD;
            compatible with simply automating a predefined set of business processes. Since components embody the vendor&#xD;
            view of user business processes, changes to the user's business processes must be negotiated based on those&#xD;
            inherent in the COTS packages under consideration. Engineering tasks should be coordinated with tasks for&#xD;
            changing the user's business process to ready the user community for fielding of the solution. The risks and&#xD;
            implications of changes to the organizations where the solution is fielded may be significant drivers in the&#xD;
            project. The definition and implementation of user business process and organizational changes must be&#xD;
            coordinated through the life of the project.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;b>Maintain and document how the COTS package supports the solution.&lt;/b> Many COTS packages have diverse&#xD;
            functionality, not all of which is required in a given solution. It is important to document the functionality&#xD;
            applicable to the solution. It is just as important to capture how any excess functionality is handled within&#xD;
            the solution-especially any functionality that is blocked or bypassed. Guidance and training on any&#xD;
            solution-specific use of the application will have to be considered as part of the deployment artifacts.&#xD;
            Furthermore, some of these &quot;excess&quot; capabilities will find their way into operational use after fielding. The&#xD;
            ways in which the COTS packages are actually used within the organization must be tracked and captured. This&#xD;
            information is important to the evaluation of new COTS package releases after solution fielding, as vendors may&#xD;
            make changes in segments of the component that were not originally considered part of the solution.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
