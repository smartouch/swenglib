<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-n1v8ITI4XK-FWKw-8Qf7_g" name="new_guideline,_JM8w0MpWEd6bFqpedVj-LA" guid="-n1v8ITI4XK-FWKw-8Qf7_g" changeDate="2009-11-05T13:59:34.812-0800" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Developing a use case sequence of actions is an iterative process. Start by developing an outline or draft. Later you&#xD;
    add in the descriptions. The outlines are not official documents, but a start toward developing a document. The&#xD;
    outlines would probably be sketched on easel paper at a requirements workshop.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This initial description of the interactions between the system's actors and the system is pure 'black box', that is,&#xD;
    it does not reveal anything about the internal structure of the system. It should be constructed as a sequence of steps&#xD;
    ('black box steps'), each of which represents a fine-grain interaction with the system. These black box steps will be&#xD;
    used to guide the identification of 'services' to be supported by the system. Each black box step may be annotated with&#xD;
    performance or other resource constraints which are driven by external needs (for example in order to achieve some&#xD;
    overall response time). The allocation of such budgets has to be done carefully, recognizing the complexity of each&#xD;
    step, and will be refined as the use-case description is refined and realized. It may be the case that the driving&#xD;
    requirement itself has to be relaxed.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Find Actors&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Finding actors is one of the first steps in defining system use. Each type of external phenomenon with which the system&#xD;
    must interact is represented by an actor. To find the actors, ask the following questions:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Which user groups require help from the system to perform their tasks?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Which user groups are needed to execute the system's most obvious main functions?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Which user groups are required to perform secondary functions, such as system maintenance and administration?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Will the system interact with any external hardware or software system?&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Any individual, group or phenomenon that fits one or more of these categories is a candidate for an actor.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To determine whether you have the right (human) actors, you can try to name two or three people who can perform as&#xD;
    actors, and then see if your set of actors is sufficient for their needs. For more on what constitutes an actor, see &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/actor_411726C.html&quot;&#xD;
    guid=&quot;_zGqO0MDpEduTGJ8i4u8TMw&quot;>Concept: Actor&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It may be difficult at first to find the most suitable actors, and you are not likely to find all of them immediately&#xD;
    because you have not found all the use cases. Working with the use cases is the only thing that gives you a deeper&#xD;
    understanding of the system's environment and how it interacts with the system. When you have progressed that far, you&#xD;
    may want to revise your original model, because there is a tendency at first to model too many actors. Be careful when&#xD;
    you change actors; changes that you introduce can affect the use cases as well. Remember that any modification to the&#xD;
    actors constitutes a major alteration in the system's interfaces and behavior. If you have developed a business&#xD;
    use-case model and business analysis model, you can use them as sources for identifying the main actors.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Name and Briefly Describe the Actors You Have Found&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    The actor's name must clearly denote the actor's role. Make sure there will be little risk at a future stage of&#xD;
    confusing one actor's name with another.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Define each actor by writing a brief description that includes the actor's area of responsibility, and what the actor&#xD;
    needs the system for. Because actors represent things outside the system, you need not describe them in detail. See&#xD;
    also &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/actor_411726C.html&quot;&#xD;
    guid=&quot;_zGqO0MDpEduTGJ8i4u8TMw&quot;>Concept: Actor&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When this&amp;nbsp;task is performed in the context of &lt;i>systems engineering&lt;/i> (with the expectation that the system&#xD;
    under scrutiny will decompose into further subsystems), the expectation is that business modeling (or some equivalent)&#xD;
    will have identified and characterized the boundary of the system to be developed (as a &lt;i>Business System&lt;/i> in the&#xD;
    case of business modeling), and that the actors in the enterprise with which the system must interact to deliver&#xD;
    business value, have been identified. In this context then, this&amp;nbsp;task is concerned mainly with the derivation of&#xD;
    system use cases. If business modeling is not performed, some equivalent mission modeling is needed to discover actors&#xD;
    and use cases - in this case the following steps may have value in this discovery.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Find Use Cases&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    When your first outline of the actors is complete, the next step is to look for the system's use cases. The first use&#xD;
    cases are very preliminary, and you will doubtless have to change them a few times until they are stable. If the&#xD;
    system's vision or requirements are deficient, or if the system analysis is vague, the system's functionality will be&#xD;
    unclear. Therefore, you must constantly ask yourself if you have found the right use cases. Furthermore, you should be&#xD;
    prepared to add, remove, combine, and divide the use cases before you arrive at a final version. You will get a better&#xD;
    understanding of the use cases once you have described them in detail.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The best way to find use cases is to consider what each actor requires of the system. Remember the system exists only&#xD;
    for its users, and should therefore be based on the users' needs. You will recognize many of the actors' needs through&#xD;
    the functional requirements made on the system. For each actor, human or not, ask yourself the following questions:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        What are the primary tasks the actor wants the system to perform?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Will the actor create, store, change, remove, or read data in the system?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Will the actor need to inform the system about sudden, external changes?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Does the actor need to be informed about certain occurrences in the system?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Will the actor perform a system start-up or shutdown?&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The answers to these questions represent the flows of events that identify candidate use cases. Not all constitute&#xD;
    separate use cases; some may be modeled as variants of the same use case. It is not always easy to tell what is a&#xD;
    variant and what is a separate and distinct use case. However, it will become clearer when you describe the flows of&#xD;
    events in detail.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Other than requirements, an enterprise model of your organization (also called a business model) is a valuable source&#xD;
    of input for determining use cases. The enterprise model describes how the information system might be incorporated&#xD;
    into existing operations and so gives you a good idea of the system's surroundings. You will also find concepts that&#xD;
    need to be defined in the enterprise model because it contains the &quot;business objects&quot; of the enterprise. If you have&#xD;
    followed the&amp;nbsp;Business Modeling&amp;nbsp;workflow, you will have a&amp;nbsp;business use-case model&amp;nbsp;and&#xD;
    a&amp;nbsp;business analysis model&amp;nbsp;to use as input.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A system can have several possible use-case models. The best way to find the &quot;optimal&quot; model is to develop two or three&#xD;
    models, choose the one you prefer, and then develop it further. Developing several alternative models also helps you to&#xD;
    understand the system better.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When you have outlined your first use-case model, you should verify that the use-case model addresses all functional&#xD;
    requirements. Scrutinize the requirements carefully to ensure that all the use cases meet all the requirements.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Name and Briefly Describe the Use Cases You Have Found&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Each use case should have a name that indicates what is achieved by its interactions with the actor(s). The name may&#xD;
    have to be several words to be understood. No two use cases can have the same name. Define each use case by writing a&#xD;
    brief description of it. As you write the description, refer to the glossary and, if you need to, define new concepts..&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Collect Additional Requirements&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Some of the system's requirements cannot be allocated to specific use cases; collect these in a&amp;nbsp;supplementary&#xD;
    specifications type&amp;nbsp;of artifact.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For many systems, there may be:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        physical requirements such as constraints on size, weight or power consumption&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        environmental requirements, such as heat tolerance, vibration resistance or contaminant resistance&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        additional product assurance requirements, such as safety, security, survivability&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    If analysis has proceeded at the enterprise level (using business modeling or some equivalent) then&amp;nbsp;business use&#xD;
    cases&amp;nbsp;and a&amp;nbsp;business analysis model&amp;nbsp;(with business use-case realizations and operations) will be&#xD;
    available. The business use-case realizations will have delineated the role the system will play in the enterprise and&#xD;
    defined the interactions between the system and other entities in the enterprise. These other entities are the actors.&#xD;
    The use cases for the system can be determined from a process of aggregation of the system's interactions with other&#xD;
    entities, by looking for similarities in the messages exchanged. This process can proceed from the business use-case&#xD;
    realizations, or from the 'white-box' description of the business use-case. See the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../practice.tech.syseng.joint_realization.base-ibm/guidances/concepts/uc_flowdown_1C141033.html&quot;&#xD;
    guid=&quot;_o_c2gL6MEd6EnZQdp87-CQ&quot;>Concept: Use-Case Flowdown&lt;/a>, for more information. The use cases so discovered may be&#xD;
    captured in diagrams. Any performance or other constraints (derived from the supplementary business specification or&#xD;
    other source) that may be associated with the system use-cases should be captured in the 'special requirements'&#xD;
    property of the use case.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Outline the Flow of Events&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    At this point, you should also write a first draft of the flow of events of the use case. Describe each use case's flow&#xD;
    of events as brief instants of performance, but do not go into detail. The person who will later specify the use&#xD;
    case-even if it is you-will need this step-by-step description. Start by outlining the basic flow of events, and once&#xD;
    you have agreed on that add alternative flows.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Example:&#xD;
&lt;/h5>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    The initial step-by-step description of the flow of events of the use case Recycle Items in the Recycling-Machine&#xD;
    System might look like this:&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            The customer presses the &quot;Start&quot; button.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            The customer inserts deposit items.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            The system checks the type of the inserted deposit items.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            The system increments the day's total of the types of items received.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            The customer presses the &quot;Receipt&quot; button.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            The system prints out the receipt.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    This initial description of the interactions between the system's actors and the system is pure 'black box', that is,&#xD;
    it does not reveal anything about the internal structure of the system. It should be constructed as a sequence of steps&#xD;
    ('black box steps'), each of which represents a fine-grain interaction with the system. These black box steps will be&#xD;
    used to guide the identification of 'services' to be supported by the system. Each black box step may be annotated with&#xD;
    performance or other resource constraints which are driven by external needs (for example in order to achieve some&#xD;
    overall response time). The allocation of such budgets has to be done carefully, recognizing the complexity of each&#xD;
    step, and will be refined as the use-case description is refined and realized. It may be the case that the driving&#xD;
    requirement itself has to be relaxed.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Describe How Actors and Use Cases interact&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Because it is important to show how actors relate to the use case, you should, on finding a use case, establish which&#xD;
    actors will interact with it. To do this, you must define a communicates-association that is navigable in the same&#xD;
    direction as the signal transmission between the actor and the use case.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Signal transmissions usually go in both directions. When this is the case, you must let the communicates-associations&#xD;
    be navigable in both directions. Define, at the most, one communicates-association for each actor-and-use-case pair.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You should also briefly describe each communicates-association you define.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Delineate the input/output entities that flow between actor and system. In the general systems case, these entities can&#xD;
    include data, mass flow, energy or discrete physical objects. Later, outside this task, we will also describe the&#xD;
    interface protocols associated with their exchange. You should include a broad description of what is exchanged in the&#xD;
    actor-system use-case association (with each association). Any interface constraints (because the system must&#xD;
    communicate with an existing system or external hardware) should be also&amp;nbsp;captured.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Package Use Cases and Actors&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    If the number of actors or use cases becomes too great, divide them into use-case packages to simplify the maintenance&#xD;
    of the use-case model. This also makes the use-case model easier to grasp, and simplifies the assignment of&#xD;
    responsibilities in the use-case model by letting developers be responsible for packages of use cases or actors.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Some alternative ways of packaging use cases together is if they:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Interact with the same actor.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Have include- or extend-relationships between each other.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Are all optional, and are offered by the system together or not at all.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    There are also other ways; however, to keep the model intuitive, it is important that you use a clear strategy when you&#xD;
    do the packaging.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Capture&amp;nbsp;the Use-Case Model in Diagrams&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    You can illustrate relationships among use cases and actors, as well as among related use cases, in diagrams of the&#xD;
    use-case model. These diagrams might contain any of the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Actors belonging to the same use-case package.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        An actor and all the use cases with which it interacts.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use cases that handle the same information.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use cases used by the same group of actors.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use cases that are often executed in one sequence.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use cases that belong to the same use-case package.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The most important use cases. A diagram of this type can function as a summary of the model, and is likely to be&#xD;
        included in the use-case view.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The use cases developed together (within the same increment).&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Each diagram should be owned by an appropriate package in the use-case model.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Evaluate your Results&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    You should check the use-case model at this stage to verify that your work is on track, but not review the model in&#xD;
    detail. You should also consider the&amp;nbsp;checking the use-case model while you are working on it.&amp;nbsp; For specific&#xD;
    recommendations on what to look for, see&amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.tech.common.extend_supp/guidances/checklists/use_case_model_27A2D1CF.html&quot;&#xD;
    guid=&quot;_0U6OEMlgEdmt3adZL5Dmdw&quot;>Checklist: Use-Case Model&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is important that people outside the development team (for example, users and customers) approve the use-case model&#xD;
    at this stage. Therefore, you must involve the users and the customer in reviewing the use-case model before you finish&#xD;
    this task. You can use the survey of the use-case model and its use-case diagrams created in the earlier step as a&#xD;
    guide in your discussions.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The interested parties will have to determine:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        If all necessary use cases are identified.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If any unnecessary use cases are identified.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If the behavior of each use case is performed in the right order.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If each use case's flow of events is as complete as it could be at this stage.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If the survey description of the use-case model makes it understandable.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&lt;br />&#xD;
&lt;p>&#xD;
    &lt;br />&#xD;
    &lt;br />&#xD;
    &lt;br />&#xD;
    &amp;nbsp;&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
