<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-aYrtGRvBVKiKUr4PVsPWSw" name="new_guideline,_uQlCMMsfEd6cx7PyM3aSbw" guid="-aYrtGRvBVKiKUr4PVsPWSw" version="7.5.0">
  <mainDescription>&lt;h4>&#xD;
    1. Review and Refine the Scenarios&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Start by reviewing and refining the scenarios that you will be dealing with in the current development cycle. These may&#xD;
    have already been initially identified during the previous activities. Use these enumerated scenarios as a starting&#xD;
    point in determining the scope of what flows will need to be described.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    2. Detail the Flow of Events&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Use the outline as a starting point, and gradually make it more detailed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Describe the use case according to the standards decided for the project. Decide on the following points before&#xD;
    describing the use case so that you are consistent across use cases:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        How does the use case start? The start of the use case must clearly describe the signal that activates the use&#xD;
        case. Write, for example, &quot;The use case can start when ... happens.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        How does the use case terminate? You should clearly state whatever happens in the course of the flow to terminate&#xD;
        the use case. Write, for example, &quot;When ... happens, the use case terminates.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        How does the use case interact with actors? To minimize any risk of misunderstanding say exactly what will reside&#xD;
        inside the system, and what will reside outside the system. Structure the description as a series of paragraphs, in&#xD;
        which each paragraph expresses an action in the format: &quot;When the actor does ..., the system does ....&quot; You can&#xD;
        also emphasize interaction by writing that the use case sends and receives signals from actors, for example: &quot;The&#xD;
        use case starts when it receives the signal 'start' from the Operator.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        How does the use case exchange data with an actor? If you like, you can refer to the arguments of the signals, but&#xD;
        it might be better to write, for example, &quot;The use case starts when the User logs into the system by giving his&#xD;
        name and password.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        How does the use case repeat some behavior? You should try to express this in natural language. However, in&#xD;
        exceptional cases, it might be worthwhile to use code-like constructs, such as &quot;WHILE-END WHILE,&quot; &quot;IF-THEN-ELSE,&quot;&#xD;
        and &quot;LOOP-END LOOP,&quot; if the corresponding natural language terms are difficult to express. In general, however, you&#xD;
        should avoid using such code-like constructs in use-case descriptions because they are hard to read and maintain.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Are there any optional situations in a use case's flow of events? Sometimes an actor is presented with several&#xD;
        options. This should be written in the same way. For example: &#xD;
        &lt;p>&#xD;
            &quot;The actor chooses one of the following, one or more times:&#xD;
        &lt;/p>&#xD;
        &lt;blockquote>&#xD;
            &lt;p>&#xD;
                a) . . .&#xD;
            &lt;/p>&#xD;
            &lt;p>&#xD;
                b) . . .&#xD;
            &lt;/p>&#xD;
            &lt;p>&#xD;
                c) . . .&quot; etc.&#xD;
            &lt;/p>&#xD;
        &lt;/blockquote>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        How should the use case be described so that the customer and the users can understand it? The use of&#xD;
        methodology-specific terminology, such as use case, actor, and signal, might make the text unnecessarily hard to&#xD;
        grasp. To make the text easier to read, you might enumerate the actions, or adopt some other strategy. Whatever&#xD;
        strategy you use should be specified in the general use-case-modeling guidelines so that you keep it in mind during&#xD;
        the entire task of describing use cases.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Concentrate on describing what is done in the use case, not how specific problems internal to the system should be&#xD;
    solved. Those details will be considered when later in the lifecycle, so do not make the description overly detailed at&#xD;
    this point. Describe only what you believe will be stable later on.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If a use case's flow of events has become too encompassing or complex, or if it appears to have parts that are&#xD;
    independent of one another, split it into two or more use cases.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When you write the descriptive text, refer to a glossary. As fresh terms evolve from new concepts, include them in the&#xD;
    glossary. Do not change the definition of a term without informing the appropriate project members.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A flow of events description explores:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        How and when the use case starts.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        When the use case interacts with the actors, and what data they exchange.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        How and when the use case uses data stored in the system, or stores data in the system.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        How and when the use case ends.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    You should also describe odd or exceptional flows of events. An exceptional flow is a subflow of the use case that does&#xD;
    not adhere to the use case's normal or basic behavior. This flow may nevertheless be necessary in any complete&#xD;
    description of the use case's behavior. A typical example of an exceptional flow is the one given in the first example.&#xD;
    If the use case receives some unexpected data (that the actor is not the one expected in that particular context) it&#xD;
    terminates. Having the wrong actor and terminating prematurely are not in the typical flow of events.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Other &quot;do's and don'ts&quot; to consider when you describe a use case include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Describe the flow of events, not just the use case's functionality or purpose.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Describe only flows that belong to the use case, not what is going on in other use cases that work in parallel with&#xD;
        it.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Do not mention actors who do not communicate with the use case in question.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Do not provide too much detail when you describe the use case's interaction with any actor.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If the order of the subflows described for the use case does not have to be fixed, do not describe it as if it does&#xD;
        have to be fixed.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use the terms in the common glossary and consider the following in writing the text:&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use straightforward vocabulary. Don't use a complex term when a simple one will do.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Write short, concise sentences.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Avoid adverbs, such as very, more, rather, and the like.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use correct punctuation.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Avoid compound sentences.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    From a systems engineering perspective, it is better that the use-case description be kept 'black box' at this stage,&#xD;
    and constructed around the view of actor action, system input, black-box step (what the system does) and system output&#xD;
    (which might flow to other actors). Description of what the system &lt;i>might&lt;/i> do internally (to produce the response)&#xD;
    might be necessary, but in no way constrains the system design. When such descriptions are written, they typically use&#xD;
    terminology well-understood in the domain. They might refer to the &lt;i>state&lt;/i> of the system (for example, when the&#xD;
    response is conditional upon that state) and &lt;i>stores&lt;/i> that the system notionally contains. This, however, reveals&#xD;
    nothing about how the system maintains such state or stores internally, only requiring that it behaves (in its history&#xD;
    of interactions) as if it did.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    3. Structure the Flow of Events&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A use case's flow of events can be divided into several subflows. When the use case is activated the subflows can&#xD;
    combine in various ways if the following holds true:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The use case can proceed from one of several possible paths, depending on the input from a given actor, or the&#xD;
        values of some attribute or object. For example, an actor can decide, from several options, what to do next, or,&#xD;
        the flow of events may differ if a value is less or greater than a certain value.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The use case can perform some subflows in optional sequences.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The use case can perform several subflows at the same time.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    You must describe all these optional or alternative flows. It is recommended that you describe each subflow in a&#xD;
    separate supplement to the Flow of Events section, and should be mandatory for the following cases:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Subflows that occupy a large segment of a given flow of events.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Exceptional flows of events. This helps the use case's basic flow of events to stand out more clearly.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Any subflow that can be executed at several intervals in the same flow of events.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    If a subflow involves only a minor part of the complete flow of events, it is better to describe it in the body of the&#xD;
    text.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    4. Illustrate Relationships with Actors and other Use Cases&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Create use-case diagrams showing the use case and its relationships to actors and other use cases. A diagram of this&#xD;
    type functions as a local diagram of the use case, and should be related to it. Note that this kind of local use-case&#xD;
    diagram is typically of little value, unless the use case has use-case relationships that need to be explained, or if&#xD;
    there is an unusual complexity among the actors involved.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    5. Describe any Special Requirements&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Any requirements that can be related to the use case, but that are not taken into consideration in the Flow of Events&#xD;
    of the use case, should be described in the Special Requirements of the use case. Such requirements are likely to be&#xD;
    nonfunctional. This step has particular significance in systems engineering: because you intend to flow down&#xD;
    non-functional requirements to subsystems, the tracking and allocation of such requirements must be done with some&#xD;
    rigor&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    6. Define Communication Protocols&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Define the communication protocol to be used for any actor that is another system or external hardware. If some&#xD;
    existing protocol (especially recognized protocols or protocols considered standard) is to be used, the description of&#xD;
    the use case should simply name the protocol. If the protocol is new, you should point to where the protocol definition&#xD;
    can be found which will need to be fully described during object-model development.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This step has special significance in systems engineering, because it is likely that the system will interact with&#xD;
    several external systems or pieces of hardware. Previously you produced a broad description of what is exchanged in the&#xD;
    actor-system use-case association (with each association). Now you elaborate that description by selecting a protocol&#xD;
    for it.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    7. Describe Preconditions&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A precondition on a use case explains the state the system must be in order for the use case to be possible to start.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Take care to describe the system state; avoid describing the detail of other incidental tasks that may have taken place&#xD;
    prior to this use case.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Preconditions are not used to create a sequence of use cases. There will never be a case where you have to first&#xD;
    perform one use case, then another, in order to have a meaningful flow of events. If you feel there is a need to do&#xD;
    this, it is likely that you have decomposed the use-case model too much. Correct this problem by combining the&#xD;
    sequentially dependent use cases into a single use case. If this makes the resulting&amp;nbsp; use case too complex,&#xD;
    consider techniques for structuring use cases.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    8. Describe Postconditions&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A postcondition on a use case lists possible states the system can be in at the end of the use case. The system must be&#xD;
    in one of those states at the end of the execution of the use case. It is also used to state actions that the system&#xD;
    performs at the end of the use case, regardless of what occurred in the use case.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Postconditions are used to reduce the complexity and improve the readability of the flow-of-events of the use case.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Under no circumstances should postconditions be used to create a sequence of use cases. There should never be a case&#xD;
    where you have to first perform one use case, then another, in order to have a meaningful flow of events. If you feel a&#xD;
    need to do this, the sequentially dependent use cases should be combined into a single use case. If this makes the&#xD;
    combined use case too complex, consider techniques for structuring use cases.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    9. Describe Extension Points&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    If the use case is to be extended by another use case, you need to describe what the extension points are.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    10. Evaluate your Results&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Review and discuss the use case with the stakeholders, so that they have a clear understanding of the use case and&#xD;
    agree on its description.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The use-case description is complete only when it describes everything the use case performs, implements, or otherwise&#xD;
    allows from beginning to end. Before you finish, check that the use case exhibits the properties that characterize it&#xD;
    as a &quot;good&quot; use case.&lt;br />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
