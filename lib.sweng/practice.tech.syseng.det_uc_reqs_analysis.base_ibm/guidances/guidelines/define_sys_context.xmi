<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-VolschErR0ZAwJ3BBSrswQ" name="new_guideline,_8AU8UMpGEd6bFqpedVj-LA" guid="-VolschErR0ZAwJ3BBSrswQ" changeDate="2009-11-05T12:12:04.031-0800" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Whereas the System Use-Case Model shows the behavioral context for the system,&amp;nbsp;during this activity&amp;nbsp;you&#xD;
    create a logical model of the system in its environment in a &lt;i>Context Diagram:&lt;/i>&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The interfaces to be &lt;i>realized&lt;/i> by the system (in terms of the &lt;i>operations&lt;/i> the systems provides, and the&#xD;
        associated protocols supported, the &lt;i>state variables&lt;/i> and &lt;i>stores&lt;/i> that the system realizes, and&#xD;
        attributes characterized as &lt;i>Technical Performance Measures&lt;/i>).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;i>I/O entities&lt;/i> that flow between the system and its actors.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The interfaces &lt;i>required&lt;/i> by the system (to be realized by the actors which interact with the system) for&#xD;
        correct performance. Often, if the actor represents an existing system with which the system must communicate,&#xD;
        these required interfaces simply reflect constraints imposed by that other system.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    A context diagram shows the top-level collaboration between the system and its actors. It is the structural analog to&#xD;
    the Use-Case Model for the system.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    I/O entities (represented for modeling as &quot;I/O&quot; stereotyped classes with attributes but no operations) describe things&#xD;
    that flow into or out of the system, and can, in the general system case, include data, mass, energy, or physical&#xD;
    parts. I/O entities are associated (during modeling) with actor-system pairs, indicating that these particular I/O&#xD;
    entities flow between actor and system. They can optionally be shown on the diagrams, associated with the actor, and&#xD;
    the direction of flow is indicated by a stereotype &quot;send&quot;or &quot;receive&quot; on the association, indicating the direction&#xD;
    relative to the actor.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A System Operation is a service that can be requested from an object to effect behavior. An operation specifies the&#xD;
    name, type, parameters, and constraints for invoking an associated behavior. The Operations are grouped around&#xD;
    interfaces along the main responsibilities of the (sub)system under consideration. A system operation invocation&#xD;
    represents a finer grained interaction with the system than a use-case instance, and a use-case instance is a&#xD;
    composition of operation invocations and responses.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    State variables and stores are attributes defined on the interfaces realized by the system. These are abstract and&#xD;
    require that the system maintain information corresponding to the type and multiplicity of the attribute and permit&#xD;
    storage, retrieval and modification of that information. There is no implication that there an attribute in the system&#xD;
    directly corresponds to the attribute defined at the interface. The difference between state variables and stores is&#xD;
    not intrinsic, it just reflects the way the attributes are used to control the operation of the system's (abstract)&#xD;
    state machine. A &quot;state&quot; persists over a period of time, unlike an event (such as the arrival of a signal) that occurs&#xD;
    at a point in time. The state machines mentioned here are finite state machines, and the delineation of &quot;state&quot; is&#xD;
    usually decided by relatively few variables; for example, the current state could be specified by the value of a single&#xD;
    attribute of an enumeration type. The reaction of the system however, to an event, might depend not only on the nature&#xD;
    of the event (and the information it carries, for example, in the operation parameters), and the current state, but&#xD;
    also on the value of (perhaps many) other attributes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A Technical Performance Measure (TPM) is a key technical attribute selected from the Supplementary Specifications or&#xD;
    Use-Case Model as a critical indicator of system effectiveness, that, if not achieved, puts the system development at&#xD;
    risk of overrunning cost, schedule or performance constraints. The emerging values of such attributes are tracked over&#xD;
    the project lifetime. For example, it might be important that the delivered weight of a system be kept below a certain&#xD;
    limit, and the achievement of this target needs to be tracked as design and construction proceeds. The weight of the&#xD;
    system as delivered is obviously an attribute (which can be sensed in various ways) of an instance of the system, and&#xD;
    is not necessarily the same as the target weight during development (for a system to be launched into orbit you would&#xD;
    probably like it to be less). A UML tagged value can be used to annotate a TPM attribute to indicate the performance&#xD;
    target, for example:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font face=&quot;Arial&quot; size=&quot;2&quot;>&quot;TPM&quot; weight {maximum_weight = 1000kg} &lt;!--Is this example expressed correctly? -->&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Technical Performance Measures can also apply to other non-structural characteristics such as operation response time.&#xD;
    Tagged values can be applied to system operations, or the system itself, to record these.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Create Initial Context Diagram&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The following steps show evolving levels of detail of the system in context. The example illustrated is that of a&#xD;
    security system, protecting property from unauthorized intrusion, which, in addition to sounding an alarm, has the&#xD;
    ability to report breaches to some kind of response service.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As you evolve and add more detail to the Use-Case Model (discovering the actors; or if Business Modeling has been&#xD;
    performed, and actors and perhaps operations already identified, elaborating their interaction), you can create the&#xD;
    initial collaboration and illustrate this with a Context Diagram. The Context Diagram can be created as shown,&#xD;
    initially with the system interfaces abstracted away. The system is depicted as a top-level subsystem (stereotyped&#xD;
    &quot;system&quot;), which eventually realizes several interfaces. Actors and their associations are also shown, again, with no&#xD;
    detail initially.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;524&quot; alt=&quot;&quot; src=&quot;resources/init_cntxt_diag.gif&quot; width=&quot;534&quot; />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Refine Associations and Interfaces&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Next, you refine the associations between actors and system, and the system interface. You can start to reason about&#xD;
    the system operations and the system attributes as they emerge from other activities around defining the actors and&#xD;
    detailing use cases. Note that now the system appears to the actors, by showing the interface. The realization of this&#xD;
    can be shown if you wish (highlighted by the dashed circle in the diagram), but can be omitted without much loss of&#xD;
    information.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    At this stage, only tentatively identify the I/O entities, based on domain knowledge and any work done previously in&#xD;
    realizing use cases at the enterprise level. Note that it is not required that the I/O entities be shown on the&#xD;
    diagram, but this can be helpful in reasoning about actor-system interactions.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Thus, you can start to characterize the connection(s) between actor and system (for example, record the protocol&#xD;
    required) and record the entities that flow between them.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;487&quot; alt=&quot;&quot; src=&quot;resources/prel_cntxt_diag.gif&quot; width=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Detail System Operations and other Characteristics&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In this step, you start to construct use-case scenarios (instances of use cases) from which you can describe system&#xD;
    operations. The scenarios can be illustrated by interaction or activity diagrams. Each black-box step in a use case&#xD;
    represents a finer-grained interaction with the system and maps to an operation invocation (but not necessarily a&#xD;
    unique operation; other black-box steps might use the same operation). As well as defining the system operations in the&#xD;
    Context Diagram, the use cases are also annotated, for traceability, to the operations invoked. The operations also&#xD;
    inherit any performance requirements or other non-functional requirements that have been allocated to the black-box&#xD;
    steps. As you examine each black-box step performed in the scenario, you discover the use of names that might suggest&#xD;
    state variables and stores that the system must maintain to execute the use-case scenario. You can also refine the I/O&#xD;
    entities that are required and associate these with operation invocations to form the signals sent between actor and&#xD;
    system.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This analysis might also identify interfaces required by the system, that is, interfaces that must be supported by the&#xD;
    actors (to process messages from the system).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This top-level collaboration, captured in the Context Diagram, allows the interfaces, connections, what flows into and&#xD;
    out of the system, and associated performance characteristics, to be rigorously specified, enabling system development&#xD;
    to proceed somewhat independently from other elements in the system's context.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
