<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-xw54nFrwBWrBncPy63Qibg" name="new_toolmentor,_lOBSkJx4Edyebv9DCb0KJA" guid="-xw54nFrwBWrBncPy63Qibg" changeDate="2008-05-23T15:28:58.435-0700" version="7.2.0">
  <mainDescription>&lt;p>&#xD;
    This tool mentor is applicable for use both with Microsoft Windows systems and with UNIX systems.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The PurifyPlus tools include Rational Purify, Rational PureCoverage, and Rational Quantify.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;15&quot; alt=&quot;Book icon&quot; hspace=&quot;0&quot; src=&quot;./resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> To learn more about&#xD;
    PurifyPlus tools, read the &lt;i>Getting Started&lt;/i> manual for PurifyPlus (Windows version or UNIX version).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;helpbook icon&quot; hspace=&quot;0&quot; src=&quot;./resources/helpbook.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For&#xD;
    step-by-step information about using PurifyPlus tools, see the online Help for the tool.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You can use PurifyPlus tools to do the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Detect memory errors and leaks (C/C++ programs on Windows and UNIX).&lt;/b> Use Purify to pinpoint errors and leaks&#xD;
        in the application under test.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Monitor code coverage (Windows and UNIX).&lt;/b> Use PureCoverage to show you gaps in your testing and alert you to&#xD;
        regressions.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Profile performance (Windows and UNIX).&lt;/b> Use Quantify to warn you if new check-ins degrade performance.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Executing test suites with PurifyPlus tools results in reliable, error-free code that runs at maximum efficiency.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;h4>&#xD;
    Tool Steps&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    To implement tests using the PurifyPlus tools:&#xD;
&lt;/p>&#xD;
&lt;div style=&quot;MARGIN-LEFT: 2em&quot;>&#xD;
    &lt;ol>&#xD;
        &lt;li>&#xD;
            &lt;a href=&quot;#Step1&quot;>&lt;u>&lt;font color=&quot;#0000ff&quot;>Run the program under Purify to collect error and leak data (C/C++&#xD;
            programs only)&lt;/font>&lt;/u>&lt;/a>&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;a href=&quot;#Step2&quot;>&lt;u>&lt;font color=&quot;#0000ff&quot;>Run the program under PureCoverage to monitor code&#xD;
            coverage&lt;/font>&lt;/u>&lt;/a>&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;a href=&quot;#Step3&quot;>&lt;u>&lt;font color=&quot;#0000ff&quot;>Run the program under Quantify to profile performance&lt;/font>&lt;/u>&lt;/a>&#xD;
        &lt;/li>&#xD;
    &lt;/ol>&#xD;
&lt;/div>&#xD;
&lt;h3>&#xD;
    1. &lt;a id=&quot;Step1&quot; name=&quot;Step1&quot;>&lt;/a>&lt;b>Run the program under Purify to collect error and leak data (C/C++ programs&#xD;
    only)&amp;nbsp;&lt;/b>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Purify detects runtime errors, including memory leaks, in the application under test and in the components it uses. It&#xD;
    reports memory errors such as array bounds errors, access through dangling pointers, uninitialized memory reads, memory&#xD;
    allocation errors, and memory leaks, so that they can be resolved before they do any damage. &amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Begin by incorporating Purify into your existing Perl scripts, batch files, and makefiles.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>On Windows&lt;/b> , modify the command lines that run your program &lt;font         face=&quot;courier&quot;>&amp;lt;ProgramName&amp;gt;.exe&lt;/font>&lt;br />&#xD;
        &amp;nbsp;&lt;br />&#xD;
        &lt;font face=&quot;courier&quot;>Purify /SaveTextData &amp;lt;ProgramName&amp;gt;.exe&lt;/font>&lt;br />&#xD;
        &amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;br />&#xD;
        &amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>On UNIX&lt;/b> , modify the compilation and link line:&lt;br />&#xD;
        &amp;nbsp;&lt;br />&#xD;
        &lt;font face=&quot;courier&quot;>% purify -logfile=&amp;lt;filename&amp;gt; cc -g &amp;lt;program_name&amp;gt;.c&lt;/font>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Using the &lt;font face=&quot;courier&quot;>/SaveTextData&lt;/font> &lt;font face=&quot;courier&quot;>-logfile&lt;/font> option on UNIX, causes Purify to run without the user interface, and, when you run the program from your script, sends the error and leak data to a text output file when your program stops.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Examine this output file yourself, or write scripts to analyze it. You can use the error and warning messages in the&#xD;
    file as additional criteria for your test results.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You can collect coverage data for the same runs, if you have PureCoverage installed, by adding the option &lt;font     face=&quot;courier&quot;>/Coverage&lt;/font> (Windows) or by adding &lt;font face=&quot;courier&quot;>purecov&lt;/font> &lt;font     face=&quot;courier&quot;>purify&lt;/font> (UNIX). Using the coverage data, you can also find the parts of your code that you have&#xD;
    not checked for errors. For more information about using coverage data, see Step 2 of this Tool Mentor.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Notes&lt;/b> :&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Use the Purify API to control data collection from within your program.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Purify also has command-line options that allow you to save test data as binary files that you can examine using&#xD;
        the Purify graphical user interface; this is discussed in the Tool Mentor &quot;Analyzing Runtime Performance Using the&#xD;
        Rational PurifyPlus Tools.&quot;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;b>&lt;img height=&quot;16&quot; alt=&quot;helpbook icon&quot; hspace=&quot;0&quot; src=&quot;./resources/helpbook.gif&quot; width=&quot;16&quot; border=&quot;0&quot; />&lt;/b> For more&#xD;
    information, look up the following topics in the Purify online Help index:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;i>running programs&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>error messages&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>options&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>API functions&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>saving data&lt;/i>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    2. &lt;a id=&quot;Step2&quot; name=&quot;Step2&quot;>&lt;/a>&lt;b>Run the program under PureCoverage to monitor code coverage.&amp;nbsp;&lt;/b>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    PureCoverage provides accurate line-level and function-level code coverage information. Use PureCoverage with your&#xD;
    nightly tests to ensure that the tests are keeping pace with your code development.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Begin by incorporating PureCoverage into your existing Perl scripts, batch files, and makefiles.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>On Windows&lt;/b> , modify the command lines that run your program, or Java class file, .jar file, or applet, to&#xD;
        include PureCoverage:&lt;br />&#xD;
        &amp;nbsp;&lt;br />&#xD;
        For C/C++ programs: &lt;font face=&quot;courier&quot;>Coverage /SaveTextData &amp;lt;ProgramName&amp;gt;.exe&lt;/font>&lt;br />&#xD;
        For Java class files: &lt;font face=&quot;courier&quot;>Coverage /SaveTextData /Java Java.exe&#xD;
        &amp;lt;ClassName&amp;gt;.class&lt;/font>&lt;br />&#xD;
        For .NET managed code programs: &lt;font face=&quot;courier&quot;>Coverage /SaveTextData /Net&#xD;
        &amp;lt;ProgramName&amp;gt;.exe&lt;/font>&lt;br />&#xD;
        &amp;nbsp;&lt;br />&#xD;
        Using the &lt;font face=&quot;courier&quot;>/SaveTextData&lt;/font> option causes PureCoverage to run without the user interface,&#xD;
        and, when you run the program from your script, sends the data to a text output file when your program stops.&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;br />&#xD;
        &amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>On UNIX&lt;/b> , modify the compile and link line:&lt;br />&#xD;
        &amp;nbsp;&lt;br />&#xD;
        For C/C++ programs: &lt;font face=&quot;courier&quot;>% purecov cc -g &amp;lt;program_name&amp;gt;.c&lt;/font>&lt;br />&#xD;
        For Java class files: &lt;font face=&quot;courier&quot;>% purecov -java java &amp;lt;class_name&amp;gt;&lt;/font>&lt;br />&#xD;
        &amp;nbsp;&lt;br />&#xD;
        Use the PureCoverage &lt;font face=&quot;courier&quot;>-export&lt;/font> option after the program exits to write the coverage data&#xD;
        to a text output file.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    As you exercise your code, PureCoverage records data about the lines and functions that are used. You can call&#xD;
    PureCoverage API functions from your program to save data at specific points in your code, or to collect data only for&#xD;
    certain routines. When you exit the program, you have an accurate set of data indicating which lines and which&#xD;
    functions have, and have not, been covered by your test.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You can merge coverage data from multiple runs, or keep it in separate files to analyze changes in coverage.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Use scripts to compare the current data with data you collected from previous runs. If coverage drops, Your tests may&#xD;
    not be exercising new code, or the new code may have introduced a defect that is causing a large section of code not to&#xD;
    be tested. Use a testing tool such as Rational Robot or Rational Visual Test to write test cases that exercise the new&#xD;
    code.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Note:&lt;/b> You can examine binary coverage data files using the PureCoverage graphical user interface.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;15&quot; alt=&quot;helpbook icon&quot; hspace=&quot;0&quot; src=&quot;./resources/helpbook.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For more&#xD;
    information, look up the following topics in the PureCoverage online Help index:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li class=&quot;mvd-P&quot;>&#xD;
        &lt;i>running programs&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>options&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li class=&quot;mvd-P&quot;>&#xD;
        &lt;i>API functions&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li class=&quot;mvd-P&quot;>&#xD;
        &lt;i>saving data&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li class=&quot;mvd-P&quot;>&#xD;
        &lt;i>comparing data&lt;/i>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    3. &lt;a id=&quot;Step3&quot; name=&quot;Step3&quot;>&lt;/a>&lt;b>Run the program under Quantify to profile performance &amp;nbsp;&lt;/b>&#xD;
&lt;/h3>Quantify provides a complete and accurate set of performance data for your program and its components, so that you can&#xD;
monitor performance and identify regressions early in the development and testing cycle.&amp;nbsp; &#xD;
&lt;p>&#xD;
    Begin by incorporating Quantify into your existing Perl scripts, batch files, and makefiles.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>On Windows&lt;/b> , modify the command lines that run your program, or class file, .jar file, or applet, to include&#xD;
        Quantify:&lt;br />&#xD;
        &amp;nbsp;&lt;br />&#xD;
        For C/C++ programs: &lt;font face=&quot;courier&quot;>Quantify /SaveTextData &amp;lt;ProgramName&amp;gt;.exe&lt;/font>&lt;br />&#xD;
        For Java class files: &lt;font face=&quot;courier&quot;>Quantify /SaveTextData /Java Java.exe&#xD;
        &amp;lt;ClassName&amp;gt;.class&lt;/font>&lt;br />&#xD;
        For .NET managed code programs: &lt;font face=&quot;courier&quot;>Quantify /SaveTextData /Net&#xD;
        &amp;lt;ProgramName&amp;gt;.exe&lt;/font>&lt;br />&#xD;
        &amp;nbsp;&lt;br />&#xD;
        Using the &lt;font face=&quot;courier&quot;>/SaveTextData&lt;/font> option causes Quantify to run without the user interface, and,&#xD;
        when you run the program from your script, sends the data to a text output file when your program stops.&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;br />&#xD;
        &amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>On UNIX&lt;/b> , modify the compile and link line:&lt;br />&#xD;
        &amp;nbsp;&lt;br />&#xD;
        For C/C++ programs: &lt;font face=&quot;courier&quot;>% quantify cc -g &amp;lt;program_name&amp;gt;.c&lt;/font>&lt;br />&#xD;
        For Java class files: &lt;font face=&quot;courier&quot;>% quantify -java java &amp;lt;class_name&amp;gt;&lt;/font>&lt;br />&#xD;
        &amp;nbsp;&lt;br />&#xD;
        Use the Quantify &lt;font face=&quot;courier&quot;>-export&lt;/font> option after the program exits to write the performance data&#xD;
        to a text output file.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    As you exercise your code, Quantify records data about your program's performance. You can use API functions to pause&#xD;
    and resume data recording at any time, and so limit profiling to specific portions of code. You can also save data at&#xD;
    specific points in your code's execution, or collect performance data only for specific routines. When you exit your&#xD;
    program, Quantify has an accurate profile of its performance.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You can write scripts that compare datasets and report changes in performance:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Degradations in performance may indicate that the most recently checked-in code has slowed down the program.&#xD;
        Analyze the data you have collected to find the sections of the program that have unacceptable performance.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Marked improvements may indicate that the developers have improved their code, or that your tests for some reason&#xD;
        have stopped exercising large sections of the code. Check your coverage data to see whether you are still achieving&#xD;
        your previous levels of coverage.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;b>Note:&lt;/b>Quantify can also save test data as binary files that you can examine using the Quantify graphical user&#xD;
    interface; this is discussed in the Tool Mentor &quot;Analyzing Runtime Performance Using the Rational PurifyPlus Tools.&quot;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information, look up the following topics in the Quantify online Help index:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;i>running programs&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>options&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>API functions&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>saving data&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>comparing data&lt;/i>&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
