<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1">
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-IyazpkwUesGCNkV6xwkyow" name="Requirements Analysis,_xPSq8WG0Ed6ByZ91UzrddQ" guid="-IyazpkwUesGCNkV6xwkyow" version="7.5.0"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-V2XEo8S6TjZcmN_gyM995A" name="an_stk_reqs,_zkldoGHQEd6ByZ91UzrddQ" guid="-V2XEo8S6TjZcmN_gyM995A">
    <refinedDescription>&lt;p>&#xD;
    The main objective of this task is to ensure that the stakeholder requirements are expressed in a formal, structured,&#xD;
    verifiable, unambiguous manner (this is the Engineering part of the process), to increase the chance that the system to&#xD;
    be developed is exactly the system the stakeholders need. Thus the requirements must reflect the stakeholders' needs at&#xD;
    all times during development. In some cases, there is an existing stakeholder requirements specification (which must&#xD;
    then be an input to the task) and this task is capturing new stakeholder requirements. This is a definition of the&#xD;
    problem to be solved and its context, but at a more detailed level.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The refinement step is perhaps the most important as it is here that the set of stakeholder requests (and other change&#xD;
    requests) are combined with existing stakeholder requirements and turned into a consistent stakeholder requirements&#xD;
    specification. The task steps below identify the principal outputs from each step, but note that, in general, each step&#xD;
    could cause changes to any of the outputs.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-XdJd7wjHQ1b3dcqFBIY2fA" name="stk_reqs_spec,_zkvOoGHQEd6ByZ91UzrddQ" guid="-XdJd7wjHQ1b3dcqFBIY2fA">
    <refinedDescription>&lt;p>&#xD;
    In practice, there&amp;nbsp;may be several levels of Stakeholder Requirements Specification - for example, in some cases&#xD;
    the Vision could be sufficient. In other cases, organizations may need to work with several levels of Stakeholder,&#xD;
    evolving the specification for the different levels. Typically, this&amp;nbsp;would include specifications such as&#xD;
    a&amp;nbsp;Product Vision, Product Objectives, Product Specification, etc.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If more than one level of Stakeholder Requirement Specification is used, then remember the following points:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Each document must be a complete and consistent description of the problem, at an appropriate level of abstraction&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Traceability must be maintained throughout the levels&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        All documents must be maintained in parallel&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Frequently, it&amp;nbsp;is sufficient to evolve a single document. However, we recommend retaining at least the distinction&#xD;
    between the overall Vision and the Stakeholder Requirements.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Gk7A35Cgm_AzuA372hIfaQ" name="gen_sys_reqs,_0a0iEGHQEd6ByZ91UzrddQ" guid="-Gk7A35Cgm_AzuA372hIfaQ">
    <refinedDescription>&lt;p>&#xD;
    The main objective of this task is to ensure that the System Requirements are expressed in a formal, structured,&#xD;
    verifiable, unambiguous manner (this is the Engineering part of the process), to maximize the chance that the system to&#xD;
    be developed is exactly the system the Stakeholders need (asked for).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This is a definition of the solution to the problem, at the level of what the system has to do, rather than how it will&#xD;
    do it (which is design). It is likely that changes will be proposed during this task.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Rb_H-1I7QN5_eJymCCBtgQ" name="trace_uc_reqs,_00AeIGHQEd6ByZ91UzrddQ" guid="-Rb_H-1I7QN5_eJymCCBtgQ">
    <refinedDescription>&lt;p>&#xD;
    This task establishes traceability from the system use cases to the&amp;nbsp;system requirements. This traceability&#xD;
    information is initially used to ensure that each system requirement has been considered (coverage&#xD;
    analysis).&amp;nbsp;Later in the lifecycle this traceability information is used to assess the impact of proposed changes&#xD;
    on the solution architecture.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-u666RcYhRN3ljnorGEl-aQ" name="link_reqs,_1TmkMGHQEd6ByZ91UzrddQ" guid="-u666RcYhRN3ljnorGEl-aQ">
    <refinedDescription>&lt;p>&#xD;
    Establish traceability from each System Requirement to one or more requirements in the Stakeholder Requirements&#xD;
    Specification to ensure that:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        All System Requirements are derived from Stakeholder Requirements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        All Stakeholder Requirements are satisfied by one or more System Requirements.&#xD;
    &lt;/li>&#xD;
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-L4lciPGtiGSKOo0UMT4Abw" name="pri_part_uc,_1qZTkGHQEd6ByZ91UzrddQ" guid="-L4lciPGtiGSKOo0UMT4Abw">
    <refinedDescription>&lt;p>&#xD;
    The selection of system use cases and scenarios is driven by the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The benefit of the scenario to stakeholders: critical, important, useful.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The architectural impact of the scenario: none, extends, modifies.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The risks to be mitigated: performance, availability of a product, and suitability of a component.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    In general the impact on architecture is correlated to the criticality. However, it must be noted that there might be&#xD;
    critical use cases that have little or no impact, and vice versa, and some ancillary use cases can have a big impact on&#xD;
    the architecture, which makes it questionable from a business perspective. The main concern is to select a set of use&#xD;
    cases that ensures broad coverage (participation) of system internals, while still satisfying other constituencies.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Cg-Ws4Xd6FEXSXECoaqpfA" name="sys_srs,_9MRz0WHUEd6ByZ91UzrddQ" guid="-Cg-Ws4Xd6FEXSXECoaqpfA">
    <refinedDescription>&lt;p>&#xD;
    A&amp;nbsp;System Requirements Specification is strictly the set of all relevant System Requirements for a project. This&#xD;
    set provides a complete and consistent abstract description of the solution to the problem represented by a stakeholder&#xD;
    specification or a similar artifact, and its context, at an appropriate level of abstraction.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In practice, there&amp;nbsp;may be several levels of&amp;nbsp;System Requirements Specification - for example, in some cases&#xD;
    the a single level might be enough, in others, the system must be broken-down into subsystems at various levels.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If more than one level of System Requirement Specification is used, then remember the following points:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Each specification must be a complete and consistent description of the solution, at an appropriate level of&#xD;
        abstraction&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Traceability must be maintained throughout the levels&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        All specifications must be maintained in parallel&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Frequently, it&amp;nbsp;is sufficient to evolve a single specification.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The system requirements specification captures all of the system functional and non-functional requirements in one&#xD;
    place so that they may be analyzed for consistency, completeness and correctness.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Requirements must be clear, unambiguous, testable and complete. They must include all required properties of the&#xD;
    system. Care must be taken not to over-specify (a common problem) by including design measures in the requirements.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-OGGcUP1HkWdgEssTSbNdHA" name="sys_uc_diag,_CUKN0JfyEd6u7McLcbxIEQ" guid="-OGGcUP1HkWdgEssTSbNdHA">
    <refinedDescription>This artifact should serve as a communication medium for customers, users, system developers. It also provides a basis for&#xD;
prioritizing and partitioning the system use cases.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-QVe1FUZr8OPISSRri4MT8g" name="tr_uc_to_sys_reqs,_CUKN0ZfyEd6u7McLcbxIEQ" guid="-QVe1FUZr8OPISSRri4MT8g"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-UbWEGr6fqxeoPezZDyj-xg" name="tr_rec_srs_stk,_CUKN0pfyEd6u7McLcbxIEQ" guid="-UbWEGr6fqxeoPezZDyj-xg"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-P9qDn1dcpF0TEee02HzDpg" name="sys_uc_priority_list,_CUKN05fyEd6u7McLcbxIEQ" guid="-P9qDn1dcpF0TEee02HzDpg">
    <refinedDescription>&lt;p>&#xD;
    The overall priority could be driven by a number of factors, for example:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The benefit to the stakeholders&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Architectural impact&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Risks to be mitigated&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Each use case should be assigned a value for each criterion relevant to the project and enough information should be&#xD;
    provided in support for prioritizing and partitioning the system use cases.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-rjTJpoMuJFmG8Rra49aIrg" name="glossary,_RHZvobRBEd6dub1WVMVYrA" guid="-rjTJpoMuJFmG8Rra49aIrg">
    <keyConsiderations>&lt;p> Although listed as an &lt;i>output from&lt;/i> and an&lt;i> input to&lt;/i> tasks associated 
  with the requirements discipline, this artifact can be updated at any time and 
  by any role as new terms are identified. The terms defined should be used according 
  to the recorded definitions in all project documentation so that all stakeholders 
  can clearly see that terms are being used consistently. &lt;/p>
&lt;p> One of the primary decisions when developing&amp;nbsp;this artifact&amp;nbsp;is whether 
  to have all terms in a single glossary or to maintain terms in several glossaries, 
  business terms artifacts, or models.&amp;nbsp;If terms are defined in multiple places, 
  you need to communicate all of those sources to the team and decide which take 
  precedence. &lt;/p>
&lt;p> It may be important, even in small projects, to reference and use existing 
  broader glossaries, business terms artifacts, or data models, where they exist. 
&lt;/p>
&lt;p> Industry- and organization-wide glossaries may be referenced, and compliance 
  with such specific chosen standards may be required. &lt;/p></keyConsiderations>
    <refinedDescription>&lt;p> This artifact&amp;nbsp;helps you avoid miscommunication by providing two essential 
  resources: &lt;/p>
&lt;ul>
  &lt;li> A central location to look for terms and abbreviations that are new to 
    development team members &lt;/li>
  &lt;li> Definitions of terms that are used in specific ways within the domain &lt;/li>
&lt;/ul>
&lt;p> Definitions for the glossary terms come from several sources, such as requirements 
  documents, specifications, and discussions with stakeholders and domain experts. 
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-AUOHq0xen0207T1JSzvzYg" name="icd,_RHZvo7RBEd6dub1WVMVYrA" guid="-AUOHq0xen0207T1JSzvzYg">
    <refinedDescription>&lt;p>&#xD;
    This artifact includes specifications&amp;nbsp;for all thermal, mechanical, electrical, optical and chemical interfaces&#xD;
    between the element and its operational, maintenance,&amp;nbsp;and test environments.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The system element may be the entire system, in which case the interfaces represent the external system&#xD;
    interfaces.&amp;nbsp; Alternatively, the system element may be a segment, subsystem, unit, or component of an enclosing&#xD;
    system.&amp;nbsp; In&amp;nbsp;which case, the interfaces represent the internal interfaces of the enclosing system.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There will be multiple instances of this artifact. In particular, there will always be an instance of this artifact&#xD;
    that specifies the external interfaces, which may include interfaces required for testing and maintenance&amp;nbsp;as well&#xD;
    as the operational interfaces, of the system.&amp;nbsp; This ensures that the system will be interoperable within&amp;nbsp;the&#xD;
    operational (and test and maintenance) environment.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Additional instances of this artifact will be required to specify the internal interfaces for each system&#xD;
    element.&amp;nbsp; This ensures that the system element will be interoperable within the enclosing system.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-WUyV2bfgRMNBl34l8COypQ" name="sys_uc_act_diag,_FUu_d_M7Ed-Fw-MeaQjkmw" guid="-WUyV2bfgRMNBl34l8COypQ">
    <refinedDescription>&lt;p>&#xD;
    An Activity Diagram is similar to the classic flow chart. It describes a workflow, business process, or algorithm by&#xD;
    decomposing the flow of execution into a set of actions and sub activities joined by transitions and various&#xD;
    connectors. These actions and sub activities are called activity nodes. An activity can be a simple linear sequence of&#xD;
    activity nodes or it can be a complex series of parallel activity nodes with conditional branching and concurrency.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There will be multiple instances of this artifact.&amp;nbsp;During requirements analysis, &quot;black-box&quot; activity diagrams are&#xD;
    created describing the functional flows for the system as a whole.&amp;nbsp;During architectural design,&#xD;
    &quot;white-box&quot;&amp;nbsp;activity diagrams are created that show the allocation of actions to specific system elements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Activities may be grouped and assigned to objects - e.g. subsystems. In this case, the activity diagram is split into&#xD;
    swim lanes that depict the respective responsibilities.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-W3vwh-GAZCyVZAph6b91kw" name="sys_uc_ib_diag,_FUu_ffM7Ed-Fw-MeaQjkmw" guid="-W3vwh-GAZCyVZAph6b91kw">
    <refinedDescription>&lt;p>&#xD;
    Elements of this diagram are instances of SysML blocks that represent the use case and its associated actor(s).&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Use-Case Block is the structural representation of a use case defined in the use-case diagram. It is used to&#xD;
    represent the formal specification of the system behavior for the use case and acts as a location for the&#xD;
    operations/functions that the use case employs. The Use-Case Block communicates with relevant Actor Blocks via&#xD;
    ports&amp;nbsp;and associated provided and required interfaces.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An Actor Block is the realization of an actor that was previously identified in a system&amp;nbsp;use case diagram. An&#xD;
    actor block represents a person, or system that is external to the system under development, that interacts&#xD;
    with&amp;nbsp;the system under development&amp;nbsp;by providing the inputs to, and receiving&amp;nbsp;outputs&amp;nbsp;from&amp;nbsp;the&#xD;
    system under development.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-D4_FbSZ7Pe_GSTX1Rh9EfQ" name="sys_uc_seq_diag,_FUu_gPM7Ed-Fw-MeaQjkmw" guid="-D4_FbSZ7Pe_GSTX1Rh9EfQ">
    <refinedDescription>&lt;p>&#xD;
    This artifact describes the time-ordered sequence of interactions between a system use case and its associated actors.&#xD;
    In addition to the sent and received messages (service requests), the use-case lifeline shows the requested operations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There will be multiple instances of this artifact.&amp;nbsp;Initially, &quot;black-box&quot;&amp;nbsp;sequence diagrams are created which&#xD;
    evolve into &quot;white-box&quot;&amp;nbsp;sequence diagrams that show the&amp;nbsp;responsibilities of&amp;nbsp;specific system elements.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-nysfz11IW7Dwqqm8S52rMQ" name="sys_uc_st_chart_diag,_FUu_g_M7Ed-Fw-MeaQjkmw" guid="-nysfz11IW7Dwqqm8S52rMQ">
    <refinedDescription>&lt;p>&#xD;
    A Statechart Diagram describes the state-based behavior of a block. It aggregates the information from both the&#xD;
    activity diagram (functional flow) and the sequence diagrams (interactions with the environment), and adds the&#xD;
    event-driven block behavior to the diagram. As the &quot;language&quot; of statecharts is formally defined, the correctness and&#xD;
    completeness of the resulting behavior can be verified/validated through model execution.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Statechart diagrams are finite state machines that are extended by the notation of Hierarchy and Concurrency.&#xD;
    Basically, a statechart diagram is comprised of a set of states joined by transitions and various connectors. An event&#xD;
    may trigger a transition from one state to another. Actions can be performed on transitions and on state entry/exit.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Use-Case&amp;nbsp;Block Statechart Diagram must reflect the functional flow captured in the use-case black-box activity&#xD;
    diagram as well as the associated use-case black-box sequence diagrams.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
</xmi:XMI>
