<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-0SWXoNlKS9CaD6RMw2FkCg" name="making_realization_decisions,_fdSzYGWuEd6Zd-lbA790BQ" guid="-0SWXoNlKS9CaD6RMw2FkCg" changeDate="2009-10-28T11:55:19.625-0700" version="7.5.0">
  <mainDescription>&lt;h4>&#xD;
    Sourcing approaches&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Each service eventually is realized by using a &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/service_component_54F50804.html&quot; guid=&quot;_Gcmp8GZaEd65K8S2sWS35w&quot;>Service Component&lt;/a>.&amp;nbsp; Each service component can be considered to be a container&#xD;
    of functionality that is needed to realize a service. It is composed of, or uses, both &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/functional_component_595EAFE6.html&quot; guid=&quot;_Ocmr0GWpEd6Zd-lbA790BQ&quot;>functional&lt;/a> and &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/concepts/technical_component_D89DA554.html&quot; guid=&quot;_RjrxgGWpEd6Zd-lbA790BQ&quot;>technical&lt;/a> components. It is important to decide how these service components will be&#xD;
    realized. It is not a simple &quot;buy or build&quot; decision. There are other considerations, such as these alternative&#xD;
    sourcing approaches:&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Build:&lt;/strong> For various reasons, the decision is to&amp;nbsp;develop the service in-house.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Buy:&lt;/strong> Purchase a service that&amp;nbsp;can be deployed and hosted internally.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Transform:&lt;/strong> Use a combination of techniques, including business rules extraction, to pull out a&#xD;
        segment of functionality to be used independently for the realization of the component's service.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Subscribe&lt;/strong>: Pay for time-limited services provided by a supplier. This is based on the availability&#xD;
        of a publish-subscribe model (in a message-oriented middleware context).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Integrate&lt;/strong>: Put legacy functionality in wrappers to achieve functionality. Integration is&#xD;
        invocation-based.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Outsource&lt;/strong>: Contract with other companies or providers. As Web Services and business-to-business&#xD;
        integration becomes more prevalent, this option will also be considered more widely.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    You need to make a sourcing decision&amp;nbsp;for each service component.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../practice.tech.soma.service_realization.base-ibm/guidances/examples/rent_a_car_realization_matrix_F1D87616.html&quot; guid=&quot;_a4LpcGWuEd6Zd-lbA790BQ&quot;>Example: Rent-a-Car Realization Matrix&lt;/a>&amp;nbsp;presents a simple tabular format that&#xD;
    can be used to document&amp;nbsp;sourcing decisions.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Development approaches to support sourcing decisions&amp;nbsp;&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Each of the previously mentioned approaches to sourcing has its own set of appropriate options for development. We will&#xD;
    touch briefly upon a few of these options.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;em>Transform&lt;/em> involves identifying, out of a larger mass of functionality, a nugget of reusable functionality that&#xD;
    is to be factored out and transformed into a component for use in the realization of a service component. The&#xD;
    assessment and capture of what is reusable generally involves use of automated support to perform code dependency&#xD;
    analyses, code extraction, and refactoring.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For &lt;em>Build&lt;/em>,&amp;nbsp;service component development&amp;nbsp;needs to&amp;nbsp;conform to best practices for component&#xD;
    design and construction. The IBM&amp;reg; Practice Library's practice on Component-Based Software Architecture&amp;nbsp;provides&#xD;
    useful guidance on component-based design. Component development&amp;nbsp;can be accelerated by using, for example,&#xD;
    Pattern-Based Engineering (PBE) approaches [&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../practice.tech.soma.service_realization.base-ibm/guidances/supportingmaterials/references.sr_FFA6D3D9.html&quot; guid=&quot;__3WMMJJWEd6z1IoNAP0Lvw&quot;>GRK09&lt;/a>] or more conventional model-driven development (MDD) techniques (see IBM&amp;reg; &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/whitepapers/building_soa_solutions_redbook_BB469CB2.html&quot; guid=&quot;_e3mR4FIREd6lNtylJFsPIg&quot;>Redbook&amp;reg;: Building SOA Solutions Using the Rational SDP&lt;/a>), whereby abstractions (such&#xD;
    as design models) are automatically translated into implementation artifacts. Several service component patterns, which&#xD;
    are amenable to automation using either PBE or MDD, are illustrated in &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/guidelines/service_component_patterns_24F299DA.html&quot; guid=&quot;_iQvsEGWmEd6Zd-lbA790BQ&quot;>Guideline: Service Component Patterns&lt;/a>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;em>Integrate&lt;/em> involves several service-enablement techniques and technologies that are discussed in the next&#xD;
    section of this guideline.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Integrating existing assets&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Several routes are available to realize&amp;nbsp;new services with existing functionality:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Wrap existing function as a service&lt;/b>.&amp;nbsp;Leave the function as-is, but use tools or middleware to expose&#xD;
        the existing function as a service. For example, capabilities exist to expose legacy CICS transactions as &lt;a href=&quot;http://en.wikipedia.org/wiki/SOAP&quot; target=&quot;_blank&quot;>SOAP&lt;/a> Web services.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Wrap and replace existing function with a service&lt;/b>.&amp;nbsp;Wrap a function as described, but&amp;nbsp;use the&#xD;
        resulting service specification to redevelop the service at a later date, thereby replacing the original service&#xD;
        and having clients redirected to the new implementation.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Use an adapter more amenable to service invocation&lt;/b>. In some cases, it is not possible to wrap a function and&#xD;
        expose it as a service. It might be possible to wrap the function in something more able to integrate, such as a&#xD;
        message queuing interface or the &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_EE_Connector_Architecture&quot; target=&quot;_blank&quot;>Java&amp;trade; Connector architecture&lt;/a> (JCA). This allows new services to access the function in-place.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Integrate the function into the service&lt;/b>.&amp;nbsp;In some cases, it is possible for the new service to access&#xD;
        the legacy function in-place, simply by using the function as a logical component within the implementation of the&#xD;
        service. This is discussed further in &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.tech.common.extend_supp_soa-ibm/guidances/supportingmaterials/pattern_07_service_enable_non_service_oriented_legacy_4DD68D5.html&quot; guid=&quot;_wgdUYH8TEd6EC8v3b_fCaQ&quot;>Pattern 07: Service-enable Non-service-oriented Legacy&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    These alternatives are demonstrated in this figure:&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;left&quot;>&#xD;
    &lt;img height=&quot;151&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/soa_svce_identification-04.gif&quot;     width=&quot;397&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The third and fourth options provide the most flexibility, because they use the existing function but do not continue&#xD;
    to expose the function as-is to clients.&amp;nbsp;The first and second options might introduce issues with the wrapping of&#xD;
    existing functions as services, because the performance of Web-service protocols and mismatches between native data&#xD;
    formats and XML might introduce performance concerns.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Existing software assets and their dependencies and interfaces will have to be analyzed to determine if changes are&#xD;
    required to support the business functionality. For example, in order to create a Web services interface for a legacy&#xD;
    implementation of a business function, analysis might involve&amp;nbsp;examining the composition and flow of online&#xD;
    transactions or batch jobs, or else persistent data stores that help perform that function.&lt;span     style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>The current design of these existing applications might have to change to&#xD;
    support the functionality. There is also a need to identify any potential barriers to creating a Web services interface&#xD;
    with the desired quality of service. For example, a monolithic batch implementation of a business function might&#xD;
    require sub-second response time when invoked as a service&lt;br />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
