<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-CuJuxeRakTnEqBePzXKaNA" name="new_supporting_material,_V9_yAHrkEd6bdI3iWuE3ew" guid="-CuJuxeRakTnEqBePzXKaNA" authors="Denise Cook" changeDate="2011-06-30T11:06:32.578-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Purpose&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Release burndown shows the estimated functionality remaining to complete the current release. It provides answers to&#xD;
    the following questions:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        When can a release be completed based on the team's previous progress?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        What progress was made in previous iterations?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Is the team's velocity sufficient to complete the release on time?&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The Release Burndown chart provides a broad view of a release's progress. It is updated once each iteration, and&#xD;
    indicates if the team is creating functionality at a reasonable pace. It can also expose projects whose scope is out of&#xD;
    control, negatively impacting burndown. Based on the trend view they see in this chart, the team can take action to&#xD;
    better control scope, or can adjust resources, budget, timelines, quality levels or commitments.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Unlike &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.mgmt.common.extend_metrics-ibm/guidances/supportingmaterials/iteration_burndown_A8E6E503.html&quot;&#xD;
    guid=&quot;_wEVzIHrAEd6bdI3iWuE3ew&quot;>Iteration Burndown&lt;/a>, which tracks remaining effort hours, Release Burndown tracks&#xD;
    functionality in order to determine whether the team is delivering working software in each iteration. The resulting&#xD;
    Release Burndown chart helps determine how much functionality the team is creating compared to how much they promised&#xD;
    to create.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    By tracking this metric, the team can also prove they are adopting iterative development best practices.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Definition&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Remaining functionality is calculated by:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Identifying a work item type as representing top-level functionality&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Creating a complexity estimate for each top-level functionality work item&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Totaling the remaining complexity for work items that are still open&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    &lt;br />&#xD;
    Top level work items are work items that represent significant units of scope. The most typical top level work items&#xD;
    are use cases, features, user stories, stakeholder requests or defects. They have a complexity attribute, but not an&#xD;
    effort hours estimate. Thus, these top level work items represent functionality.&lt;br />&#xD;
    &lt;br />&#xD;
    Complexity is an attribute of each functionality work item and is described in terms such as use case points, feature&#xD;
    points, user story points, stakeholder request points, or High-Med-Low complexity. The higher the &quot;points&quot; the more&#xD;
    functionality each work item is worth.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In a release burndown chart, the Y axis shows the remaining functionality for the release, and the X axis shows all the&#xD;
    iterations planned for the project.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Analysis&#xD;
&lt;/h3>&#xD;
&lt;h4>&#xD;
    Using Release Burndown to monitor project execution&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Release Burndown is used as a project execution metric to help a team monitor and steer their project performance. It&#xD;
    is an indicator of overall progress to middle management (project manager and product owner) and development executive&#xD;
    audiences. Middle management can use this metric to monitor how the project is progressing against plan, and predict&#xD;
    whether the team will meet release commitments. Release Burndown can be used to re-plan the release when the project is&#xD;
    behind schedule, or to help plan resources needed for the release.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Expected trend&lt;/strong> - The trend line should slope downward as iterations are completed indicating that&#xD;
    remaining functionality is decreasing. However, the following patterns might occur:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Rising slope -&lt;/strong> This trend can indicate that the project is out of control, with poor product&#xD;
    management. If a team sees an ongoing rising slope, then they need to focus on the best practices of Inception and&#xD;
    Elaboration in order to regain control. Consensus may not have been reached regarding the objectives for the project,&#xD;
    and requirements may not have been sufficiently detailed to understand architectural risk or to properly plan.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Flat line -&lt;/strong> This trend could indicate that the team has not embraced iterative development best&#xD;
    practices. It could be that the team is not delivering working software. Or, the team is delivering working software&#xD;
    but new functionality is added to the release equal to the rate that work is completed. In some cases, the team has to&#xD;
    focus too much of their time on defects. Measures should be taken to increase quality when this occurs.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Perfect downward slope -&lt;/strong> Unlike a perfect slope in Iteration Burndown, which could indicate a team&#xD;
    that is inaccurately charting their results, a perfect downward slope in Release Burndown is likely to be accurate.&#xD;
    Validate that Customer Satisfaction and Quality levels are high, and that Change Request Aging is low to confirm the&#xD;
    trend.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Fast &lt;em>decline&lt;/em> at the end of the release -&lt;/strong> This is a pattern that should be monitored closely.&#xD;
    When the trend line is clearly not heading to zero for the release, but the slope quickly drops to zero at the very&#xD;
    end, a number of factors could be involved. Perhaps through heroic efforts the team increased their productivity to&#xD;
    meet their commitments. But, it could be the case that important features were left out of the release, or requirements&#xD;
    for shipment changed. This is acceptable when stakeholders decide that scope is less important than the timeline.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Fast &lt;em>incline&lt;/em> at the end of the release -&lt;/strong> This trend is unlikely to occur unless (either&#xD;
    intentionally or by accident) the metric was not tracked correctly in each iteration. Or, it could be that product&#xD;
    management is out of control, and last minute requirements were added to the release. If this is the case, ask the&#xD;
    customer if scope or timeline is the priority for the release.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The release burndown chart that follows is a simple example of tracking the release burndown rate. Based on the trend&#xD;
    indicated in this chart, the project looks like it will finish before I8. Assuming that I8 is the last iteration for&#xD;
    this release, the project is well positioned to meet its release commitments.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Notice that this graph shows &quot;instantaneous velocity,&quot; the velocity just by looking at the last two iterations. Also of&#xD;
    value is &quot;average velocity&quot; which would be the average velocity considering all past iterations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;Release Burndown&quot; src=&quot;./resources/release_burndown.gif&quot; width=&quot;510&quot; height=&quot;338&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the following release burndown example, scope changes are plotted as well as burndown. Note that the blue line&#xD;
    represents remaining work whereas the gray line represents planned work.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;Release Burndown With Scope&quot; src=&quot;./resources/rel_burndown_with_scope.gif&quot; width=&quot;571&quot; height=&quot;330&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The gray line indicates that this team did not estimate the complexity of all of their top-level items up front; or,&#xD;
    they allocated more and more to the release as time went on. Their scope has increased from about 4 units to nearly 80,&#xD;
    or 2000%. The gray line shows that now their scope is stabilizing. The blue burndown line shows that real burndown is&#xD;
    starting to occur.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Using Release Burndown to monitor capability improvement&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Release Burndown is also used as a capability improvement metric. It helps a team and middle management (project&#xD;
    manager, product owner) monitor improvements made during the project lifecycle in adopting the Release Planning&#xD;
    practice. If teams are adopting these practices by performing two-level project planning and updating plans to reflect&#xD;
    changing business priorities and needs it will be reflected in their Release Burndown trends. Operational Executives&#xD;
    can also use this metric to monitor systematic improvement in reducing time to value across the organization by&#xD;
    adopting Release Planning.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Expected trend -&lt;/strong> If teams are successfully adopting Release Planning, Release Burndown trends will&#xD;
    show that functionality slopes downward as iterations are completed in a steady decline to zero at the end of the&#xD;
    release.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Rising slope&lt;/strong> - When teams routinely display a trend line with a rising slope, it indicates that there&#xD;
    is a problem with Release Planning adoption. Teams may not be collaborating effectively with stakeholders to update&#xD;
    plans based on actual progress in each iteration. Or the team and stakeholders may not share a common understanding of&#xD;
    project objectives.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Frequency and reporting&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Data is collected at the end of each iteration. The resulting Release Burndown chart is shown by a team lead or project&#xD;
    manager for review by the team and stakeholders at the end of each iteration to help identify trends. Release Burndown&#xD;
    for multiple projects can be rolled up in order to monitor improvement across the organization.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Collection and reporting tools&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Release Burndown is captured in IBM&amp;reg; Rational&amp;reg; Team Concert&amp;reg;. IBM&amp;reg; Rational&amp;reg; Insight&amp;reg; reports on this metric.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Assumptions and prerequisites&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The product owner sorts the product backlog into priority order and shuffles the product backlog items as&#xD;
        priorities change from iteration to iteration.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Release planning is performed and the release has been defined.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Iterations have been scheduled and features to deliver during each iteration have been documented as work items.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        User stories or use cases have been elaborated with relative points assigned to each&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The team is delivering working software in each iteration.&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Pitfalls, advice, and countermeasures&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Although planning and executing at the iteration level is very important, teams should not lose track of where they&#xD;
        are in context of the overall release plan. In their desire to make sure iterations are successfully delivered,&#xD;
        some teams may lose sight of their progress against the release goals. Additional scope may continue to creep into&#xD;
        the plans as the team progresses forward. As a result, each individual iteration appears relatively successful to&#xD;
        the team, but the higher level goal of delivering the overall release is sometimes forgotten and changes in the&#xD;
        release plan are not communicated to the organization.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        In some cases, a team might get very good at capturing and reporting burndown accurately, but may not know how to&#xD;
        take action to improve based on what they see in their trend line. When this happens, deeper analysis is needed to&#xD;
        find the underlying cause of the trend, so that corrective actions can be taken. It might be necessary to abandon&#xD;
        the metric if the team is unable to use the measurements to incrementally improve.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If the team discovers a trend of addressing low risk items first, leaving higher risk items to the end, a Backlog&#xD;
        Complexity metric could be tracked as a countermeasure. Backlog Complexity should be dropping, but will remain high&#xD;
        if the team has a habit of addressing high risk items late in each release.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        For additional analysis, combine Release Burndown with Iteration Velocity in order to estimate potential finished&#xD;
        date.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;br />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
