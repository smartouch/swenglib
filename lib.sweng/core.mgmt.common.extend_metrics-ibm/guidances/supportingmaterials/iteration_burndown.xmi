<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-my-zjfGml-gnzlQkSfoWmQ" name="new_supporting_material,_wEVzIHrAEd6bdI3iWuE3ew" guid="-my-zjfGml-gnzlQkSfoWmQ" authors="Denise Cook" changeDate="2010-09-27T13:50:28.671-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Purpose&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Iteration Burndown helps&amp;nbsp;a team understand the status of an iteration by showing how much work is left to&#xD;
    do.&amp;nbsp;It&amp;nbsp;enables the team to adjust scope or resources to finish the iteration successfully.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An Iteration Burndown chart is updated each day with the estimated work remaining in the current iteration. Ideally,&#xD;
    the amount of remaining work decreases as development progresses until it reaches zero at the end of the iteration.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Unlike release burndown and product burndown which both track functionality, iteration burndown tracks remaining effort&#xD;
    hours in order to maximize the productivity of the team and predictability of how much work they can perform.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Definition&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Remaining Estimated Effort Hours is calculated by the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Allocating work items in the work items list to the current iteration&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Creating an effort hours estimate for each allocated work item&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Totaling the remaining effort hours estimated for work items that are still open&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Note that you may be working with a product backlog of functional requirements, work items of both functionality and&#xD;
    project tasks, or even with multiple work item lists, each&amp;nbsp;dealing with different complexity factors (such as&#xD;
    distributed development or compliance issues).&amp;nbsp;&amp;nbsp;Regardless of the types of work items in the backlog, the&#xD;
    recommendation is to graph effort hours remaining over time.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Iteration Burndown is captured in IBM&amp;reg; Rational&amp;reg; Team Concert&amp;reg; and IBM&amp;reg; Rational&amp;reg; Insight&amp;reg;.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Analysis&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Use a line chart to represent the Iteration Burndown.&amp;nbsp; The Y axis shows the remaining estimated effort hours for&#xD;
    the iteration. The X axis shows all of the days&amp;nbsp;(past and future) in the iteration. The trend line should slope&#xD;
    downward as time progresses. However, the following patterns might occur:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Rising Slope:&lt;/strong> This pattern happens when there&amp;nbsp;are additional work items&amp;nbsp;(such as tasks&#xD;
        and&amp;nbsp;defects) identified&amp;nbsp;after iteration planning.&amp;nbsp;&amp;nbsp;This is not always a bad thing. It is the&#xD;
        nature of software development;&amp;nbsp;but,&amp;nbsp;it is important&amp;nbsp;to only consider adding&amp;nbsp;work&#xD;
        items&amp;nbsp;that&amp;nbsp;are related to the&amp;nbsp;iteration goals. The team also&amp;nbsp;needs to focus on prioritizing&#xD;
        the&amp;nbsp;work items&amp;nbsp;and making sure that&amp;nbsp;higher priority&amp;nbsp;work items are completed&amp;nbsp;first. Teams&#xD;
        might also see a rising slope when their estimates increase as the iteration progresses.&amp;nbsp;&amp;nbsp;This is another&#xD;
        common pattern in software development, as teams are rarely perfect in their estimating.&amp;nbsp;&amp;nbsp;However,&#xD;
        this&amp;nbsp;pattern should generally be avoided,&amp;nbsp;especially at the end of iteration. The team may need to&#xD;
        perform some re-scoping to get back on track if their Iteration Burndown chart displays a rising trend line.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Flat-line:&lt;/strong> This pattern&amp;nbsp;can&amp;nbsp;occur when&amp;nbsp;there are defects or rework&amp;nbsp;work&#xD;
        items&amp;nbsp;that prevent the team&amp;nbsp;from moving forward. This could indicate the team needs to place more focus&#xD;
        on quality.&amp;nbsp; This pattern is also seen when the rate that the team completed work items is equal to the rate&#xD;
        that &amp;nbsp;new work items were added to the work items list.&amp;nbsp;&amp;nbsp;If this trend continues, the team will not&#xD;
        reach its iteration commitments without rescoping.&amp;nbsp;&amp;nbsp;In extreme cases, the team might not be performing&#xD;
        any work at all, resulting in a flat trend line. Immediate action must be taken to determine the reason that&#xD;
        productivity has stalled.&amp;nbsp; Another cause of a flat trend line is a reduction in resources&amp;nbsp;or team&#xD;
        members.&amp;nbsp; This scenario&amp;nbsp;requires&amp;nbsp;rescoping or backfilling the missing resources. Yet another cause&#xD;
        of this trend line is work items that&amp;nbsp;are too large in scope. The team may need to create smaller work items&#xD;
        so that the burndown chart reflects that work is being completed.&amp;nbsp;&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Perfect&amp;nbsp;Downward Slope:&lt;/strong> This trend represents the perfect project with a trend line sloping&#xD;
        in an even descent toward completion. Most projects experience some changes in their rate of progress along the way&#xD;
        due to normally occurring factors. A perfect trend could indicate that the team is working in a very controlled,&#xD;
        non-trusting environment where they feel uncomfortable communicating their true status.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Dramatic Upward Slope at the End of the Iteration (Hockey Stick):&lt;/strong> This trend typically indicates a&#xD;
        surprise at the end of the iteration.&amp;nbsp; The team might have pushed high risk items to the end of the iteration,&#xD;
        waiting too long to seek clarification.&amp;nbsp;Or, the scope of the iteration changed late in the iteration. A sudden&#xD;
        increase in the amount of outstanding work very late will make it difficult for the team to meet its commitments&#xD;
        for the iteration.&amp;nbsp; This trend should be raised and resolved as part of the retrospective.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The&amp;nbsp;following&amp;nbsp;Iteration Burndown chart example displays scope changes and burndown. The graph plots two lines&#xD;
    in this example of an in- progress&amp;nbsp;iteration.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xD;
    &lt;img alt=&quot;Iteration Burndown With Scope&quot; src=&quot;./resources/iteration_burndown_with_scope.gif&quot; width=&quot;560&quot;     height=&quot;327&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The bold blue line shows the amount of work left by plotting remaining estimated effort hours from open work items&#xD;
    only.&amp;nbsp; Notice that this line can go up as more work items are created for the current iteration or if estimates&#xD;
    are increased.&amp;nbsp; When this line drops it can be either because work items were closed or removed from the&#xD;
    iteration.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The gray line shows the total work for the iteration by plotting effort for open plus closed work items.&amp;nbsp; This&#xD;
    line does not slope downward as work is completed unless the remaining Estimated Effort Hours goes down.&amp;nbsp; This&#xD;
    happens&amp;nbsp;only if estimates are reduced or work items are removed from scope.&amp;nbsp; In a perfect plan, the gray line&#xD;
    would be perfectly horizontal , but that is extremely rare, especially in early iterations. Notice that this happens&#xD;
    near the end of the graph.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The variance in the plan can be also measured&amp;nbsp;in this graph. According to the gray line, this team originally&#xD;
    planned for roughly 2000 hours of work, but are currently planning for about 3200 hours, or 60% more than originally&#xD;
    planned at this point in the iteration. If this were the end of the iteration, the team would actually have completed&#xD;
    2400 hours of work (3200 gray line minus 800 dark blue line = 2400 hours closed) That would be 20% more than they had&#xD;
    originally planned.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Frequency and reporting&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The team monitors this metric daily to understand how much more work is left to complete in the iteration.&amp;nbsp; At the&#xD;
    end of the iteration, this report is used to identify trends.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Collection and reporting tools&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    IBM&amp;reg; Rational&amp;reg; Team Concert&amp;reg; collects data for this metric.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Measurement Pitfalls&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Following are some things to look out for when tracking&amp;nbsp;Iteration Burndown:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        In non-trusting, highly controlled environments, teams might fear they will be judged and punished for&amp;nbsp;less&#xD;
        that stellar results. This can lead to inaccurate burndown tracking to avoid negative repercussions.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        In theory, a team could&amp;nbsp;simply adjust the end date of the iteration if their burndown trend indicates they&#xD;
        will not meet their iteration commitments.&amp;nbsp; Instead, scope should be allocated to subsequent iterations, and&#xD;
        the overall project plan adjusted for scope, resources, end date, or quality based on those reallocations.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        In some cases, a team might get very good at capturing and reporting burndown accurately, but may not know how to&#xD;
        take action to improve based on what they see in their trend line. When this happens, deeper analysis is needed to&#xD;
        find the underlying cause of the trend, so that corrective actions can be taken.&amp;nbsp; It might be necessary to&#xD;
        abandon the metric if the team is unable to use the measurements to incrementally improve their productivity.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&lt;br />&#xD;
&lt;h3>&#xD;
    Countermeasures For This Metric&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        When a team has a perfect or near perfect downward sloping trend line,&amp;nbsp;they may have refused&amp;nbsp;to add any&#xD;
        new requirements to an iteration in order to preserve their&amp;nbsp;positive burndown results.&amp;nbsp; If this is&#xD;
        happening, a subjective measurement for Customer Satisfaction can be added to the iteration.&amp;nbsp; When&#xD;
        stakeholders do not see their requests addressed, their satisfaction with what was delivered for the iteration will&#xD;
        be low. A Change Request Aging metric can also be used in these situations. This metric will be higher if teams are&#xD;
        routinely refusing to add any new requirements&amp;nbsp;to the iteration.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If the team discovers a trend of addressing low risk items first, leaving higher risk items to the end of the&#xD;
        iteration, a Backlog Complexity metric could be tracked as a countermeasure.&amp;nbsp; Backlog Complexity should be&#xD;
        dropping in each iteration, but will remain high if the team has a habit of addressing high risk items late in each&#xD;
        iteration.&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
