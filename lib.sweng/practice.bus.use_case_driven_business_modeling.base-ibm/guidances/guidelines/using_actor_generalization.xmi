<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-FCsVowy_asRcvqrdSq-afw" name="using_actor_generalization,_yeOwwEk8Edyi3_jfs__bIQ" guid="-FCsVowy_asRcvqrdSq-afw" changeDate="2009-09-28T10:14:49.825-0700" version="1.0.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a>Explanation&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Several actors can play the same role in a particular use case. Thus, a Teller and an Accountant, both of whom check&#xD;
    the balance of an account, are seen as the same external entity by the use case that does the checking. The shared role&#xD;
    is modeled as an actor, Balance Supervisor, inherited by the two original actors. This relationship is shown with&#xD;
    actor-generalizations.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;./resources/md_actg2.gif&quot; width=&quot;274&quot; height=&quot;236&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The actors Teller and Accountant inherit all the properties of a Balance Supervisor. Thus, both these actors can act as&#xD;
    Balance Supervisors.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    A user or external system can play several roles in relation to the system under development. This&amp;nbsp;means that the&#xD;
    user or external system&amp;nbsp;might correspond to several actors. To make the model clearer, you can represent the user&#xD;
    or external system&amp;nbsp;by one actor with child actors who share all the attributes of the parent. In this case the new&#xD;
    generalized role is now associated with a use case instead of all the specialized actors. This increases the&#xD;
    readability of the use case diagram and decreases the risk of &quot;Actor Spaghetti&quot; where too many communication lines make&#xD;
    the overall diagram hard to grasp.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Pitfalls&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Use actor generalization correctly by assuring that child actors have an &quot;is-a&quot; relationship to the parent. Just&#xD;
    because two different actors can initiate the same use case doesn't mean that they're both the same type of actor. A&#xD;
    common mistake is to generalize interactions that different actors have into a parent actor. Use actor generalization&#xD;
    to represent essential qualities of the child actors, not groups of interactions.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For instance, a Bank Customer actor and a Maintenance Tech actor can both initiate the Balance Inquiry use case. So&#xD;
    it&amp;nbsp;can be tempting to generalize these two roles and create a parent actor that initiates the use case. However,&#xD;
    these two actors have different goals and relationships with the system. A Maintenance Tech is only doing a balance&#xD;
    inquiry as a means of testing the system. Representing them as having some identical essential qualities would be&#xD;
    misleading.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
