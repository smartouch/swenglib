<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-xDnt7tzCsbaVkgSv7fBlnQ" name="defining_the_right_level_of_granularity_in_use_cases,_F5RdwIWaEd2VjsFXvLgOXg" guid="-xDnt7tzCsbaVkgSv7fBlnQ" changeDate="2011-07-14T14:33:43.310-0700" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    Refer to the Mitigation column for actions you can take to raise the level of granularity and head off the problems&#xD;
    associated with Functional Decomposition.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br />&#xD;
&lt;table title=&quot;&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; width=&quot;85%&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                &lt;strong>Characteristic&lt;/strong>&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                &lt;strong>Description&lt;/strong>&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                &lt;strong>Mitigation&lt;/strong>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Separation of CRUD functions&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Each element of CRUD (CReate-Update-Delete)&amp;nbsp;is dealt with in a separate use case.&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Make CRUD functions alternate flows in one use case.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Actors are not generalized&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Use cases are tied to specific concrete users, not abstract actors.&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Generalize actors that inherit the same system functionality&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Use cases are functions&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                No use case's basic flow completes a major interaction or transaction, but instead describes functions.&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Re-write the basic flow to complete an end-to-end scenario.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Technology specific&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Use cases are locked to specific architectural or system components.&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Re-write the use case, treating the technology as a &quot;black box&quot;, crossing sub-system or component&#xD;
                boundaries if necessary to complete the flow.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                User interface design&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Use cases are tied to specific screens or user functions and contain specific UI design statements.&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Remove references to specific screens, controls, or other UI paradigms.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Few alternate flows&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Use cases usually contain 0-2 alternate flows, frequently data specific.&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Once the basic flow is complete, identify possible deviations from the main flow and name them. These will&#xD;
                be your alternate flows.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Piecemeal scenarios&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Scenarios almost always have to&amp;nbsp;call several use cases to complete a useful example.&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Write out an end-to-end user scenario, then create a single use case by combining the smaller use cases you&#xD;
                need to complete it.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Low level test case derivation&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Use cases are useful for deriving unit test cases.&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Remove low level details.&amp;nbsp; Focus the use case on required visible behavior.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&#xD;
&lt;p>&#xD;
    &lt;br />&#xD;
    &lt;strong>References&lt;/strong>&#xD;
&lt;/p>&lt;br />&#xD;
&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
href=&quot;./../../../core.tech.common.extend-ibm/guidances/supportingmaterials/tech_references_17D34A60.html#CON99&quot;&#xD;
guid=&quot;_OKj94D8iEd2AxfTL63EayA&quot;>[CON99]&lt;/a>, &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
href=&quot;./../../../core.tech.common.extend-ibm/guidances/supportingmaterials/tech_references_17D34A60.html#BIT02&quot;&#xD;
guid=&quot;_OKj94D8iEd2AxfTL63EayA&quot;>[BIT02]&lt;/a>, &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
href=&quot;./../../../core.tech.common.extend-ibm/guidances/supportingmaterials/tech_references_17D34A60.html#AMB04&quot;&#xD;
guid=&quot;_OKj94D8iEd2AxfTL63EayA&quot;>[AMB04]&lt;/a></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
