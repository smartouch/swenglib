<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-a86kYMUQf1ayQIpz-1CG1Q" name="business_entity,1.0295540980844903E-304" guid="-a86kYMUQf1ayQIpz-1CG1Q" changeDate="2009-09-28T09:53:53.581-0700" version="7.1.0">
  <copyrightStatement href="uma://_4eYbIEcWEd6GBq2DuQ5crg#_8eFK4EcWEd6GBq2DuQ5crg"/>
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_business_entity__guidelines_for&quot; name=&quot;XE_business_entity__guidelines_for&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Explanation&quot; name=&quot;Explanation&quot;>Explanation&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Business entities represent &quot;things&quot; handled or used by the business workers as they&amp;nbsp;run a business use case. A&#xD;
    business entity often represents something of value to several business use cases or use-case instances, so the&#xD;
    business entity object is rather long-lived. In general, it is good if the business entity holds no information about&#xD;
    how and by whom it is used.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Typically, a business entity represents a document or an essential part of a product. Sometimes it represents something&#xD;
    less tangible, like important knowledge about a market or a customer. Examples of business entities at the restaurant&#xD;
    are Menu and Beverage; at the airport, Ticket and Boarding Pass are important business entities.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In business modeling, we usually think of Business Entities as significant (and persistent) pieces of&#xD;
    &lt;em>information,&lt;/em> indeed that is the way we&amp;nbsp;portray them in the artifact description. However, in general the&#xD;
    &quot;things&quot; handled or used by business workers&amp;nbsp;might be physical objects: if a business worker is realized by a&#xD;
    complex physical system which does have material flows across its boundary, then it&amp;nbsp;can be useful to have the&#xD;
    Business Entities represent the &lt;em>information analogs&lt;/em> for these physical things - they are the way the business&#xD;
    worker communicates its actions to the rest of the business. You can then deal with the physical considerations for the&#xD;
    business worker separately from the business modeling context - when you deal with the business worker as a system in&#xD;
    its own right.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You need to model as Business Entities only those phenomena to which other classes in the business domain model must&#xD;
    refer. Other &quot;things&quot;&amp;nbsp;might be modeled as attributes of the relevant classes or just described textually in these&#xD;
    classes.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Attributes&quot; name=&quot;Attributes&quot;>Attributes&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    An &lt;b>attribute&lt;/b> of a class represents a piece of information about an object of that class that is kept with the&#xD;
    object. An attribute has an attribute type. Each attribute and attribute type, respectively, has a name.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An object normally holds different pieces of information that describe some of its characteristics. Such pieces of&#xD;
    information can either be described implicitly in the textual description of the object's class or modeled explicitly&#xD;
    as an attribute of the class.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An attribute is of a certain type. An attribute has a name, preferably a noun that describes the attribute's role in&#xD;
    relation to the class. An attribute type can be more or less primitive, starting from a simple number or string.&#xD;
    Different classes can have attributes with identical structures. Those attributes&amp;nbsp;must share a description; that&#xD;
    is, they&amp;nbsp;must share attribute type.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Note:&lt;/b> You&amp;nbsp;need to&amp;nbsp;model attributes only to make a class more understandable!&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;font size=&quot;+0&quot;>&lt;b>&lt;a id=&quot;Using Attributes or Entities&quot; name=&quot;Using Attributes or Entities&quot;>Using Attributes or&#xD;
    Entities&lt;/a>&lt;/b>&lt;/font>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Now and then it is hard to know if you&amp;nbsp;must describe a concept as an attribute of a class or as a separate&#xD;
    business entity class. The general rule is as follows: Model a phenomenon as an attribute if no more than one object&#xD;
    needs to have direct access to it or if the only natural way to access it is through the object. Otherwise, model the&#xD;
    concept separately, in a class of its own.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;./resources/bent1.gif&quot; width=&quot;111&quot; height=&quot;71&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    In the airport check-in use case, tickets are important. Each ticket has a passenger name and a flight. Here, the&#xD;
    attributes Name and Flight are identified. The latter is more complex, consisting of airline, destination, time of&#xD;
    departure, and time of arrival.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;./resources/bent2.gif&quot; width=&quot;325&quot; height=&quot;60&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    All passengers traveling on the same flight share that flight. The airline is the same for several flights. A better&#xD;
    alternative is therefore to model flight and airline as classes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Once you have decided if a concept is so important to the use case that it must be modeled, what governs whether&#xD;
    it&amp;nbsp;needs to&amp;nbsp;be modeled as a separate class or merely as a class attribute is not its importance in real life.&#xD;
    Instead, what dictates how it is modeled is the business need for accessing it. This means that some concepts are&#xD;
    modeled differently for different businesses.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Consider an example: To the employees working in a traffic-planning use case at an airport, flights are central. The&#xD;
    time of departure, the airline, and the destination must be defined for each flight. In this case, you might use a&#xD;
    class, Flight, and give it the attributes time of departure, airline, and destination.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;./resources/bent3.gif&quot; width=&quot;108&quot; height=&quot;74&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Flights are essential to employees working in a traffic-planning business use case at an airport.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    On the other hand, the situation is different for the employees of a travel agency. Although they still need time of&#xD;
    departure, airline, and destination, they have additional needs. What is most important to a travel agency is finding a&#xD;
    flight with a specific destination, in which case it is appropriate to create a separate class for Destination. The&#xD;
    classes Flight and Destination must, of course, be aware of each other. A bi-directional association allows this.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;./resources/bent4.gif&quot; width=&quot;190&quot; height=&quot;62&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Flight departures and destinations are equally essential to employees working in a travel-agency use case.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Theoretically, everything can be modeled as a class. However, using attributes when appropriate reduces the number of&#xD;
    classes that must be maintained and makes the object model easier to understand.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Operations&quot; name=&quot;Operations&quot;>Operations&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    To perform a business worker's responsibilities, the person acting as the business worker uses one or several tools to&#xD;
    manipulate the business entities. You can define these tools either generally or explicitly, with the help of&#xD;
    operations and messages representing the tools used and the accesses made. An operation defines the tool with which a&#xD;
    business entity is manipulated. The access is initiated by a message. A tool that can be used to manipulate a business&#xD;
    entity object is represented as an &lt;b>operation&lt;/b> of the business entity class, with a &lt;b>name&lt;/b> and, optionally,&#xD;
    &lt;b>parameters&lt;/b>. The access of a business entity unit is shown as a &lt;b>message&lt;/b> being sent to the business entity&#xD;
    object.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For example, an operation &quot;associate baggage&quot; on the business entity &quot;ticket&quot; would involve attaching baggage labels to&#xD;
    the ticket. The parameters would include the baggage labels.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Each operation is defined by a name, which&amp;nbsp;needs to&amp;nbsp;tell its purpose, and, optionally, a number of&#xD;
    parameters. The parameters specify what an object of the class&amp;nbsp;must expect to receive from an object that is&#xD;
    requesting support or making an access, as well as what the object will provide when the operation has been performed.&#xD;
    As an example, you can give parameters that reflect when a business worker&amp;nbsp;must take a step in the worker&#xD;
    operation, or when that business worker&amp;nbsp;must access a certain business entity by initiating one of the business&#xD;
    entity's operations. Parameters can also represent more or less tangible things that are handed over.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Operations can be defined informally or in more detail, depending on the importance or required level of detail in a&#xD;
    use case. A &quot;more detailed&quot; description might describe a behavior sequence that tells which attributes and&#xD;
    relationships are dealt with during its performance, how objects of other classes are contacted, and how it is&#xD;
    terminated.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Characteristics of Good Business Entities&quot; name=&quot;Characteristics of Good Business Entities&quot;>Characteristics of a&#xD;
    Good Business Entity&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Its name and description are clear and understandable.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Business entity relationships do not depend on each other.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Each relationship is used in the workflow of at least one business use case.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        All &quot;things&quot; in the business, such as products, documents, contracts, and so on, are modeled as business entities.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It participates in at least one business use case.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It has an owner; that is, a business worker or business actor responsible for the business entity.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Business Events&quot; name=&quot;Business Events&quot;>Business Events&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Business events can be used to notify interested parties (including other business entities) of a change in state of&#xD;
    the business entity. The creation and destruction of a business entity&amp;nbsp;can be significant. If you have defined a&#xD;
    state machine, examine the states of the business entity. Each transition is a potential business event. Also inspect&#xD;
    the attributes and operations of the business entity. Significant operations that are used infrequently might have a&#xD;
    business event associated with them. Changes to important attributes&amp;nbsp;might trigger an event. Business process&#xD;
    patterns and business entity patterns&amp;nbsp;can also provide insight into useful business events. For example, if a&#xD;
    business entity must be approved before being used further, a &lt;i>&amp;lt;something&amp;gt; Approved&lt;/i> business event&amp;nbsp;can&#xD;
    be useful to notify other parties that the business event is ready for use.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
