<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-Z34sWxA8_ZQG22oNMrXMIQ" name="new_concept,_ituu8H33Ed2eJPu0NyCdUg" guid="-Z34sWxA8_ZQG22oNMrXMIQ" changeDate="2008-09-19T14:05:13.570-0700" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    Functionally decomposed use cases are the result of breaking up user tasks within the system into smaller steps,&#xD;
    operations or functions, and then documenting each as a separate use case.&amp;nbsp;These use cases end up being&#xD;
    &lt;u>function&lt;/u> focused, not &lt;u>user driven&lt;/u>.&amp;nbsp;&amp;nbsp;It is also common for decomposed use cases to include&#xD;
    system-specific data and user interface design (clicks, buttons, menus etc.). This places artificial constraints on the&#xD;
    designers and developers of the system and makes use cases brittle. Changes to specific data or UI designs that are&#xD;
    included in the use case often require a re-write.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Functionally decomposed use cases can make communication between stakeholders and developers more difficult because&#xD;
    each use case only describes part of a process or business scenario. It doesn't deliver any value on its own in terms&#xD;
    of the results users expect from the system.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A&amp;nbsp;developer looking at a decomposed use case is seeing only part of the business process picture and doesn't have&#xD;
    the complete context for the functionality they are building. The piece-part nature of decomposed use cases can also&#xD;
    hinder iteration planning by making it difficult to determine which combination of use cases covers the highest&#xD;
    priority functionality.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Test cases for unit testing can be easily derived from functionally decomposed use cases, however, functional&#xD;
    decomposition makes it harder to derive higher level test cases (system/integration or user acceptance test cases).&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
