<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-1bA1veojD86Qyp1a67DeMA" name="implement_the_solution,_FrWqUAqHEd281qfHUnTumw" guid="-1bA1veojD86Qyp1a67DeMA" changeDate="2010-09-15T12:56:21.998-0700" version="7.1.0">
  <keyConsiderations>&lt;p>&#xD;
    Implement incrementally. Take a small piece of the task to be performed, such as a new parameter or a small piece of a&#xD;
    method, and implement it. When all tests run successfully, move on to the next small piece of the task. This is a&#xD;
    low-risk approach that reduces the number of regression errors introduced into the code.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The [Project Work]&amp;nbsp;is implicitly used&amp;nbsp;in implementation tasks to manage which requirements or change requests&#xD;
    are being realized in the code.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The developer must be aware of and follow the code analysis guidelines while creating the implementation. This includes&#xD;
    programming guidelines and language specific guidelines. See &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../practice.tech.design_driven_implementation.base-ibm/workproducts/code_analysis_guidelines_BF97268F.html&quot; guid=&quot;_5IU1kKhEEdymmoKrEVbjiw&quot;>Artifact: Code Analysis Guidelines&lt;/a>.&lt;br />&#xD;
&lt;/p></keyConsiderations>
  <sections xmi:id="_6nr2kHuaEd2XrNsxqwbs6g" name="Understand the task or problem" guid="_6nr2kHuaEd2XrNsxqwbs6g">
    <sectionDescription>Be clear on the scope, as specified in work assignments, requirements, and change requests. An implementation task can be&#xD;
focused on achieving some specific functionality (such as implementing a scenario or fixing a defect) that involves&#xD;
implementing several design elements that contribute to that functionality. Alternatively, an implementation task can be&#xD;
focused on adding an incremental amount of functionality (such as a new parameter or an extension to a method)&amp;nbsp;to a&#xD;
particular design element such as a class or subsystem.</sectionDescription>
  </sections>
  <sections xmi:id="_ZIMLgHubEd2XrNsxqwbs6g" name="Prepare the development workspace" guid="_ZIMLgHubEd2XrNsxqwbs6g">
    <sectionDescription>Ensure the development workspace is correctly configured so the right element versions are available. This includes the&#xD;
elements to be updated and any dependent or supporting elements required for compilation and unit testing. Be aware of the&#xD;
project's configuration and change management procedures and how code is delivered for integration. See &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../practice.tech.design_driven_implementation.base-ibm/guidances/concepts/development_and_integration_workspaces_93767CFF.html&quot; guid=&quot;_8gRZoAzdEd2GhOWHiMelAw&quot;>Concept: Development and Integration Workspaces&lt;/a>&amp;nbsp;for more information.</sectionDescription>
  </sections>
  <sections xmi:id="_BWzkgHucEd2XrNsxqwbs6g" name="Identify opportunities for reuse" guid="_BWzkgHucEd2XrNsxqwbs6g">
    <sectionDescription>Identify existing code or other implementation elements that can be reused in the portion of the implementation that you&#xD;
are creating or changing. A comprehensive understanding of the overall design is helpful, because it is best to leverage&#xD;
reuse opportunities when you have a thorough understanding of the proposed solution.</sectionDescription>
  </sections>
  <sections xmi:id="_FrWqUwqHEd281qfHUnTumw" name="Transform design to implementation" guid="_FrWqUwqHEd281qfHUnTumw">
    <sectionDescription>&lt;a id=&quot;transform&quot; name=&quot;transform&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    If you are using sophisticated modeling tools, you should be able to generate a portion of the required source code&#xD;
    from the model. Programming is&amp;nbsp;commonly required to complete the implementation after the design model has been&#xD;
    transformed into code.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Even without tools, there is&amp;nbsp;typically some amount of code that can be created by rote by examining the design and&#xD;
    developer tests&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    See &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../core.tech.common.extend_supp/guidances/guidelines/mapping_design_to_code_FA4B08DA.html&quot; guid=&quot;_mlKb8JyJEdy9brKHb521mQ&quot;>Guideline: Mapping from Design to Code&lt;/a>&amp;nbsp;for information on how to create the&#xD;
    implementation from the design.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_0cVAMHudEd2XrNsxqwbs6g" name="Write source code" guid="_0cVAMHudEd2XrNsxqwbs6g">
    <sectionDescription>&lt;p>&#xD;
    Write the source code to make the implementation conform to the design and expected behavior. You should strive to&#xD;
    reuse and/or generate code wherever possible, but you will still need to do some programming. To do so, consider the&#xD;
    following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Examine the technical requirements. Because some requirement information does not translate directly into your&#xD;
        design you should examine the requirement(s) to ensure that they are fully realized in the implementation.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Refactor your code to improve its design. Refactoring is a technique where you improve the quality of your code via&#xD;
        small, safe changes.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Tune the results of the existing implementation by improving performance, the user interface, security, and other&#xD;
        nonfunctional areas.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Add missing details, such as completing the logic of operations or adding supporting classes and data structures&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Handle boundary conditions.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Deal with unusual circumstances or error states.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Restrict behavior (preventing users or client code from executing illegal flows, scenarios, or combinations of&#xD;
        options).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Add critical sections for multi-threaded or re-entrant code.&#xD;
    &lt;/li>&#xD;
&lt;/ul></sectionDescription>
  </sections>
  <sections xmi:id="_7W_FMHudEd2XrNsxqwbs6g" name="Test new code" guid="_7W_FMHudEd2XrNsxqwbs6g">
    <sectionDescription>&lt;p>&#xD;
    Write small tests to verify the new code. This white-box testing is performed while implementing the code and prior to&#xD;
    unit testing (black-box). Define the expected results and&amp;nbsp;write the test logic. Put the system in a known state,&#xD;
    run the tests, and check the test log to verify you've received the expected results. Fix the code until the test runs&#xD;
    successfully.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An automated testing environment or regression testing tool is the best way to quickly create and run these tests. In&#xD;
    addition, these tests can be re-used during unit testing.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    See&amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../practice.tech.design_driven_implementation.base-ibm/guidances/concepts/developer_testing.ddi_ABB4E66A.html&quot; guid=&quot;_-jhzoHBuEd2VAN1Zr5E20w&quot;>Concept: Developer Testing&lt;/a>&amp;nbsp;for more information.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_FrWqVQqHEd281qfHUnTumw" name="Complete the implementation" guid="_FrWqVQqHEd281qfHUnTumw">
    <sectionDescription>&lt;a id=&quot;complete&quot; name=&quot;complete&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    Tune the code to perfect the implementation by improving performance, refining the user interface, etc.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Apply refactoring techniques to make the code more understandable, reusable, and maintainable. See &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/refactoring_1B63BA3B.html&quot; guid=&quot;_Poc7IPDzEdqYgerqi84oCA&quot;>Concept: Refactoring&lt;/a>&amp;nbsp;and &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../core.tech.common.extend_supp/guidances/guidelines/refactoring_F3D63EBD.html&quot; guid=&quot;_YNx2sJ05EdyQ3oTO93enUw&quot;>Guideline: Refactoring&lt;/a>&amp;nbsp;for more information.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The white-box tests must be re-run after tuning and refactoring to assure the new code still works. Fix any errors&#xD;
    introduced by tuning and refactoring.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_FrWqVAqHEd281qfHUnTumw" name="Evaluate the implementation" guid="_FrWqVAqHEd281qfHUnTumw">
    <sectionDescription>&lt;a id=&quot;evaluate&quot; name=&quot;evaluate&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    Verify that the implementation is fit for its purpose. Examine the code for its suitability to perform its intended&#xD;
    function. This is a quality assurance step that you perform in addition to testing which is described in other tasks.&#xD;
    See &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../practice.tech.design_driven_implementation.base-ibm/guidances/guidelines/verify_the_implementation_3EADE6E0.html&quot; guid=&quot;_ldsmII5TEd2Wvsa4iN6Ysg&quot;>Guideline: Verify the Implementation&lt;/a>&amp;nbsp;for some strategies.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Improve the implementation based on the results of these evaluations.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_FrWqUgqHEd281qfHUnTumw" name="Communicate significant decisions" guid="_FrWqUgqHEd281qfHUnTumw">
    <sectionDescription>&lt;a id=&quot;feedback&quot; name=&quot;feedback&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    Communicate the impact of unexpected changes to the design and requirements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The issues and constraints that you uncover when you implement the system must be communicated to the team. The impact&#xD;
    of issues discovered during implementation must be incorporated into future decisions. If appropriate, update&#xD;
    requirements to reflect ambiguities that you identified and resolved in the implementation so they can be tested and&#xD;
    you can manage&amp;nbsp;stakeholder expectations appropriately. Similarly, update the design to reflect new constraints and&#xD;
    issues uncovered during implementation to be sure that the new information is communicated to other developers.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Usually, there is no need for a change request if the required change is small and the same person is designing and&#xD;
    implementing the code element. That individual can make the design change directly. If the required change has a broad&#xD;
    impact, it may be necessary to communicate that change to the other team members through a change request.&lt;br />&#xD;
    &lt;br />&#xD;
&lt;/p></sectionDescription>
  </sections>
  <purpose>To transform a small piece of&amp;nbsp;the existing design into a tested implementation that's ready to be integrated into the&#xD;
system.</purpose>
</org.eclipse.epf.uma:TaskDescription>
