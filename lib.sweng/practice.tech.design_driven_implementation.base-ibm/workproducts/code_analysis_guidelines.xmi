<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ArtifactDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-ip7mnm59bbNZzR94Z1lUCQ" name="new_artifact,_5IU1kKhEEdymmoKrEVbjiw" guid="-ip7mnm59bbNZzR94Z1lUCQ" changeDate="2008-10-15T08:19:49.218-0700" version="7.2.0">
  <mainDescription>&lt;p>&#xD;
    Code analysis guidelines includes information for the static and runtime evaluation of the implementation (code).&#xD;
    Static guidelines focus on code that is not currently running. Dynamic guidelines focus on evaluating the behavior of&#xD;
    the software as the code is executing.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Static analysis includes:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Coding guidelines that give the implementation a familiar look and feel to everyone on the team, and make it easier&#xD;
        to find code blocks and commonly used areas of code (methods, case statements, etc). These guidelines makes the&#xD;
        code more maintainable and more efficient to produce.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Code dependency that evaluates how different implementation modules depend upon each other. This can improve&#xD;
        coupling and cohesion at the implementation level, for example.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Code complexity that helps developers judge if the code has become too complex to be maintained efficiently.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    See the definition of &lt;a class=&quot;elementLink&quot; href=&quot;./../../practice.tech.design_driven_implementation.base-ibm/guidances/termdefinitions/runtime_analysis_E9330E42.html&quot; guid=&quot;_iWLT0H9mEd2zS8U3DVRSmQ&quot;>runtime analysis&lt;/a>&amp;nbsp;for more information.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Automated tools and techniques can cover more areas of static and runtime analysis. Use this work product to list all&#xD;
    the areas that need to be examined in the implementation and the tools used to examine the implementation.&#xD;
&lt;/p></mainDescription>
  <keyConsiderations>The most important thing about coding guidelines is to have them. Everyone has their stylistic preferences, but a enforcing&#xD;
a single style greatly improves readability and maintainability. Avoid ignoring coding guidelines just because it's&#xD;
difficult to come to agreement. Choose a set of guidelines get coding.</keyConsiderations>
  <purpose>&lt;p>&#xD;
    To maintain an implementation that's readable and consistent by everyone on the team.&#xD;
&lt;/p></purpose>
</org.eclipse.epf.uma:ArtifactDescription>
