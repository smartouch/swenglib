<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-eas78ADnKIFIwhakinN-IA" name="new_roadmap,_Kmxq4PXgEdylUbNL8VMatA" guid="-eas78ADnKIFIwhakinN-IA" authors="Jean-Louis Marecheaux" changeDate="2010-05-18T10:36:00.765-0700" version="7.2.0">
  <copyrightStatement href="uma://_iX6DsBXGEdyM9L6rbYAZaw#_VBVtYBXVEdyM9L6rbYAZaw"/>
  <mainDescription>&lt;p>&#xD;
    Start by reviewing the following key concepts and tasks:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLink&quot; href=&quot;./../../../practice.tech.design_driven_implementation.base-ibm/guidances/guidelines/mapping_design_to_code.ddi_6A424913.html&quot; guid=&quot;_pzUV0AzeEd2GhOWHiMelAw&quot;>Mapping from Design to Code&lt;/a>&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../practice.tech.design_driven_implementation.base-ibm/guidances/concepts/developer_testing.ddi_ABB4E66A.html&quot; guid=&quot;_-jhzoHBuEd2VAN1Zr5E20w&quot;>Developer Testing&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLink&quot; href=&quot;./../../../practice.tech.design_driven_implementation.base-ibm/tasks/implement_the_solution_32A2F393.html&quot; guid=&quot;_FrWqUAqHEd281qfHUnTumw&quot;>Implement the Solution&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    These&amp;nbsp;will introduce you to the basics of what you need to know about solution development in the context of DDI.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    After reviewing the above you can:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Understand the solution design practice of your organization and the work products it produces. These will be an&#xD;
        inputs to your work.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Familiarize yourself with incremental development. One key aspect of DDI is to implement the solution by&#xD;
        increments, focusing on a small piece of the solution first, and adding additional functionality incrementally&#xD;
        during subsequent development cycles.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Identify the tools you can leverage with your team. It can be tools to automate key activities like static code&#xD;
        analysis, unit testing or design to code mapping. Talk to other teams to learn from their past experiences. They&#xD;
        can have used or identified tools in the past to increase their productivity.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Improve the quality of your implementation by reviewing assets such as:&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;div style=&quot;MARGIN-LEFT: 2em&quot;>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            &lt;a class=&quot;elementLink&quot; href=&quot;./../../../practice.tech.design_driven_implementation.base-ibm/workproducts/code_analysis_guidelines_BF97268F.html&quot; guid=&quot;_5IU1kKhEEdymmoKrEVbjiw&quot;>Code Analysis Guidelines&lt;/a> (static analysis guidelines)&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Best practices for your implementation language&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Runtime observation and analysis information&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Review the &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../practice.tech.design_driven_implementation.base-ibm/guidances/whitepapers/automating_static_analysis_31246E75.html&quot; guid=&quot;_k4tqYH9YEd2zS8U3DVRSmQ&quot;>Whitepaper: Automating Static Analysis to Deliver Higher-Quality Software&lt;/a>&amp;nbsp;for guidance on performing static analysis.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    &amp;nbsp; 5. Set up your development environment.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Common Pitfalls&lt;/strong>&lt;br />&#xD;
    The most frequent pitfall is to consider only functional requirement during your development activities. A common&#xD;
    mistake is to overlook non-functional requirements (availability, security, performance, etc...). Realization of both&#xD;
    functional and non-functional requirements will ensure the success of your Design Driven Implementation.&lt;br />&#xD;
    &lt;br />&#xD;
    Another common pitfall is to be driven by programming language trends and implement the solution based on bleeding-edge&#xD;
    technology. It significantly increases the level of risk of your project. Don't forget there is no value in the&#xD;
    technology itself. Only the realization of the initial business need is a success factor. Try to benefit from past&#xD;
    achievements and reuse technologies your organization is thoroughly proficient in.&lt;br />&#xD;
    &lt;br />&#xD;
    Try also to avoid reinventing the wheel each time you develop an element. It prevents you from focusing on critical&#xD;
    parts of the system where you really have to find innovative solutions. Chances are another team (or even the open&#xD;
    source community) has already implemented solutions to most common problems. Effective reuse is a key success factor.&#xD;
    It improves productivity and code maintainability.&lt;br />&#xD;
    &lt;br />&#xD;
    Another pitfall in&amp;nbsp;the practice&amp;nbsp;is to minimize the importance of code reviews. The consequence is to discover&#xD;
    the problems too late in the process. They are then difficult to solve. Try to plan and conduct regular reviews to&#xD;
    detect potential problems as early as possible. It will increase the overall quality of the solution.&lt;br />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
