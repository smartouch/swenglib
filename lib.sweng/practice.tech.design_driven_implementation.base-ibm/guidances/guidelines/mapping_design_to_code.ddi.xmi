<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-aq-zpi-GGo2yYA8r9g533g" name="mapping_design_to_code.ddi,_pzUV0AzeEd2GhOWHiMelAw" guid="-aq-zpi-GGo2yYA8r9g533g" changeDate="2008-09-29T10:43:20.645-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h4>&#xD;
    Transform the design into code&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Once the mapping strategy between the design and the code has been identified, the development teams can use different&#xD;
    techniques to produce the actual implementation of the system&lt;br />&#xD;
    &lt;br />&#xD;
    Transforming the design into code implements the system structure in the chosen source language. It also implements the&#xD;
    system behavior defined in the functional requirements.&lt;br />&#xD;
    &lt;br />&#xD;
    The transformation can be done manually. Implementing the system behavior means writing the code that allows different&#xD;
    parts of the application (classes or components) to collaborate in realizing the behavior of the system. So for each&#xD;
    [Software Design] element, the development team writes the appropriate code artifacts to create the&#xD;
    [Implementation]&lt;br />&#xD;
    &lt;br />&#xD;
    But there are also various techniques for automatically transforming design to implementation. Here are some examples:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &amp;nbsp;Standard patterns can be applied to generate design and code elements from related design and implementation.&#xD;
        For example, a standard transformation pattern can be applied to a data table to create Java&amp;trade; classes to access the&#xD;
        data table. Another example is using an Eclipse Modeling Framework to generate code for storing data that matches&#xD;
        the model and to generate a user interface implementation for populating data. A pattern or transformation engine&#xD;
        can be used to create the implementation, or the implementation can be done by hand. Pattern engines are easier and&#xD;
        more reliable, but handwritten code implementing a defined pattern will have fewer errors than handwritten code&#xD;
        implementing a novel or unique design.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Models can be detailed and used to generate an implementation. Both structure (class and package diagrams) and&#xD;
        behavior diagrams (such as collaboration, state, and activity diagrams) can be used to generate executable code&#xD;
        using code generation tools. These initial versions can be further refined as needed.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Automatically generate the skeleton of the code from platform-specific models. The design may be&#xD;
        platform-independent to varying degrees. Platform-specific design models or even code can be generated by&#xD;
        transformations that apply various rules to map high-level abstractions of platform-specific elements. This is the&#xD;
        focus of the Object Management Group (OMG) Model-Driven Architecture (MDA) (http://www.omg.org) initiative.&#xD;
        Platform-specific visual models can be used to generate an initial code skeleton. The generated skeleton can be&#xD;
        further enriched by handwritten code not specified in the design.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    There is no single transformation method in a given project. Some parts of the system can be handwritten while others&#xD;
    are generated from the design. The approach to choose usually depends on the level of complexity of the solution to&#xD;
    develop. Repetitive implementations can also be automated to increase productivity and consistency.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
