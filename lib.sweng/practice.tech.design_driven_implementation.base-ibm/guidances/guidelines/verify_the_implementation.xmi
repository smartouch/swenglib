<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-1ewIxA5rUG17XqXtDJ-nrw" name="new_guideline,_ldsmII5TEd2Wvsa4iN6Ysg" guid="-1ewIxA5rUG17XqXtDJ-nrw" changeDate="2008-09-29T11:23:29.599-0700" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    Some strategies which can be used to help verify the implementation are:&#xD;
&lt;/p>&#xD;
&lt;ul class=&quot;noindent&quot;>&#xD;
    &lt;li>&#xD;
        Pair programming. By pairing to implement the code in the first place, you effectively evaluate the code as its&#xD;
        being written.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Read through the code for common mistakes. Consider keeping a checklist of common mistakes that you make, as a&#xD;
        reminder reference.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use tools to check for implementation errors and inappropriate code. For example, use a static code rule checker or&#xD;
        set the compiler to the most detailed warning level.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use tools that can visualize the code. Code visualization, such as the UML visualizations in the Eclipse IDE, help&#xD;
        developers identify issues such as excessive coupling or circular dependencies.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Perform informal, targeted code inspections. Ask colleagues to review small critical sections of code and code with&#xD;
        significant churn. Avoid reviewing large sections of code.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use&amp;nbsp;a tester to ensure the implementation is testable and understandable to testing resources.&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
