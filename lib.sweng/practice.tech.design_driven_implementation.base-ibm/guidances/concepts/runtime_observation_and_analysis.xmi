<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-BtsPJhOZQLyxL2_wtHVcIQ" name=",_zAF4IGSmEd2LNcUSuad3eQ" guid="-BtsPJhOZQLyxL2_wtHVcIQ" changeDate="2008-10-15T08:18:15.750-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>Introduction&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The observation and subsequent analysis of the runtime behavior of a software component is an important practice in the&#xD;
    successful debugging of software. Understanding the runtime behavior of software involves two key practices:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Observation of the software during runtime execution.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Analysis of the captured observations.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Runtime observation and analysis techniques are themselves not dependent on testing in so far as runtime behavior can&#xD;
    be observed and analyzed without the requirement for predefined test inputs or the use of testing techniques to&#xD;
    stimulate the application behavior. However, testing can be successfully combined with runtime observation techniques&#xD;
    and tools: for example, tools that automate runtime observation can be executed during test execution, improving the&#xD;
    visibility into the runtime behavior of the component that occurs in response to the test.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;RuntimeObservation&quot; name=&quot;RuntimeObservation&quot;>Observing runtime behavior&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    While it is important to carefully observe all of the behavior that occurs during runtime execution of the software,&#xD;
    there are usually significant observation points that are useful to specifically monitor. These significant observation&#xD;
    points are often:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Decision points at which the software logic path is about to or has just branched.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Completion points at which an important logic path has completed, typically resulting in a state change within the&#xD;
        software environment.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        An interface point between two separate application components.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        An interface point between the software and it's execution environment, including any interfaces to hardware&#xD;
        components.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    These observation points may also align with control points at which it may be desirable to alter either the&#xD;
    application state or the flow of control through the logic paths. These concerns are often referred to as Points of&#xD;
    Control and Observation (PCO).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Runtime observation excludes static observation methods as a primary approach, such as review of the static software&#xD;
    source code or of the relationships between the software building blocks captured in visual models and so forth.&#xD;
    Rather, it requires an executable software component and offers valuable information not available through other&#xD;
    debugging techniques about how the developed component behaves when it runs, either in the test environment, or in the&#xD;
    final deployment environment. The observations captured from the runtime behavior may subsequently be related to static&#xD;
    elements to provide additional insight.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;RuntimeAnalysis&quot; name=&quot;RuntimeAnalysis&quot;>Analyzing runtime observations&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Software runtime analysis is simply the practice of understanding the behavior of a software component by analyzing&#xD;
    data collected during runtime execution of the component. During the development of the component by the developer,&#xD;
    runtime observation and analysis is one aspect of the debugging activities the developer undertakes.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;AutomatedToolSupport&quot; name=&quot;AutomatedToolSupport&quot;>Automated tool support&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Because of the potential volume of low-level information that can be captured from runtime behavior, the speed at which&#xD;
    that information is generated, and the subsequent difficulty in understanding the potentially vast amount of&#xD;
    information, automated tool support is a key factor in making this practice feasible. There are various approaches that&#xD;
    can be taken to provide tool support yourself, and a wealth of tools available commercially that will save you the&#xD;
    time, effort and cost of creating your own.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
