<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-nbNY7mdh3PM3L8VdP8dkIQ" name="stubs,6.347489919609074E-305" guid="-nbNY7mdh3PM3L8VdP8dkIQ" changeDate="2008-09-29T10:27:54.974-0700" version="7.1.0">
  <mainDescription>&lt;p>&#xD;
    A stub is a component that doesn't actually do anything other than declare itself and the parameters it accepts.&#xD;
    Encapsulated software (components, subsystems, classes, etc)&amp;nbsp;can be&amp;nbsp;is tested by sending inputs to its&#xD;
    interface, waiting for the software to process them, then checking the results. In the course of its processing, a&#xD;
    software component very likely uses other components by sending inputs to them and using their results:&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;283&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;./resources/co_stubs-img1.gif&quot; width=&quot;356&quot; />&#xD;
&lt;/p>&#xD;
&lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
    &lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
        &lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
            &lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
                &lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
                    &lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
                        &lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
                            &lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
                                &lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
                                    &lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
                                        &lt;p class=&quot;picturetext&quot; dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
                                            &lt;strong>Fig1: Testing a Component you've implemented&lt;/strong>&#xD;
                                        &lt;/p>&#xD;
                                    &lt;/blockquote>&#xD;
                                &lt;/blockquote>&#xD;
                            &lt;/blockquote>&#xD;
                        &lt;/blockquote>&#xD;
                    &lt;/blockquote>&#xD;
                &lt;/blockquote>&#xD;
            &lt;/blockquote>&#xD;
        &lt;/blockquote>&#xD;
    &lt;/blockquote>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    The components&amp;nbsp;you use may cause problems for your testing. They:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        May not be implemented yet.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        May have defects that prevent your tests from working or make you spend a lot of time discovering that a test&#xD;
        failure was not caused by your component.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        May make it hard to run tests when you need to. For instance, if a component is a commercial database, your company&#xD;
        might not have enough floating licenses for everyone. Or one of the components may be hardware that's available&#xD;
        only at scheduled times in a separate lab.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        May make testing so slow that tests aren't run often enough. For example, initializing the database might take five&#xD;
        minutes per test.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        May be difficult to provoke into producing certain results. For example, you may want each of your methods that&#xD;
        writes to disk to handle &quot;disk full&quot; errors. How do you make sure the disk fills at just the moment that method is&#xD;
        called?&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    To avoid these problems, you may choose to use &lt;b>stub&lt;/b> components (also called &lt;b>mock objects&lt;/b>). Stub&#xD;
    components behave like the real components, at least for the values that your component sends them while responding to&#xD;
    its tests. They may go beyond that: they may be general-purpose &lt;b>emulators&lt;/b> that seek to faithfully mimic most or&#xD;
    all the component's behaviors. For example, it's often a good strategy to build software emulators for hardware. They&#xD;
    behave just like the hardware, only slower. They're useful because they support better debugging, more copies of them&#xD;
    are available, and they can be used before the hardware is finished.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;283&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;./resources/co_stubs-img2.gif&quot; width=&quot;356&quot; />&#xD;
&lt;/p>&#xD;
&lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
    &lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
        &lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
            &lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
                &lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
                    &lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
                        &lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
                            &lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
                                &lt;p class=&quot;picturetext&quot;>&#xD;
                                    &lt;strong>Fig2: Testing a Component you've implemented by stubbing out a dependent&#xD;
                                    component&lt;/strong>&#xD;
                                &lt;/p>&#xD;
                            &lt;/blockquote>&#xD;
                        &lt;/blockquote>&#xD;
                    &lt;/blockquote>&#xD;
                &lt;/blockquote>&#xD;
            &lt;/blockquote>&#xD;
        &lt;/blockquote>&#xD;
    &lt;/blockquote>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    Stubs have two disadvantages.&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Stubs can be expensive to build - this is especially true for emulators.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Stubs need to be maintained since they're also software.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Stubs may mask errors. For example, suppose your component uses trigonometric functions, but no math library is&#xD;
        available yet. You could construct a stub for sine that returns preset values for specific inputs. All is fine&#xD;
        until you integrate your component with the real trigonometric library, and you discover that the sine function&#xD;
        takes arguments in &lt;em>radians&lt;/em> and the expected results are now different from what the test expects.&amp;nbsp;The&#xD;
        good news is that a code defect was found - your code needs to use radians. The bad news is that the error was&#xD;
        discovered later in the development cycle than desirable.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;FurtherInformation&quot; name=&quot;FurtherInformation&quot;>Further information&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    For further information related to stubs, see the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;http://www.connextra.com/aboutUs/mockobjects.pdf&quot; target=&quot;_blank&quot;>&lt;i>Endo-Testing: Unit testing with Mock&#xD;
        Objects&lt;/i>&lt;/a>, &quot;eXtreme Programming and Flexible Processes in Software Engineering - XP2000&quot;. &amp;copy; 2000 Tim&#xD;
        Mackinnon, Steve Freeman, Philip Craig.&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;br />&#xD;
        (&lt;a href=&quot;http://www.adobe.com/products/acrobat/alternate.html&quot; target=&quot;_blank&quot;>Get Adobe Reader&lt;/a>)&amp;nbsp;&lt;br />&#xD;
        &lt;br />&#xD;
        &amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
