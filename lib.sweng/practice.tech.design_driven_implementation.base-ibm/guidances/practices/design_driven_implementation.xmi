<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:PracticeDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-X-ganMYQ6Mksn0tzfIrCvA" name="design_driven_implementation,_LzawwB47Ed2dpYr1Fj8e9Q" guid="-X-ganMYQ6Mksn0tzfIrCvA" changeDate="2008-10-09T06:29:48.265-0700" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    Start by identifying a subset of the solution you need to implement: the solution increment. An increment is a small,&#xD;
    measurable step towards solution delivery, such as a single feature to implement, or an improvement to a method. Then&#xD;
    make sure you understand the different requirements for this small piece of the solution.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Reuse the design elements as an input to the implementation and refactor the code to clean it up. This improves its&#xD;
    internal consistency and clarity. (Note that at this step, a common practice is to also perform design refactoring to&#xD;
    ensure maintainability and accuracy of your solution design)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Assess the quality of the code produced. Then begin the cycle again on a new small piece of the solution.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Finally, perform black-box testing on component or subsystem that was implemented by the collection of incremental&#xD;
    solutions.&#xD;
&lt;/p>&lt;img height=&quot;920&quot; alt=&quot;file:///C:/Documents%20and%20Settings/Administrator/Desktop/ddi_flow.jpg&quot; src=&quot;./resources/ddi_flow.jpg&quot; width=&quot;580&quot; /></mainDescription>
  <additionalInfo>For more information on this practice,&amp;nbsp;&amp;nbsp;see the &lt;a href=&quot;http://www.ibm.com/developerworks/rational/practices/design_driven_implementation/&quot; target=&quot;_blank&quot;>practice resource&#xD;
page&amp;nbsp;on IBM&amp;reg; DeveloperWorks&amp;reg;&lt;/a>.</additionalInfo>
  <problem>&lt;p>&#xD;
    The Design Driven Implementation practice improves productivity by helping teams to develop a solution based on a&#xD;
    pre-existing software design. It narrows the scope of the solution to implementation. It also facilitates the&#xD;
    conversion between the designed solution and the actual implementation of the system as each developed module can refer&#xD;
    to preexistent design elements. This improves productivity to achieve a better time to market. And it contributes to a&#xD;
    better alignment between the initial business needs and the delivered system by ensuring the implementation derives&#xD;
    from technical design and user requirements instead of ad-hoc coding.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This practice also improves the quality of the final product. Each time you develop an element, you rely on a well&#xD;
    defined design.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Adopting this practice improves predictability and project oversight by aiding project managers to scope and plan the&#xD;
    implementation work based on the software design elements.&lt;br />&#xD;
    &lt;br />&#xD;
&lt;/p></problem>
  <goals>Developers use Design Driven Implementation to create the &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.tech.common.extend_supp/workproducts/implementation_AFFEFC46.html&quot; guid=&quot;_JqYbgJ01EdyQ3oTO93enUw&quot;>Implementation&lt;/a>, the&amp;nbsp;&amp;nbsp;developer tests, and the supporting material needed to&#xD;
produce quality code. Developers also apply DDI to improve the quality of the code they produce based on static analysis&#xD;
and best practices.</goals>
</org.eclipse.epf.uma:PracticeDescription>
