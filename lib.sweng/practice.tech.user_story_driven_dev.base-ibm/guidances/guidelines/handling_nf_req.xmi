<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-SSb6O35v9WJTT52nBkz4ow" name="handling_nf_req,_3uuq0D9KEd6kc5DY7OkMEA" guid="-SSb6O35v9WJTT52nBkz4ow" changeDate="2009-07-15T15:13:51.389-0700" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    Certain requirements for the system under construction are not about a specific functionality that can be assigned to a&#xD;
    team member and implemented in one time box. These requirements typically impose constraints on the system in terms of,&#xD;
    for example,&amp;nbsp;how fast, reliable, scalable, useful, portable, or easy to maintain a system should be. Such&#xD;
    requirements generally span across multiple user stories of the system and are&amp;nbsp;referred to&#xD;
    as&amp;nbsp;&lt;em>nonfunctional&lt;/em> requirements, &lt;em>system-wide&lt;/em> requirements, &lt;em>technical&lt;/em> requirements, or&#xD;
    &lt;em>constraints&lt;/em>. See &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/system_wide_requirements_B2C4D610.html&quot; guid=&quot;_VXZ5wO0IEdqHTdbLTmC5IQ&quot;>System-Wide Requirements&lt;/a> for more information.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Approaches to capturing nonfunctional requirements&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    There are&amp;nbsp;different approaches&amp;nbsp;to capturing nonfunctional requirements as part of&amp;nbsp;user story-driven&#xD;
    development, as described in the three sections that follow.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Approach 1. Write individual stories&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    One way&amp;nbsp;to capture nonfunctional requirements or constraints on the system is to write them as&#xD;
    individual&amp;nbsp;stories, which are often referred to as &lt;em>technical stories&lt;/em> &lt;a class=&quot;elementLinkwithUsertext&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/supportingmaterials/tech_references_17D34A60.html#COH08&quot; guid=&quot;_OKj94D8iEd2AxfTL63EayA&quot;>[COH08]&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For example, consider this&amp;nbsp;technical story:&#xD;
&lt;/p>&#xD;
&lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
    &lt;p class=&quot;quote&quot;>&#xD;
        As the bank CTO, I want the ATM system to&amp;nbsp;respond to user operations in&amp;nbsp;no more than 2 seconds,&amp;nbsp;so&#xD;
        we can adhere to XPTO Standard for banking systems.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    This&amp;nbsp;technical story captures what&amp;nbsp;a legitimate&amp;nbsp;user role wants from the system: the bank CTO wants the&#xD;
    system to comply&amp;nbsp;with a banking standard&amp;nbsp;related to&amp;nbsp;system performance. Even though it is&#xD;
    legitimate,&amp;nbsp;this&amp;nbsp;technical story&amp;nbsp;arguably violates the goal of stories being valuable and, at the same&#xD;
    time, sized to be finished in one iteration. This&amp;nbsp;technical story affects or constrains&amp;nbsp;many user stories in&#xD;
    the system.&amp;nbsp;Considering that many iterations will pass until all user stories are developed, it is clear that&#xD;
    this&amp;nbsp;technical story can't be assigned to one team member and finished in one iteration if it is to&amp;nbsp;show&#xD;
    value to all stakeholders - not only to the bank CTO, but also ATM users.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Approach 2. Include the details in each user story&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Another approach&amp;nbsp;is to capture nonfunctional requirements as part of the details of each user story. This way,&#xD;
    each user story clearly contains the acceptance criteria that defines the level of completeness.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Let's take the following user story as an example:&#xD;
&lt;/p>&#xD;
&lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
    &lt;p class=&quot;quote&quot;>&#xD;
        As an ATM user, I want to use an ATM to withdraw cash.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    In the details part of that user story, you could capture the nonfunctional requirement this way:&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        After the user selects and confirms the amount to be withdrawn, the system should complete the operation in no more&#xD;
        than 2 seconds.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    In this version, when the user story is implemented, tests need to be created. This includes having the appropriate&#xD;
    test environment to simulate the operational environment so&amp;nbsp;that both the&amp;nbsp;functionality (the ability to&#xD;
    withdraw cash from a bank account)&amp;nbsp;and the performance (how fast the back end operations run) can be tested.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Approach 3. Combine both methods&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    While conversing with stakeholders to flesh out the details of a user story or prioritizing the user stories and&#xD;
    developing them, the team might inadvertently miss that a given user story, for example, is constrained by the&#xD;
    adherence to XPTO Standard.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A combined approach to capturing the nonfunctional requirements seems the best option: capture the nonfunctional&#xD;
    requirements as&amp;nbsp;technical stories (or another notation&amp;nbsp;or free-format text, if that makes sense), and make&#xD;
    that list of&amp;nbsp;technical stories&amp;nbsp;visible to the team and stakeholders at all times when prioritization and&#xD;
    detailing of user stories is happening. In this way, the team and stakeholders make sure to capture the nonfunctional&#xD;
    requirement as an acceptance criterion within the details of each and every user story where that constraint applies.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Another advantage of keeping&amp;nbsp;all of the technical stories&amp;nbsp;on a consolidated list is that if there is a&#xD;
    requirement change or a new requirement is added, it becomes visible to the stakeholders and team right away. For&#xD;
    example, you might get this change to the performance requirement:&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
    &lt;p>&#xD;
        As the bank CTO, I want the ATM system to&amp;nbsp;respond to user operations in&amp;nbsp;no more than&amp;nbsp;1&#xD;
        second,&amp;nbsp;so we can adhere to XPTOplus Standard for banking systems.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    That one-second change and the stricter standard should alert the team to revisit all affected user stories.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Scheduling nonfunctional requirements&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Based on the previous discussion, a nonfunctional requirement that is captured as an individual technical&#xD;
    story&amp;nbsp;may be&amp;nbsp;hard to treat (prioritize, assign to&amp;nbsp;a team member,&amp;nbsp;and implement in one iteration).&#xD;
    These technical stories&amp;nbsp;are not&amp;nbsp;prioritized with the user stories, but they typically serve as a reminder&#xD;
    that, for example,&amp;nbsp;the system is constrained or needs to adhere to some standard.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    On the other hand, stakeholders will most likely prefer to give high priority to user stories that have high business&#xD;
    value, which is&amp;nbsp;acceptable&amp;nbsp;from the stakeholders' perspective. However, the team needs to make sure that the&#xD;
    user stories that are affected by constraints take precedence over other non-constrained user stories. The team and&#xD;
    stakeholders need to find this balance when prioritizing user stories. This is the same as thinking&amp;nbsp;which user&#xD;
    stories impact the architecture of the system being developed. Those user stories should be scheduled to be implemented&#xD;
    early in the project to&amp;nbsp;help the team build and validate the&amp;nbsp;system architecture&amp;nbsp;early,&amp;nbsp;which&#xD;
    helps&amp;nbsp;minimize project risks early.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
