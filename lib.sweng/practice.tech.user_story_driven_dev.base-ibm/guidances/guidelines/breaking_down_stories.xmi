<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-SGmp7UUgFBST-fMeOXYzRQ" name="new_guideline,_vQWOcDpWEd6RO7HGPRI5lw" guid="-SGmp7UUgFBST-fMeOXYzRQ" changeDate="2009-07-07T09:01:59.493-0700" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    User stories&amp;nbsp;may be of different sizes during a project lifecycle, including&amp;nbsp;very large ones that are often&#xD;
    called &lt;em>epics&lt;/em>. When a user story is close to being implemented, it needs to be right-sized to facilitate being&#xD;
    prioritized, estimated, and developed&amp;nbsp;within a reasonable time frame (typically within a time box, such as an&#xD;
    iteration). Even if a user story fits within the defined time box, it might still need to be split because it does not&#xD;
    fit within the available time&amp;nbsp;to&amp;nbsp;finish.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The sections that follow introduce approaches to breaking down stories for planning, estimating, and development&#xD;
    purposes. For details, see &lt;a class=&quot;elementLinkwithUsertext&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/supportingmaterials/tech_references_17D34A60.html#COH06&quot; guid=&quot;_OKj94D8iEd2AxfTL63EayA&quot;>[COH06]&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Breaking down user stories across data boundaries&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    One approach is to break down user stories across data boundaries. Look for the data that needs to be supported by the&#xD;
    user story. If the data is complex or a large set of inputs will be required from the user or to presented to the user&#xD;
    as output, split the stories according to subsets of that data. If there are different types of values, for example&#xD;
    default values as opposed to values that can be defined by a user during the operation, then split stories according to&#xD;
    those value types.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For example, in the ATM system, an ATM user should be able to make payments for predefined&amp;nbsp;payees that have&#xD;
    business relationships with&amp;nbsp;the user's bank.&amp;nbsp;ATM users should also be able to make payments to&amp;nbsp;payees&#xD;
    that they add when they authorize payments. In this example, the user story that starts:&#xD;
&lt;/p>&#xD;
&lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
    &lt;p class=&quot;quote&quot;>&#xD;
        As an ATM&amp;nbsp;user, I want to pay a bill....&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    This use story can be broken down into two smaller user stories, such as:&#xD;
&lt;/p>&#xD;
&lt;blockquote class=&quot;quote&quot; dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
    &lt;p>&#xD;
        As an ATM user, I want to make a&amp;nbsp;payment a predefined&amp;nbsp;payee.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        As an ATM user, I want to make a&amp;nbsp;payment to a&amp;nbsp;new payee.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;h3>&#xD;
    Breaking down user stories on operational boundaries&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Look for different operations in a user story as a way to&amp;nbsp;split it.&amp;nbsp;From the example on the previous section,&#xD;
    adding a new payee and actually making the payment are two separate user stories. This is a possible way to&amp;nbsp;split&#xD;
    this user story:&#xD;
&lt;/p>&#xD;
&lt;blockquote dir=&quot;ltr&quot; style=&quot;MARGIN-RIGHT: 0px&quot;>&#xD;
    &lt;p class=&quot;quote&quot;>&#xD;
        As an ATM user, I want to&amp;nbsp;define a new payee.&#xD;
    &lt;/p>&#xD;
    &lt;p class=&quot;quote&quot;>&#xD;
        As an ATM user, I want to make a payment&amp;nbsp;to&amp;nbsp;the payee that I defined.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    Another common way&amp;nbsp;to partition user stories along operational boundaries is to look for the typical operations of&#xD;
    creating, reading, updating, and deleting data (CRUD).&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Breaking down user stories on system-wide or nonfunctional concerns&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    There are some requirements to an application that can be considered system-wide requirements, meaning that they apply&#xD;
    to many user stories. Examples are security, language support, and logging. There are also nonfunctional requirements&#xD;
    that apply to one or more user stories, such as performance or availability.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If a user story is too big to fit into an iteration,&amp;nbsp;split the story into two stories: one that does not include&#xD;
    the&amp;nbsp;nonfunctional&amp;nbsp;concern&amp;nbsp;and the other that does. This helps you implement the story in its simplest&#xD;
    case (even though you might not want to release the user story without elements of security or performance until they&#xD;
    are implemented on a second round).&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Breaking down user stories of mixed priority&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Some user stories can be broken down based on priority, according to when the parts need to be implemented. In this&#xD;
    way, you can start implementing the most important parts first, then add the lower-priority functionality later.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the ATM example where an ATM user wants to withdraw cash from her bank account, the team might decide to break this&#xD;
    story down and&amp;nbsp;develop the common path first, which is to have the ATM dispense $20 bills (U.S. currency example).&#xD;
    Another story to be developed later might be to provide the option for users to select cash in $5, $10, or $20 bills.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    What is not a recommended breakdown&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    It is not uncommon that a large user story is difficult to split, even after&amp;nbsp;considering those approaches.&#xD;
    However, one thing to avoid is breaking down a user story based on horizontal slices&amp;nbsp;of the&amp;nbsp;system layers. A&#xD;
    user story, as small as it could be, still needs to be of value to a user role. Therefore, avoid developing a story&#xD;
    that has only user interface elements and no logic or data access. Also, avoid fully implementing the data access&#xD;
    without having user interface elements and logic to access that data.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When developing a user story, make sure that you are&amp;nbsp;slicing the various layers&amp;nbsp;of the system vertically,&#xD;
    which means that you develop a little bit of&amp;nbsp;each layer to support that user story (for example, user interface,&#xD;
    business logic, and data access).&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
