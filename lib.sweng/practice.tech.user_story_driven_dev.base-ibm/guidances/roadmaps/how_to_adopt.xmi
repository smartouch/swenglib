<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-ESI8Tbt-5ffYAy7jYVlDKw" name="new_roadmap,_PJKZkMRfEdyBt8f9agIerg" guid="-ESI8Tbt-5ffYAy7jYVlDKw" changeDate="2011-08-08T09:50:28.365-0700" version="7.2.0">
  <mainDescription>&lt;h3>&#xD;
    Getting Started!&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The following suggested steps will help you get started with capturing requirements as user stories:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Start with identifying user roles. &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Repeat the process until all user roles are identified.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Capture user roles on index cards, sticky notes, or in a computer file.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Schedule&amp;nbsp;one or&amp;nbsp;two brainstorming sessions with team members and stakeholders to capture stories. &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Remember that the goal is &quot;quantity over quality.&quot;&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Put everything in a visible place (use sticky notes or index cards with push pins).&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Keep discussions at a high level.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Capture everything.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Stick to the allocated time (1 to 2 hours per session)&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Limit negative feedback and avoid lengthy debates.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Schedule additional sessions to refine and revise stories. &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                First, combine user roles.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Next, group common stories together and refine them.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Update user roles after each refinement.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Keep all earlier index cards until you have finished the process.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Identify large user stories (epics) and dependent stories.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Group user stories into themes.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        During sessions, look for nonfunctional requirements. &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Many can be expressed as &quot;constraint stories.&quot;&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Others cannot, so you might need to expressed some stories in another appropriate or traditional way.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Then put automated tests in place and run them every day.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    These steps can be performed many times.&amp;nbsp;You can&amp;nbsp;identify a user story and start adding a few confirmations.&#xD;
    Then you can refine it and&amp;nbsp;add a few more confirmations. Next, you can&amp;nbsp;identify another user&#xD;
    story,&amp;nbsp;refine it, add two more user stories, go back and add a confirmation to an existing user story,&amp;nbsp;and so&#xD;
    on.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If you use&amp;nbsp;this practice&amp;nbsp;with the iterative development practice, you automatically get iterations, and you&#xD;
    will repeat these steps (in other words, the &lt;a class=&quot;elementLinkwithUsertext&quot;&#xD;
    href=&quot;./../../../practice.tech.user_story_driven_dev.base-ibm/customcategories/usdd_tasks_20A16B25.html&quot;&#xD;
    guid=&quot;_JSnOwDpdEd6RO7HGPRI5lw&quot;>tasks&lt;/a>&amp;nbsp;of this practice) for each iteration. For example,&amp;nbsp;the team and&#xD;
    stakeholders&amp;nbsp;can identify all user roles and user stories (to the best of&amp;nbsp;their knowledge) at the initial&#xD;
    iteration of the project, and then refine user roles and user stories at each iteration so that the prioritized user&#xD;
    stories get detailed, developed, and tested during the iteration they are assigned to. You can also identify new user&#xD;
    roles and user stories throughout later iterations as the team and stakeholders learn from user stories that are&#xD;
    delivered at each iteration.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    User stories compared to use cases&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    User stories tend to be relatively informal and incomplete, leaving details to be resolved during implementation. They&#xD;
    work well when a complete, detailed requirements specification is not required or desired. If a detailed requirements&#xD;
    specification is needed, alternative techniques, such as structured use cases, may be preferable. It is also possible&#xD;
    to combine techniques, for example, by using high-level use cases to provide context and to organize primary goals of&#xD;
    the system and user stories to define the increments in which use cases are delivered.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Common pitfalls&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Watch for these problems:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        When user stories&amp;nbsp;are&amp;nbsp;dependent on other user stories or functionality is duplicated in different user&#xD;
        stories,&amp;nbsp;it makes prioritization of user stories more difficult. Try to remove duplicate functionality and&#xD;
        avoid, as much as possible, dependencies between user stories, or use a traceability mechanism.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        When there is no ongoing communication with stakeholders, it becomes difficult to create valuable user stories at&#xD;
        the right level of detail to capture the essence of the stakeholders' needs. The lack of communication&#xD;
        also&amp;nbsp;makes it&amp;nbsp;hard to negotiate&amp;nbsp;user story priorities with stakeholders throughout the project.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        When the scope of user stories is too big, it&amp;nbsp;is harder&amp;nbsp;to estimate them and assign them to be completed&#xD;
        in one iteration or cycle, which makes it difficult to develop user stories in a timely manner.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        When user stories do not clearly describe ways of being confirmed (or tested), it becomes hard to make sure that&#xD;
        tests match the intention of the user stories and that the solution meets stakeholders' expectations.&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
