<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="--JmcaIoL3ETSV3kkWcgd8Q" name="invest,_K8khID55Ed6FxpOwnkUDmw" guid="--JmcaIoL3ETSV3kkWcgd8Q" changeDate="2009-07-07T10:50:52.535-0700" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    Even though user stories are an informal technique for capturing requirements in a lighter way, to promote interaction&#xD;
    between teams and stakeholders, it helps to know what makes a &quot;good&quot; user story. The INVEST model defines them as&#xD;
    Independent, Negotiable, Valuable, Estimable, Small, Testable. This model was introduced by William Wake &lt;a class=&quot;elementLinkwithUsertext&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/supportingmaterials/tech_references_17D34A60.html#WAK03&quot; guid=&quot;_OKj94D8iEd2AxfTL63EayA&quot;>[WAK03]&lt;/a> and has been used by many other authors in the agile development-related&#xD;
    literature.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The next sections&amp;nbsp;explain&amp;nbsp;characteristics of good user stories, based on the INVEST model. For more&#xD;
    information, see &lt;a class=&quot;elementLinkwithUsertext&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/supportingmaterials/tech_references_17D34A60.html#WAT08&quot; guid=&quot;_OKj94D8iEd2AxfTL63EayA&quot;>[WAT08]&lt;/a>&amp;nbsp;and &lt;a class=&quot;elementLinkwithUsertext&quot; href=&quot;./../../../core.tech.common.extend-ibm/guidances/supportingmaterials/tech_references_17D34A60.html#COH04&quot; guid=&quot;_OKj94D8iEd2AxfTL63EayA&quot;>[COH04]&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Independent&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Identify and capture&amp;nbsp;user stories that are as independent as possible. &lt;em>Independent&lt;/em>, in this context,&#xD;
    means that you are able to assign that user story to be completed in a defined period of time with as little dependency&#xD;
    on other stories as it is feasible to have. You may realize that completely removing dependencies is not only&#xD;
    impractical for some types of applications, but also undesirable. In some cases, dependencies may make sense. For&#xD;
    example, the &quot;Forgot user ID and password&quot; user story depends on the existence of the &quot;Log in to the system&quot; user&#xD;
    story. In this case, it makes sense to group stories into themes, which are a better way to plan for and develop&#xD;
    together those user stories that have some level of&amp;nbsp;expected dependency. (See the definition of themes in&amp;nbsp;&lt;a class=&quot;elementLink&quot; href=&quot;./../../../practice.tech.user_story_driven_dev.base-ibm/guidances/concepts/epics_and_themes_F9086951.html&quot; guid=&quot;_QtScMD5xEd6FxpOwnkUDmw&quot;>Epics and Themes&lt;/a>.)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Another aspect of user stories being independent is to make sure that there is no functionality captured by more than&#xD;
    one user story, which helps avoid that redundant work is done&amp;nbsp;by two or more&amp;nbsp;team members.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Negotiable&amp;nbsp;&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Identified user stories&amp;nbsp;each contain a short description of a user performing something in the system-to-be to&#xD;
    achieve a goal. This description is initially at a low level of precision,&amp;nbsp;and by no means should be seen as a&#xD;
    contract. It is a reminder that we need to communication continually with stakeholders to understand the stories better&#xD;
    and refine their details, based on the dialog. The trick is to capture just the right amount of detail, which may be&#xD;
    constrained by&amp;nbsp;subjective interpretation. A good sign that a user story has too much detail, too early, is when&#xD;
    the team assumes that they already know all they need to know to develop&amp;nbsp;the story without further communication&#xD;
    with stakeholders.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As stakeholders add details to stories, team members can capture high-level design decisions to include in the stories,&#xD;
    as well as elements that are candidate for user interfaces. But stories need to remain works-in-progress and&#xD;
    negotiable. This means that when a team member is developing&amp;nbsp;a user story, if she decides&amp;nbsp;there is a better&#xD;
    way to implement it (despite of the details captured in the user story) and still&amp;nbsp;achieve the stakeholders goals,&#xD;
    that should be option, and the stakeholders should be open to negotiating that alternative.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Valuable&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This might mean: User stories need to be valuable to stakeholders. But that raises the question of &quot;Which stakeholders?&#xD;
    Users or owners of the system?&quot; That depends. Some stories are written with the end user in mind, and some&amp;nbsp;may&#xD;
    be&amp;nbsp;written with other types of roles in mind. Therefore, a better statement would be: user stories need to be&#xD;
    valuable to user roles, whomever those roles represent. The easiest way to adhere to this is to write the user story&#xD;
    from a business perspective, rather than a technology perspective, and to use natural language.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    One caveat about capturing nonfunctional requirements (such as performance or availability) as user stories: These&#xD;
    typically affect many functional user stories and should be worded in a way that expresses that dependency. See&amp;nbsp;&lt;a class=&quot;elementLink&quot; href=&quot;./../../../practice.tech.user_story_driven_dev.base-ibm/guidances/guidelines/handling_nf_req_1339874.html&quot; guid=&quot;_3uuq0D9KEd6kc5DY7OkMEA&quot;>Handling Nonfunctional Requirements&lt;/a> for more information.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    From a development standpoint,&amp;nbsp;the resulting implementation also needs to&amp;nbsp;show value to stakeholders. It is&#xD;
    expected that developers&amp;nbsp;will implement a complete pass&amp;nbsp;through all layers of the application. For example,&#xD;
    if a developer implements all of the database access interfaces at once, this implementation may show nothing of value&#xD;
    to an end user. On the other hand, there is much more value from a user standpoint if a developer implements a user&#xD;
    story that &quot;cuts a vertical slice&quot;&amp;nbsp;across the various layers of the application, meaning that the developer is&#xD;
    really implementing user interface, business logic, and database access to support that user story.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Estimable&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Valuable, agreed upon, and right-sized stories should be estimable - something that you can use as a basis for an&#xD;
    estimate. Failure in estimating user stories size often leads to failure to deliver the solution with the value that&#xD;
    stakeholders expect.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There are are different reasons that it might be difficult to estimate user stories size. For example, the user&#xD;
    stories&amp;nbsp;might be too broad; they might need to be broken down into smaller stories or development tasks that are&#xD;
    more granular and easy to prioritize and estimate. Another example: the team may lack&amp;nbsp;information or knowledge&#xD;
    about the domain or technology to be&amp;nbsp;used, thus they can't provide an estimate for user stories size until they&#xD;
    have access to a domain expert or can investigate the new technology to be used.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Small&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    As mentioned previously, &quot;small&quot; stories are easier to estimate.&amp;nbsp;They should&amp;nbsp;also be able to be developed&#xD;
    within a reasonably short time frame (typically with one person working for a few days to a couple of weeks), to&#xD;
    provide value to stakeholders as soon as feasible.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The question is: how big is &lt;em>small&lt;/em>? There is no right or wrong&amp;nbsp;answer here, but as a general rule, there&#xD;
    are indicators of a user story being too big. If the team has difficulty in&amp;nbsp;estimating size and effort of a user&#xD;
    story, that might mean that the story needs to be broken down into smaller stories or development tasks for a more&#xD;
    accurate estimate to be provided. If&amp;nbsp;it would take more than a month for&amp;nbsp;one person to&amp;nbsp;develop the user&#xD;
    story, that's another indicator the story needs to be broken down.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Not all stories are broken down early in a project, even if it seems that they need to be. Many larger&#xD;
    stories&amp;nbsp;(also called &lt;em>epics&lt;/em>), remain on the work items list&amp;nbsp;as they are until it is time to develop&#xD;
    them. At that time, the team discusses the need to break them down for the purposes of planning, estimating, and&#xD;
    development. (Learn more about epics in &lt;a class=&quot;elementLink&quot; href=&quot;./../../../practice.tech.user_story_driven_dev.base-ibm/guidances/concepts/epics_and_themes_F9086951.html&quot; guid=&quot;_QtScMD5xEd6FxpOwnkUDmw&quot;>Epics and Themes&lt;/a>.)&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Testable&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Good&amp;nbsp;user stories&amp;nbsp;should be&amp;nbsp;able to be tested and validated, and this needs to be true even before&#xD;
    development begins. Understanding how to test a user story means that the user story is&amp;nbsp;understood, the value&#xD;
    stakeholders want out of it is clear, and we know when development is successfully finished. Discuss with stakeholders&#xD;
    - and capture in each user story - the conditions that will make the user story considered fully developed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In general, larger user stories, such as epics, are harder to test because of their size or complexity. Stories that&#xD;
    represent nonfunctional requirements also may be hard to test, because there needs to be a clear, quantitative&#xD;
    definition of test&amp;nbsp;conditions. For example, define a test scenario that says &quot;the administrative report needs to&#xD;
    run in 3 seconds or less,&quot; rather than saying &quot;the administrative report needs to run fast.&quot;&lt;br />&#xD;
    &lt;br />&#xD;
    &amp;nbsp;&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
