<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-BpXpfca_Ydzy24QuYl3USQ" name="new_guideline,_VZVBkL2EEdyIDoD2Ql5LMw" guid="-BpXpfca_Ydzy24QuYl3USQ" authors="Monvorath Phongpaibul" changeDate="2012-09-25T15:05:17.887-0700" version="7.2.0">
  <mainDescription>&lt;h3>&#xD;
    Purpose&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This metric helps the team understand whether their testing efforts are adequate by tracking how much of the code has&#xD;
    been tested.&amp;nbsp;There are several coverage metrics to analyze&amp;nbsp;code coverage. For example, statement coverage&#xD;
    measures the percentage of source line of code (SLOC) that have been exercised by a test suite. Function coverage&#xD;
    measures the&amp;nbsp;percentage of functions in the source code that have been tested. Condition coverage measures the&#xD;
    percentage of the evaluation points that have been executed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Note:&lt;/strong> A high percentage of code coverage is only an indicator of robust developer testing. Your team&#xD;
    could use a variety of different developer testing techniques (test-first, traditional unit testing, white-box testing,&#xD;
    and so on)&amp;nbsp;to achieve high test coverage.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Definition&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A best practice is to use both statement coverage and condition coverage, because function coverage can be too coarse a&#xD;
    metric.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Statement Coverage (SC)&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    SC = S-RUN / S-TOTAL* 100&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Count: S-RUN = Source lines of code executed by the test suite for a unit of code&lt;br />&#xD;
    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; S-TOTAL = Total source lines of code in the unit&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Condition Coverage (CC)&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    CC = C-RUN / C-TOTAL * 100&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Count: C-RUN = Number of evaluation points executed by the test suite for a unit of code&lt;br />&#xD;
    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; C-TOTAL = Total evaluation points in the unit&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following example has four possible evaluation points. If a test that only has &lt;code>x &amp;gt;= 100&lt;/code> as&#xD;
    &lt;code>true&lt;/code>, this will result in 25% condition coverage.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;codeSample&quot;>&#xD;
    &lt;!-- START NON-TRANSLATABLE -->if (x &amp;gt;= 100) or (y &amp;gt;=100) then&amp;nbsp;&lt;br />&#xD;
    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;print(&quot;Do something&quot;)&lt;br />&#xD;
    else&lt;br />&#xD;
    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; print(&quot;Do something else&quot;); &lt;!-- END NON-TRANSLATABLE -->&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This kind of coverage helps identify:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Defects in function calls that occur as part of a conditional expression&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Errors in the conditional expressions themselves.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Analysis&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Strategies such as test-first&amp;nbsp;or rigorous white-box testing&amp;nbsp;yields very high test coverage percentages,&#xD;
    because the developers write the tests immediately before or after the code is written. If you discover a low&#xD;
    percentage of statement coverage, your team is not doing rigorous developer testing.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Condition coverage is an additional metric to ensure that the tests are sufficiently covering the code.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Metrics Pitfalls&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Code coverage is not a guarantee of adequate testing. The objective of these metrics is only to assure that code&#xD;
        has been executed. The person developing and running the tests also needs to ensure that the results are correct,&#xD;
        and that the code meets the requirements.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Additional Reading&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;http://www.ibm.com/developerworks/java/library/j-cq01316/index.html&quot; target=&quot;_blank&quot;>In pursuit of code&#xD;
        quality: Don't be fooled by the coverage report&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        What lies beneath -- Discovering untested code&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;http://www.ibm.com/developerworks/java/library/j-cobertura/&quot; target=&quot;_blank&quot;>Measure test coverage with&#xD;
        Cobertura&lt;/a>&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
