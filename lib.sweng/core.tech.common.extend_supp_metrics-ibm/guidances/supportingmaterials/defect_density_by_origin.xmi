<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-e4tgmLExwCciGdrQw42Obw" name="new_supporting_material,_tyWv8NdmEd60WbHkY9gMng" guid="-e4tgmLExwCciGdrQw42Obw" changeDate="2010-10-20T09:36:30.104-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Purpose&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Using this metric, a team can establish links between defects and specific process activities and their outputs (e.g.&#xD;
    architecture, requirements, design, code, test). When the source of the defect is known, a fix can be implemented that&#xD;
    has the potential to prevent future defects associated with that source. Capturing defects early in the lifecycle is a&#xD;
    means of defect prevention for later phases of the lifecycle when correction is more expensive.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Analyzing Defect Density by Origin trends helps a team identify process improvements for each activity that can prevent&#xD;
    the injection of similar defects in the future. This can help teams and organizations improve in areas such as cost,&#xD;
    quality, and time to value.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Definition&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In order to associate defects with their source of origin it is necessary to implement a classification system. &lt;a href=&quot;http://www.research.ibm.com/softeng/ODC/DETODC.HTM#impinstall&quot; target=&quot;_blank&quot;>IBM's Orthogonal Defect&#xD;
    Classification&lt;/a> is a framework for categorizing each defect by mutually exclusive attributes. These attributes are&#xD;
    used to establish patterns helpful for root cause analysis. The Target attribute represents the high level identity of&#xD;
    the entity that was fixed. This is considered to be the source of the defect (e.g. architecture, design, code,&#xD;
    requirement)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Count: Number of identified defects, grouped by source&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Analysis&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Use a bar chart or grouped bar chart to show the number of defects associated with each source. A stacked bar chart can&#xD;
    be used to additionally monitor by status. To show trends over time, use a series of bars, or a line chart. Plot by&#xD;
    iteration or by phase.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Defect source distribution varies over time, and provides an indication of where development stands in the lifecycle.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Expected trend&lt;/strong> - Ideally, most architecture defects are identified in very early iterations, tapering&#xD;
    off to very few in the last half of the lifecycle with none identified at the end. Requirements defects also peak early&#xD;
    in the lifecycle tapering off with a few peaks and valleys to the end. Design defects peak a bit later than&#xD;
    architecture but taper off at a slower rate through the second half of the lifecycle. Code and test defects peak later&#xD;
    in the process.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Monitor changes in the distribution of defects throughout the lifecycle. Set targets based on development approach and&#xD;
    the level of uncertainty in the project. Monitor unexpected peaks to identify issues with specific artifacts or&#xD;
    activities, and analyze for potential process improvements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For example:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        If a high number of requirements-based defects are found late in the lifecycle, the team should assess their&#xD;
        requirements elicitation and traceability processes and tools. If a high number of defects are traced to a specific&#xD;
        requirement, there are likely quality issues with that requirement that need to be addressed.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        When a high number of architecture defects are identified, the team should perform sufficient analysis to prevent&#xD;
        costlier defects associated with the architecture from arising late in the lifecycle.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Frequency and reporting&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Defect classification should begin in the first iteration, and results reviewed by the team in each iteration&#xD;
    assessment. Stakeholders should review the data as each phase milestone is reached. The data is also reviewed at the&#xD;
    end of each release as an input to planning for the next release.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Trend reports from projects across the organization can be rolled up to the organization level and tracked over time as&#xD;
    process improvements are introduced.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Collection and reporting tools&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    IBM&amp;reg; Rational&amp;reg; ClearQuest&amp;reg; collects Defect Density by Origin data. It is necessary to implement custom attributes to&#xD;
    support the Orthogonal Defect Classification framework. IBM&amp;reg; Rational&amp;reg; Quality Manager&amp;reg; is also used to collect data&#xD;
    for this metric.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Assumptions and prerequisites&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A semantic classification of defects is established and well understood by the team.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Upon closure, each defect is assigned a Target value to associate it with its source&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The team has implemented effective test processes with sufficient coverage to identify defects associated with all&#xD;
        sources&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Pitfalls, advice, and countermeasures&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Team members must agree on the source of each defect. As each defect is classified, there must be a clear&#xD;
        indication of something missing or incorrect in a specific artifact/ source.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Defect classification provides fast feedback to the team, allowing them to address quality issues with very&#xD;
        specific artifacts and activities early in the process.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It is essential for results to feed back into the process in order to drive improvement. Without this key step,&#xD;
        other projects in the organization cannot learn from previous defect patterns and take action to prevent the same&#xD;
        mistakes happening in the future. Use the metric to monitor process improvements as they are introduced.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A lack of consistency and discipline in classifying defects can lead to skewed results, making trend analysis&#xD;
        useless.&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
