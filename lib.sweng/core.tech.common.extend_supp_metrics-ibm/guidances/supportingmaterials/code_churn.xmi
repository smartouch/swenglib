<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-SU9JqBrwlQGZPEt8UOv0lg" name="new_supporting_material,_rJwuEORAEd65XvmnNaE_pw" guid="-SU9JqBrwlQGZPEt8UOv0lg" changeDate="2010-09-29T14:08:29.473-0600" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Purpose&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Code Churn measures the periodic (daily, weekly) count of change per source lines of code (SLOC) in order to forecast&#xD;
    how difficult it may be to maintain and extend it.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Definition&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Code Churn = Total SLOC added, removed or modified in a reporting period. Group churn by component for more&#xD;
    fine-grained analysis.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Analysis&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A good indication of when the time has arrived to assess the capability of a solution to continue to deliver the&#xD;
    intended business service is the level of effort required to maintain and extend it. If it is becoming necessary to&#xD;
    modify increasingly larger portions of the source code in order for it to continue to deliver value, this indicates&#xD;
    that the time is approaching to consider modernizing the application.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If Code Churn is trending upwards instead of holding steady or declining, it is good practice to also analyze the&#xD;
    impact of the modifications. If both the size and scope of the modifications are expanding into more involved&#xD;
    architectural changes, this strengthens the case for considering a health assessment or similar review to determine&#xD;
    whether it is time to consider new approaches such as re-implementing, re-engineering or re-architecting the solution&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Frequency and reporting&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Code Churn is best observed as a trend, captured from a successive series of packages over time.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Collection and reporting tools&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Code Churn is captured in several ways. The most straightforward is by maintaining a running tally of number of changed&#xD;
    SLOC per work item. The actual counts of changed SLOC's can be derived from the DIFF tool in IBM&amp;reg; Rational&amp;reg; ClearCase&amp;reg;&#xD;
    and from the Compare Editor in IBM&amp;reg; Rational&amp;reg; Developer for System z&amp;reg;&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Pitfalls, advice, and countermeasures&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The citations below offer suggestions and advice for the significance of Code Churn as a component in determining an&#xD;
    application modernization strategy. The key consideration is that it is important to be able to anticipate and plan for&#xD;
    modernizing an application portfolio well in advance. Effective monitoring of code churn can help you see the problem&#xD;
    before it becomes a crisis.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There have been many investigations into using code churn as a means to predict and characterize the state of complex&#xD;
    software systems. A few citations are shown below:&lt;br />&#xD;
    &lt;br />&#xD;
    J.C. Munson, S.G. Elbaum, &quot;Code Churn: A Measure for Estimating the Impact of Code Change,&quot; icsm, pp.24, 14th IEEE&#xD;
    International Conference on Software Maintenance (ICSM'98), 1998&lt;br />&#xD;
    &lt;br />&#xD;
    Gregory A. Hall, John C. Munson, &quot;Software evolution: code delta and code churn&quot; Journal of Systems and Software Volume&#xD;
    54, Issue 2, 15 October 2000, Pages 111-118&lt;br />&#xD;
    Special Issue on Software Maintenance&lt;br />&#xD;
&lt;/p>&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
