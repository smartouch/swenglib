<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-3RnvF2UrrHfxIrR4psmLRQ" name="cyclomatic_complexity,_3xe2wMyKEd6AlLazTePGRg" guid="-3RnvF2UrrHfxIrR4psmLRQ" changeDate="2010-01-08T10:36:52.906-0800" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Purpose&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Cyclomatic complexity is an example of static code analysis in which the number of distinct paths through a given code&#xD;
    module is used as a measure of code complexity. High cyclomatic complexity is an indicator of potentially low quality&#xD;
    code that is difficult to test and maintain.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Monitoring code complexity provides several benefits:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Can be calculated immediately during development cycles so corrective action can be taken as increased complexity&#xD;
        is introduced. Highlights areas of code that may be difficult to understand, test, and maintain. Helps prioritize&#xD;
        areas of code that need refactoring.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Indicator of needed test effort in terms of resources and the number of test cases required for thorough coverage&#xD;
        of the code. Reducing complexity reduces test effort.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Helps identify candidate modules requiring team code review&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Useful input to effort estimations for maintenance&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Can be used to help determine whether a system should be maintained or redesigned&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Useful for comparing projects across the organization in terms of quality and maintainability&lt;br align=&quot;left&quot; />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Definition&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Following is a simple method of calculating cyclomatic complexity. It can be computed at the method, class, and package&#xD;
    level.&lt;br />&#xD;
    &lt;br />&#xD;
    Cyclomatic Complexity = Number of decision points + 1&lt;br />&#xD;
    &lt;br />&#xD;
    Decision points are conditional statements such as Select Case, If...Then, For..Next, While..Wend/ End, and&#xD;
    Catch.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Analysis&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The table below provides general guidance for interpreting results&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br />&#xD;
&lt;table style=&quot;WIDTH: 528px; HEIGHT: 112px&quot; title=&quot;&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; width=&quot;528&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                &lt;strong>Cyclomatic Complexity&lt;/strong>&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                &lt;strong>Interpretation&lt;/strong>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                0-10&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Simple, low risk&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                11-20&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Moderately complex, medium risk&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                21-50&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Complex, high risk&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                50+&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Highly complex, not testable, very high risk&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&lt;br />&#xD;
&lt;br />&#xD;
&lt;p>&#xD;
    When a particular module has high cyclomatic complexity, confirm associated test coverage to determine the risk of&#xD;
    unidentified defects. Evaluate the need to refactor in order to reduce complexity, creating more testable,&#xD;
    understandable, and maintainable code.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;span     style=&quot;FONT-FAMILY: Arial; FONT-SIZE: 10pt; mso-fareast-font-family: Batang; mso-fareast-language: JA; mso-ansi-language: EN-US; mso-bidi-language: AR-SA&quot;>This&#xD;
    metric can also be used to monitor adoption of Test Driven Development and Evolutionary Design practices. Developing&#xD;
    tests before writing code typically results in simple code that is easy to test. Evolutionary design encourages&#xD;
    refactoring providing opportunities to reduce complexity.&lt;/span>&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Frequency and reporting&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Developers can monitor cyclomatic complexity in each development cycle. At the team level, this measurement can be&#xD;
    introduced into daily builds. High complexity code can be reported and flagged for code review.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Collection and reporting tools&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Many tools that integrate with developers' integrated development environment are available to automate the process of&#xD;
    calculating cyclomatic complexity. Teams adopting continuous integration practices and tools can include the&#xD;
    measurement in their automated build process, posting results to a dashboard for review during daily meetings and&#xD;
    iteration reviews.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    IBM&amp;reg; Rational&amp;reg; Asset Analyzer&amp;reg; reports on this metric.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Pitfalls, advice, and countermeasures&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        There is no direct, consistent relationship between complexity and lines of code.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Examine trade-offs (such as&amp;nbsp;performance, unstructured logic) when reducing complexity&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        This metric assumes that all branches have the same weight and impact on complexity, which is typically not the&#xD;
        case. Take this into consideration when monitoring cyclomatic complexity, as well as any complex expressions&#xD;
        associated with a particular branch.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        When writing a particular test is difficult, it could be an indication that the code under test is overly complex.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        This metric is also useful for teams of varying skill levels to determine where coaching/ mentoring might be&#xD;
        helpful&lt;br />&#xD;
        &lt;br />&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
