<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-M3S7Bn0TUPYXf0vdam2SXg" name=",_974QwNNdEdyK3eAUnxZQQg" guid="-M3S7Bn0TUPYXf0vdam2SXg" authors="Monvorath Phongpaibul" changeDate="2010-09-27T18:52:06.140-0600" version="7.2.0">
  <mainDescription>&lt;h3>&#xD;
    Purpose&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Teams monitor this metric throughout the lifecycle in order to understand their level of developer testing. Defects&#xD;
    caught during the development cycle are less costly to fix than those identified later.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Ratio of Test Code to System Code metric measures the amount of test code relative to system code in terms of the&#xD;
    number of methods. Constant developer testing should result in at least one test case for each method, and almost&#xD;
    always more than one. As a result, this metric should yield a high value (always more than one, or &amp;gt;1), even in the&#xD;
    early stages of the development lifecycle.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Definition&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Ratio of Test Code to System Code = Total Number of Test Methods / Total Number of System Methods&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Analysis&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The number of test methods always continues to grow if developer testing is performed while code is written (rather&#xD;
    than waiting to test during integration). The number of test methods should be at least two times the number of system&#xD;
    methods, because for each system method developed, there should be at least a positive test case and a negative test&#xD;
    case. A higher number for this metric indicates a higher level of developer testing.&lt;br />&#xD;
    &lt;br />&#xD;
    The following are example scenarios that you can observe using this metric.&lt;br />&#xD;
    &lt;br />&#xD;
    &lt;strong>Expected trend&lt;/strong> - The ratio of test cases to methods should be more than one(1), and should increase&#xD;
    over time. In the early stages of development, developers start writing a test case, write code for the particular test&#xD;
    case, run the test, find errors, and fix the code. At this time, you should expect the number of test methods to be&#xD;
    about the same as the number of system methods. The number of system methods should not be greater than the number of&#xD;
    tests (which means that the result of this metric is always greater than one, or &amp;gt;1).&lt;br />&#xD;
    &lt;br />&#xD;
    Later in the development lifecycle, the test methods and system methods continue to grow. There are more test cases&#xD;
    written for each system method. At this stage, you would presume that the number of test methods is at least two to&#xD;
    three times larger than the number of system methods.&lt;br />&#xD;
    &lt;br />&#xD;
    &lt;strong>Coding without writing a test&lt;/strong> - At any point during the development lifecycle, if the ratio of test&#xD;
    code to system code is less than one (&amp;lt;1), this is a strong indicator that the code has been written without writing&#xD;
    the test cases.&lt;br />&#xD;
    &lt;br />&#xD;
    At any point during the development lifecycle, if the ratio of test code to system code drops dramatically from the&#xD;
    last assessment (for example, from five times to two times), it is a sign that source code has been added without new&#xD;
    test cases. The team should investigate ways to improve the ratio of tests to methods for the next assessment.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Frequency and reporting&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Teams should review their ratio of test code to system code at the end of every iteration to help identify trends.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;br />&#xD;
    Collection and reporting tools&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In order to collect the required data, the team must implement an annotation or packaging system to identify code as&#xD;
    either &quot;test&quot; or &quot;system&quot; code.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Pitfalls, advice, and countermeasures&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        If the source code is not growing as fast as test code, it may be due to refactoring. New and changed code can then&#xD;
        help you determine whether the team is testing continuously. If the new and changed code remains relatively&#xD;
        constant, the team is probably refactoring the code.&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
