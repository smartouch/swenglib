<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-wzoGI91FgEioF2KclXE-RQ" name="new_supporting_material,_BbzkgJW4Ed6KwMyxAyJvoA" guid="-wzoGI91FgEioF2KclXE-RQ" changeDate="2011-06-29T14:42:40.453-0700" version="7.5.0">
  <mainDescription>&lt;h3>&#xD;
    Purpose&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Requirements churn refers to changes to the requirements after they have been implemented (especially those that have&#xD;
    significant impact on architectural decisions), indicating their stability. Some changes are inevitable as the team's&#xD;
    understanding of the problem domain is refined, or due to changes in the environment. However, poorly defined&#xD;
    requirements are another cause of churn, and they can seriously impact the project schedule. Excessive changes to the&#xD;
    requirements, especially late in the lifecycle, can lead to failed or canceled projects. Less extreme cases can result&#xD;
    in schedule slippage, reduced scope, increased cost, or low customer satisfaction.&amp;nbsp;&amp;nbsp;&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Definition&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Count: Total number of changes to requirements in a given period. Group by type (e.g. Feature, Supplementary, Use Case)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Considering measuring percentage of changes as well to gain a better understanding of the size of changes compared to&#xD;
    the total number of changes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To monitor the amount of churn in each component, group requirements changes by component.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Analysis&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A good way to monitor requirements churn is to use a trend line. Plot the number of changes on the Y axis, and the&#xD;
    iterations on the X axis.&lt;br />&#xD;
    &lt;br />&#xD;
    &lt;strong>Expected trend&lt;/strong> - Generally, changes are easier to deal with early in the project, so the ideal trend&#xD;
    line would decrease over time. This indicates that the team is working to clarify requirements in each iteration and&#xD;
    has a good understanding of the problem domain.Changes are expected in beginning of lifecycle while system is evolving.&#xD;
    Change should be stabilized and start to decrease during the construction phase.&lt;br />&#xD;
    &lt;br />&#xD;
    &lt;strong>Upward slope&lt;/strong> - The upward slope signifies increasing requirements volatility. The team should analyze&#xD;
    the source and rationale of each change. Primary causes of requirements change and possible solutions are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Changes in project knowledge - revisit the requirement and related items and update based on the new knowledge&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Conflicts between needs, goals, and requirements - brainstorm and prioritize the requirements in order to correct&#xD;
        and compromise the discrepancy.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Changes in the organizational level -&amp;nbsp;developing iteratively&amp;nbsp;will help the team manage&amp;nbsp;volatility&#xD;
        and achieve concurrence on the requirements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Unclear or too specific requirements - Requirements should be clarified and solidified but flexible enough to&#xD;
        accommodate the architectural design. Techniques like defining common terminologies, User Story or Storyboard and&#xD;
        Effective Requirement Reviews should be used.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        IUnrealistic requirements - develop a product representation such as a prototype or simulation to&#xD;
        detect&amp;nbsp;unrealistic requirements as early as possible&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Inappropriate set of stakeholders - learn more on techniques in Identify Stakeholders&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;strong>Dramatic upward slope at the end of the lifecycle&lt;/strong> - Any increase in the instability of requirements in&#xD;
    the latter half of the lifecycle is a warning that there is a poor understanding of business needs or software&#xD;
    requirements. This may impact the team's ability to deliver the needed capabilities with quality and predictability. It&#xD;
    can also introduce serious problems for maintainability. Confirm that a requirements management process is in place&#xD;
    that is well understood by the team and stakeholders.&lt;br />&#xD;
    &lt;br />&#xD;
    If impact is dramatic, the release date or scope may need adjustment. Excessive requirements churn requires corrective&#xD;
    action and often indicates a broken requirements management process.&lt;br />&#xD;
    &lt;br />&#xD;
    For teams adopting Iterative Development, requirements churn is expected in the early to middle phases of the&#xD;
    lifecycle. This demonstrates that the team is getting feedback from their stakeholders. However, churn that remains&#xD;
    high throughout the remainder of the lifecycle is an indication that there is a lack of agreement on the system&#xD;
    requirements. However, requirement churn that is caused by foreseeing the future system too far ahead or in&amp;nbsp;too&#xD;
    much&amp;nbsp;detail could create unnecessary requirement churn. Mitigate this by not planning too far ahead or having&#xD;
    short release cycles.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;Requirements Churn&quot; src=&quot;./resources/requirements_churn.gif&quot; width=&quot;440&quot; height=&quot;269&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;em>Requirements Churn Chart, where the vertical axis represents the total number of changes&lt;/em>&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Frequency and reporting&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Requirements churn should be monitored in each iteration to help identify trends. When results indicate a problem, the&#xD;
    team should report results to stakeholders in order to take any necessary corrective actions.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Collection and reporting tools&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Data can be collected from various tools such as IBM&amp;reg; Rational&amp;reg; ReqPro&amp;reg;, IBM&amp;reg; Rational&amp;reg; Team Concert&amp;reg;, IBM&amp;reg; Rational&amp;reg;&#xD;
    DOORS&amp;reg;, and IBM&amp;reg; Rational&amp;reg; Requirements Composer&amp;reg;. IBM&amp;reg; Rational&amp;reg; Insight&amp;reg; reports this metric.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Assumptions and prerequisites&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The team must determine what constitutes a change. This can be a subtle difference, in that some changes are simply&#xD;
        clarification or further elaboration.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        All changes are documented, and the date of change noted&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Pitfalls, advice, and countermeasures&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A requirement is considered &quot;implemented&quot; as soon as it is tested and delivered for integration&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        When release cycles are shortened (reducing the scope of each release) their is less risk of requirements churn.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
