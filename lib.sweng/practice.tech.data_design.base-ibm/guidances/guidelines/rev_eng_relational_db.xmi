<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-XvYuIXc9_HIalldPZA_stA" name="reverse_engineering_relational_databases,_iqQPUAo-Edygr55FhBZqVw" guid="-XvYuIXc9_HIalldPZA_stA" changeDate="2007-08-14T00:29:12.000-0700" version="7.1.0">
  <mainDescription>&lt;h3>
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>&lt;/a>Introduction
&lt;/h3>
&lt;p>
    This guideline describes methods for mapping persistent classes in the design into tables in the data model.
&lt;/p>
&lt;h3>
    &lt;a id=&quot;Transform Design Model Elements to Data Model Elements&quot;
    name=&quot;Transform Design Model Elements to Data Model Elements&quot;>&lt;/a>Transforming Design Elements to Data Model Elements
&lt;/h3>
&lt;p>
    Persistent classes from the design can be transformed to tables in the&amp;nbsp;data model.&amp;nbsp;The table below shows a
    summary of the mapping between design elements and data model elements.
&lt;/p>
&lt;div align=&quot;center&quot;>
    &lt;table
    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;
     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;85%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>
        &lt;tbody>
            &lt;tr>
                &lt;th scope=&quot;col&quot; width=&quot;50%&quot;>
                    &lt;p class=&quot;Text&quot;>
                        &lt;b>Design Element&lt;/b>
                    &lt;/p>
                &lt;/th>
                &lt;th scope=&quot;col&quot; width=&quot;50%&quot;>
                    &lt;p class=&quot;Text&quot;>
                        &lt;b>Corresponding Data Model Element&lt;/b>
                    &lt;/p>
                &lt;/th>
            &lt;/tr>
            &lt;tr>
                &lt;td width=&quot;50%&quot;>
                    Class
                &lt;/td>
                &lt;td width=&quot;50%&quot;>
                    Table
                &lt;/td>
            &lt;/tr>
            &lt;tr>
                &lt;td width=&quot;50%&quot;>
                    Attribute
                &lt;/td>
                &lt;td width=&quot;50%&quot;>
                    Column
                &lt;/td>
            &lt;/tr>
            &lt;tr>
                &lt;td width=&quot;50%&quot;>
                    &lt;p class=&quot;Text&quot;>
                        Association
                    &lt;/p>
                &lt;/td>
                &lt;td width=&quot;50%&quot;>
                    &lt;p class=&quot;Text&quot;>
                        Non-Identifying Relationship
                    &lt;/p>
                &lt;/td>
            &lt;/tr>
            &lt;tr>
                &lt;td width=&quot;50%&quot;>
                    &lt;p class=&quot;Text&quot;>
                        Association Class
                    &lt;/p>
                &lt;/td>
                &lt;td width=&quot;50%&quot;>
                    &lt;p class=&quot;Text&quot;>
                        Intersection Table
                    &lt;/p>
                &lt;/td>
            &lt;/tr>
            &lt;tr>
                &lt;td width=&quot;50%&quot;>
                    &lt;p class=&quot;Text&quot;>
                        Composite Aggregation
                    &lt;/p>
                &lt;/td>
                &lt;td width=&quot;50%&quot;>
                    &lt;p class=&quot;Text&quot;>
                        Identifying Relationship
                    &lt;/p>
                &lt;/td>
            &lt;/tr>
            &lt;tr>
                &lt;td width=&quot;50%&quot;>
                    &lt;p class=&quot;Text&quot;>
                        Many-to-Many Association
                    &lt;/p>
                &lt;/td>
                &lt;td width=&quot;50%&quot;>
                    &lt;p class=&quot;Text&quot;>
                        Intersection Table
                    &lt;/p>
                &lt;/td>
            &lt;/tr>
            &lt;tr>
                &lt;td width=&quot;50%&quot;>
                    &lt;p class=&quot;Text&quot;>
                        Multiplicity
                    &lt;/p>
                &lt;/td>
                &lt;td width=&quot;50%&quot;>
                    &lt;p class=&quot;Text&quot;>
                        Cardinality
                    &lt;/p>
                &lt;/td>
            &lt;/tr>
            &lt;tr>
                &lt;td width=&quot;50%&quot;>
                    &lt;p class=&quot;Text&quot;>
                        Qualified Association
                    &lt;/p>
                &lt;/td>
                &lt;td width=&quot;50%&quot;>
                    &lt;p class=&quot;Text&quot;>
                        Intersection Table
                    &lt;/p>
                &lt;/td>
            &lt;/tr>
            &lt;tr>
                &lt;td width=&quot;50%&quot;>
                    Generalization (Inheritance)
                &lt;/td>
                &lt;td width=&quot;50%&quot;>
                    Separate Table
                &lt;/td>
            &lt;/tr>
        &lt;/tbody>
    &lt;/table>&lt;br />
&lt;/div>
&lt;h4>
    &lt;a id=&quot;Mapping Persistent Classes to Tables&quot; name=&quot;Mapping Persistent Classes to Tables&quot;>&lt;/a>Mapping Persistent Classes
    to Tables
&lt;/h4>
&lt;p>
    The persistent classes in the design represent the information that the system must store. Conceptually, these classes
    might resemble a relational design. (For example, the classes in the design might be reflected in some fashion as
    entities in the relational schema.) As a project moves from elaboration into construction, however, the goals of the
    design and the Relational Data Model diverge. This divergence is caused because the objective of relational database
    development is to normalize data, whereas the goal of the design is to encapsulate increasingly complex behavior. The
    divergence of these two perspectives-data and behavior-leads to the need for mapping between related elements in the
    two models.
&lt;/p>
&lt;p>
    In a relational database written in third normal form, every row in the tables-every &quot;tuple&quot;-is regarded as an object.
    A column in a table is equivalent to a persistent attribute of a class. (Keep in mind that a persistent class might
    have transient attributes.) Therefore, in the simple case in which there are no associations to other classes, the
    mapping between the two worlds is simple. The datatype of the attribute corresponds to one of the allowable datatypes
    for columns.
&lt;/p>
&lt;p class=&quot;exampleheading&quot;>
    Example
&lt;/p>
&lt;p class=&quot;example&quot;>
    The following class Customer:
&lt;/p>
&lt;p align=&quot;center&quot;>
    &lt;img height=&quot;154&quot; alt=&quot;Customer Class&quot;  src=&quot;resources/customer_class_figure.gif&quot; width=&quot;147&quot; />
&lt;/p>
&lt;p class=&quot;example&quot;>
    when modeled in the RDBMS would translate to a table called Customer, with the columns Customer_ID, Name, and Address.
&lt;/p>
&lt;p>
    An instance of this table can be visualized as:
&lt;/p>
&lt;p align=&quot;center&quot;>
    &lt;img height=&quot;118&quot; alt=&quot;Customer Table&quot;  src=&quot;resources/customer_table.gif&quot; width=&quot;428&quot; />
&lt;/p>
&lt;h4>
    &lt;a id=&quot;Persistent Attributes and Keys&quot; name=&quot;Persistent Attributes and Keys&quot;>Persistent Attributes and Keys&lt;/a>
&lt;/h4>
&lt;p>
    For each persistent attribute, questions must be asked to elicit additional information that will be used to
    appropriately model the persistent object in a relational&amp;nbsp;data model. &amp;nbsp;For example:
&lt;/p>
&lt;ul>
    &lt;li>
        Can this persistent attribute serve as a key or part of a key? Example: &quot;Attribute X, together with attribute Z,
        uniquely identifies the object.&quot; In the Customer table, the Customer_ID represents a primary key.
    &lt;/li>
    &lt;li>
        What are the minimum and maximum values for the attribute?
    &lt;/li>
    &lt;li>
        Will it be possible to search using this attribute as a key? It might, for instance, be part of a filter in a
        Select statement such as &quot;It is common to search for all instances where Y &amp;gt; 1000.&quot;
    &lt;/li>
    &lt;li>
        Does the attribute have a description such as &quot;attribute X is the number of retransmissions per 100 000 transmitted
        characters&quot;?
    &lt;/li>
    &lt;li>
        Does the attribute have possible numerical values and desired conversions between different numerical values?
    &lt;/li>
    &lt;li>
        Who is allowed to update the attribute? Example: &quot;T may only be changed by people in authority class nn.&quot;
    &lt;/li>
    &lt;li>
        Who is allowed to read the attribute? Examples: &quot;P may be read by people in authority classes yy and zz&quot; or &quot;&quot;P is
        included in views Vi and Vj.&quot;
    &lt;/li>
    &lt;li>
        Is there adequate information about volumes and frequencies? Examples: &quot;There are up to 50 000 occurrences of A&quot; or
        &quot;On average 2000 As are changed per day.&quot;
    &lt;/li>
    &lt;li>
        Is the attribute unique? Example: Only one person can have the same driver's license number.
    &lt;/li>
&lt;/ul>
&lt;h4>
    &lt;a id=&quot;Mapping Associations between Persistent Objects to the Data Model&quot;
    name=&quot;Mapping Associations between Persistent Objects to the Data Model&quot;>Mapping Associations Between Persistent
    Objects to the Data Model&lt;/a>
&lt;/h4>
&lt;p>
    Associations between two persistent objects are realized as foreign keys to the associated objects. A foreign key is a
    column in one table that contains the primary key value of the associated object.
&lt;/p>
&lt;p class=&quot;exampleheading&quot;>
    Example:
&lt;/p>
&lt;p class=&quot;example&quot;>
    Assume there is the following association between Order and Customer:
&lt;/p>
&lt;p align=&quot;center&quot;>
    &lt;img height=&quot;211&quot; alt=&quot;Customer Order Association&quot;  src=&quot;resources/customer_order_association.gif&quot; width=&quot;135&quot; />
&lt;/p>
&lt;p class=&quot;example&quot;>
    When this is mapped into relational tables, the result is an Order table and a Customer table. The Order table has
    columns for attributes listed, plus an additional column named Customer_ID that contains foreign-key references to the
    primary key of the associated row in the Customer table. For a given Order, the Customer_ID column contains the
    identifier of the Customer to whom the Order is associated. Foreign keys allow the RDBMS to join related information
    together.
&lt;/p>
&lt;h4>
    &lt;a id=&quot;Mapping Aggregation Associations to the Data Model&quot;
    name=&quot;Mapping Aggregation Associations to the Data Model&quot;>Mapping Aggregation Associations to the Data Model&lt;/a>
&lt;/h4>
&lt;p>
    Aggregation is also modeled using foreign key relationships.
&lt;/p>
&lt;p class=&quot;exampleheading&quot;>
    Example:
&lt;/p>
&lt;p class=&quot;example&quot;>
    Assume that there is the following association between Order and Line Item:
&lt;/p>
&lt;p align=&quot;center&quot;>
    &lt;img height=&quot;74&quot; alt=&quot;Order - Line Item&quot;  src=&quot;resources/order_line_item_association.gif&quot; width=&quot;343&quot; />
&lt;/p>
&lt;p class=&quot;example&quot;>
    When this is mapped into relational tables, the result is an Order table and a Line_Item table. The Line_Item table has
    columns for attributes listed, plus an additional column called Order_ID that contains a foreign-key reference to the
    associated row in the Order table. For a given Line Item, the Order_ID column contains the Order_ID of the Order with
    which the Line Item is associated. Foreign keys allow the RDBMS to optimize join operations.
&lt;/p>
&lt;p>
    In addition, it is important to implement a cascading delete constraint that provides referential integrity in
    the&amp;nbsp;data model.&amp;nbsp;Once this is accomplished, whenever the Order is deleted, all of their Line Items are deleted
    as well.
&lt;/p>
&lt;h4>
    &lt;a id=&quot;Modeling Inheritance&quot; name=&quot;Modeling Inheritance&quot;>Modeling Generalization Relationships&lt;/a> in the Data Model
&lt;/h4>
&lt;p>
    The standard relational&amp;nbsp;data model&amp;nbsp;does not support modeling inheritance in a direct way. A number of
    strategies can be used to model inheritance. These can be summarized as follows:
&lt;/p>
&lt;ul>
    &lt;li>
        Use separate tables to represent the super-class and sub-class. The sub-class table must include a foreign key
        reference to the super-class table. In order to instantiate a sub-class object, the two tables must be joined
        together. This approach is conceptually easy and facilitates changes to the model, but it often performs poorly due
        to the extra work.
    &lt;/li>
    &lt;li>
        Duplicate all inherited attributes and associations as separate columns in the sub-class table. This is similar to
        de-normalization in the standard relational data model.
    &lt;/li>
&lt;/ul>
&lt;h4>
    &lt;a id=&quot;Modeling Many-to-Many Associations&quot; name=&quot;Modeling Many-to-Many Associations&quot;>Modeling Many-to-Many
    Associations&lt;/a> in the Data Model
&lt;/h4>
&lt;p>
    A standard technique in relational modeling is to use an intersection entity to represent many-to-many associations.
    The same approach can be applied here: An intersection table is used to represent the association.
&lt;/p>
&lt;p class=&quot;exampleheading&quot;>
    Example:
&lt;/p>
&lt;p class=&quot;example&quot;>
    If Suppliers can supply many Products, and a Product can be supplied by many Suppliers, the solution is to create a
    Supplier/Product table. This table would contain only the primary keys of the Supplier and Product tables, and serve to
    link the Suppliers and their related Products. The Object Model has no analog for this table; it is strictly used to
    represent the associations in the relational Data Model.
&lt;/p>
&lt;h3>
    &lt;a id=&quot;Refine the Data Model&quot; name=&quot;Refine the Data Model&quot;>&lt;/a>Refining the Data Model
&lt;/h3>
&lt;p>
    Once the design classes have been transformed into tables and the appropriate relationships in the data model, the
    model is refined as needed to implement referential integrity and optimize data access through views and stored
    procedures. For more information, see&amp;nbsp; Guideline:&amp;nbsp;&lt;a class=&quot;elementLink&quot;
     href=&quot;GUID=093C356700000121BF92090D8DAA5B93;TYPE=guideline&quot;
    guid=&quot;_DNOdMAo9Edygr55FhBZqVw&quot;>Physical Database Design&lt;/a>
&lt;/p>
&lt;h3>
    &lt;b>&lt;a id=&quot;Forward-Engineering the Data Model&quot; name=&quot;Forward-Engineering the Data Model&quot;>Forward-Engineering the Data
    Model&lt;/a>&lt;/b>
&lt;/h3>
&lt;p>
    Most application design tools support the generation of Data Definition Language (DDL) scripts from&amp;nbsp;data
    models&amp;nbsp;and/or the generation of the database from the&amp;nbsp;data model. &amp;nbsp;Forward-engineering of the database
    needs to be planned as part of the overall application development and integration tasks.&amp;nbsp;The timing and frequency
    for forward-engineering the database from the data model depends on the specific project situation.&amp;nbsp;For new
    application development projects that are creating a new database, the initial forward-engineering might need to be
    done as part of the work to implement a stable architectural version of the application by the end of the elaboration
    phase.&amp;nbsp;In other cases, the initial forward-engineering might be done in early iterations of the construction
    phase.&amp;nbsp;
&lt;/p>
&lt;p>
    The types of model elements in the&amp;nbsp;data model&amp;nbsp;that can be forward-engineered vary, depending on the specific
    design tools and RDBMS used on the project.&amp;nbsp; In general, the major structural elements of the data model,
    including tables, views, stored procedures, triggers, and indexes can be forward-engineered into the database.
&lt;/p></mainDescription>
  <externalId xsi:nil="true"/>
  <keyConsiderations xsi:nil="true"/>
</org.eclipse.epf.uma:ContentDescription>
