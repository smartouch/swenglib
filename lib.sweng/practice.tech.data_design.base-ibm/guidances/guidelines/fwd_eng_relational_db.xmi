<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-eg1IEDtb_EhZUVOkQ7wcJw" name="forward_engineering_relational_databases,_cEZVoAo-Edygr55FhBZqVw" guid="-eg1IEDtb_EhZUVOkQ7wcJw" changeDate="2007-08-14T00:10:30.000-0700" version="7.1.0">
  <mainDescription>&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>&lt;/a>Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This guideline describes methods for mapping persistent design classes in the design into tables in the data model.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Transform Design Model Elements to Data Model Elements&quot;&#xD;
    name=&quot;Transform Design Model Elements to Data Model Elements&quot;>&lt;/a>Transforming Design Model Elements to Data Model&#xD;
    Elements&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Persistent classes from the design can be transformed to tables in the&amp;nbsp;data model.&amp;nbsp;The table below shows a&#xD;
    summary of the mapping between design elements and data model elements.&#xD;
&lt;/p>&#xD;
&lt;div align=&quot;center&quot;>&#xD;
    &lt;table&#xD;
    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;85%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>&#xD;
        &lt;tbody>&#xD;
            &lt;tr>&#xD;
                &lt;th scope=&quot;col&quot; width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        &lt;b>Design Model Element&lt;/b>&#xD;
                    &lt;/p>&#xD;
                &lt;/th>&#xD;
                &lt;th scope=&quot;col&quot; width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        &lt;b>Corresponding Data Model Element&lt;/b>&#xD;
                    &lt;/p>&#xD;
                &lt;/th>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    Class&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    Table&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    Attribute&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    Column&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Association&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Non-Identifying Relationship&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Association Class&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Intersection Table&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Composite Aggregation&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Identifying Relationship&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Many-to-Many Association&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Intersection Table&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Multiplicity&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Cardinality&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Qualified Association&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Intersection Table&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    Generalization (Inheritance)&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    Separate Table&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
        &lt;/tbody>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Mapping Persistent Classes to Tables&quot; name=&quot;Mapping Persistent Classes to Tables&quot;>&lt;/a>Mapping Persistent Classes&#xD;
    to Tables&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The persistent classes in the design represent the information that the system must store. Conceptually, these classes&#xD;
    might resemble a relational design. (For example, the classes in the&amp;nbsp;design might be reflected in some fashion as&#xD;
    entities in the relational schema.) As a project moves from elaboration into construction, however, the goals of the&#xD;
    design and the relational data model diverge. This divergence is caused because the objective of relational database&#xD;
    development is to normalize data, whereas the goal of the&amp;nbsp;design is to encapsulate increasingly complex behavior.&#xD;
    The divergence of these two perspectives-data and behavior-leads to the need for mapping between related elements in&#xD;
    the two models.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In a relational database written in third normal form, every row in the tables-every &quot;tuple&quot;-is regarded as an object.&#xD;
    A column in a table is equivalent to a persistent attribute of a class. (Keep in mind that a persistent class might&#xD;
    have transient attributes.) Therefore, in the simple case in which there are no associations to other classes, the&#xD;
    mapping between the two worlds is simple. The datatype of the attribute corresponds to one of the allowable datatypes&#xD;
    for columns.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    The following class Customer:&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;87&quot; alt=&quot;Customer Class&quot; src=&quot;resources/customer_class.gif&quot; width=&quot;130&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    when modeled in the RDBMS would translate to a table called Customer, with the columns Customer_ID, Name, and Address.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An instance of this table can be visualized as:&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;118&quot; alt=&quot;Customer Table&quot; src=&quot;resources/customer_table.gif&quot; width=&quot;428&quot; />&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Persistent Attributes and Keys&quot; name=&quot;Persistent Attributes and Keys&quot;>Persistent Attributes and Keys&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    For each persistent attribute, questions must be asked to elicit additional information that will be used to&#xD;
    appropriately model the persistent object in a relational data model. For example:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Can this persistent attribute serve as a key or part of a key? Example: &quot;Attribute X, together with attribute Z,&#xD;
        uniquely identifies the object.&quot; In the Customer table, the Customer_ID represents a primary key.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        What are the minimum and maximum values for the attribute?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Will it be possible to search using this attribute as a key? It might, for instance, be part of a filter in a&#xD;
        Select statement such as &quot;It is common to search for all instances where Y &amp;gt; 1000.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Does the attribute have a description such as &quot;attribute X is the number of retransmissions per 100 000 transmitted&#xD;
        characters&quot;?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Does the attribute have possible numerical values and desired conversions between different numerical values?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Who is allowed to update the attribute? Example: &quot;T may only be changed by people in authority class nn.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Who is allowed to read the attribute? Examples: &quot;P may be read by people in authority classes yy and zz&quot; or &quot;&quot;P is&#xD;
        included in views Vi and Vj.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Is there adequate information about volumes and frequencies? Examples: &quot;There are up to 50 000 occurrences of A&quot; or&#xD;
        &quot;On average 2000 As are changed per day.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Is the attribute unique? Example: Only one person can have the same driver's license number.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Mapping Associations between Persistent Objects to the Data Model&quot;&#xD;
    name=&quot;Mapping Associations between Persistent Objects to the Data Model&quot;>Mapping Associations Between Persistent&#xD;
    Objects to the Data Model&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Associations between two persistent objects are realized as foreign keys to the associated objects. A foreign key is a&#xD;
    column in one table that contains the primary key value of the associated object.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Assume there is the following association between Order and Customer:&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;211&quot; alt=&quot;Customer - Order Association&quot; src=&quot;resources/customer_order_association.gif&quot; width=&quot;135&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    When this is mapped into relational tables, the result is an Order table and a Customer table. The Order table has&#xD;
    columns for attributes listed, plus an additional column named Customer_ID that contains foreign-key references to the&#xD;
    primary key of the associated row in the Customer table. For a given Order, the Customer_ID column contains the&#xD;
    identifier of the Customer to whom the Order is associated. Foreign keys allow the RDBMS to join related information&#xD;
    together.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Mapping Aggregation Associations to the Data Model&quot;&#xD;
    name=&quot;Mapping Aggregation Associations to the Data Model&quot;>Mapping Aggregation Associations to the Data Model&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Aggregation is also modeled using foreign key relationships.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Assume that there is the following association between Order and Line Item:&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;74&quot; alt=&quot;Order - Line Item Association&quot; src=&quot;resources/order_line_item_association.gif&quot; width=&quot;343&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    When this is mapped into relational tables, the result is an Order table and a Line_Item table. The Line_Item table has&#xD;
    columns for attributes listed, plus an additional column called Order_ID that contains a foreign-key reference to the&#xD;
    associated row in the Order table. For a given Line Item, the Order_ID column contains the Order_ID of the Order with&#xD;
    which the Line Item is associated. Foreign keys allow the RDBMS to optimize join operations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In addition, it is important to implement a cascading delete constraint that provides referential integrity in the data&#xD;
    model. Once this is accomplished, whenever the Order is deleted, all of their Line Items are deleted as well.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Modeling Inheritance&quot; name=&quot;Modeling Inheritance&quot;>Modeling Generalization Relationships&lt;/a> in the Data Model&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The standard relational data model does not support modeling inheritance in a direct way. A number of strategies can be&#xD;
    used to model inheritance. These can be summarized as follows:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Use separate tables to represent the super-class and sub-class. The sub-class table must include a foreign key&#xD;
        reference to the super-class table. In order to instantiate a sub-class object, the two tables must be joined&#xD;
        together. This approach is conceptually easy and facilitates changes to the model, but it often performs poorly due&#xD;
        to the extra work.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Duplicate all inherited attributes and associations as separate columns in the sub-class table. This is similar to&#xD;
        de-normalization in the standard relational&amp;nbsp;data model.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Modeling Many-to-Many Associations&quot; name=&quot;Modeling Many-to-Many Associations&quot;>Modeling Many-to-Many&#xD;
    Associations&lt;/a> in the Data Model&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A standard technique in relational modeling is to use an intersection entity to represent many-to-many associations.&#xD;
    The same approach can be applied here: An intersection table is used to represent the association.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    If Suppliers can supply many Products, and a Product can be supplied by many Suppliers, the solution is to create a&#xD;
    Supplier/Product table. This table would contain only the primary keys of the Supplier and Product tables, and serve to&#xD;
    link the Suppliers and their related Products. The Object Model has no analog for this table; it is strictly used to&#xD;
    represent the associations in the relational data model.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Refine the Data Model&quot; name=&quot;Refine the Data Model&quot;>&lt;/a>Refining the Data Model&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Once the design classes have been transformed into tables and the appropriate relationships in the Data Model, the&#xD;
    model is refined as needed to implement referential integrity and optimize data access through views and stored&#xD;
    procedures. For more information, see&amp;nbsp;&amp;nbsp;&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.tech.common.extend_supp-ibm/guidances/guidelines/physical_database_design_16CB502F.html&quot;&#xD;
    guid=&quot;_DNOdMAo9Edygr55FhBZqVw&quot;>Physical Database Design&lt;/a>&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;b>&lt;a id=&quot;Forward-Engineering the Data Model&quot; name=&quot;Forward-Engineering the Data Model&quot;>Forward-Engineering the Data&#xD;
    Model&lt;/a>&lt;/b>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Most application design tools support the generation of Data Definition Language (DDL) scripts from data models and/or&#xD;
    the generation of the database from the data model.&amp;nbsp;Forward-engineering of the database needs to be planned as&#xD;
    part of the overall application development and integration tasks.&amp;nbsp;The timing and frequency for&#xD;
    forward-engineering the database from the Data Model depends on the specific project situation.&amp;nbsp;For new&#xD;
    application development projects that are creating a new database, the initial forward-engineering might need to be&#xD;
    done as part of the work to implement a stable architectural version of the application by the end of the elaboration&#xD;
    phase.&amp;nbsp;In other cases, the initial forward-engineering might be done in early iterations of the construction&#xD;
    phase.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The types of model elements in the&amp;nbsp;data model&amp;nbsp;that can be forward-engineered vary, depending on the specific&#xD;
    design tools and RDBMS used on the project.&amp;nbsp; In general, the major structural elements of the data model,&#xD;
    including tables, views, stored procedures, triggers, and indexes can be forward-engineered into the database.&#xD;
&lt;/p>&amp;nbsp;&amp;nbsp;</mainDescription>
  <externalId xsi:nil="true"/>
  <keyConsiderations xsi:nil="true"/>
</org.eclipse.epf.uma:ContentDescription>
